// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	PortalTokenAuthScopes = "PortalTokenAuth.Scopes"
)

// Defines values for AddonInstanceType.
const (
	AddonInstanceTypeMultiple AddonInstanceType = "multiple"
	AddonInstanceTypeSingle   AddonInstanceType = "single"
)

// Defines values for AddonOrderBy.
const (
	AddonOrderByCreatedAt AddonOrderBy = "created_at"
	AddonOrderById        AddonOrderBy = "id"
	AddonOrderByKey       AddonOrderBy = "key"
	AddonOrderByUpdatedAt AddonOrderBy = "updated_at"
	AddonOrderByVersion   AddonOrderBy = "version"
)

// Defines values for AddonStatus.
const (
	AddonStatusActive   AddonStatus = "active"
	AddonStatusArchived AddonStatus = "archived"
	AddonStatusDraft    AddonStatus = "draft"
)

// Defines values for AppCapabilityType.
const (
	AppCapabilityTypeCalculateTax     AppCapabilityType = "calculateTax"
	AppCapabilityTypeCollectPayments  AppCapabilityType = "collectPayments"
	AppCapabilityTypeInvoiceCustomers AppCapabilityType = "invoiceCustomers"
	AppCapabilityTypeReportEvents     AppCapabilityType = "reportEvents"
	AppCapabilityTypeReportUsage      AppCapabilityType = "reportUsage"
)

// Defines values for AppStatus.
const (
	AppStatusReady        AppStatus = "ready"
	AppStatusUnauthorized AppStatus = "unauthorized"
)

// Defines values for AppType.
const (
	AppTypeCustomInvoicing AppType = "custom_invoicing"
	AppTypeSandbox         AppType = "sandbox"
	AppTypeStripe          AppType = "stripe"
)

// Defines values for BillingCollectionAlignment.
const (
	BillingCollectionAlignmentSubscription BillingCollectionAlignment = "subscription"
)

// Defines values for BillingProfileCustomerOverrideExpand.
const (
	BillingProfileCustomerOverrideExpandApps     BillingProfileCustomerOverrideExpand = "apps"
	BillingProfileCustomerOverrideExpandCustomer BillingProfileCustomerOverrideExpand = "customer"
)

// Defines values for BillingProfileCustomerOverrideOrderBy.
const (
	BillingProfileCustomerOverrideOrderByCustomerCreatedAt    BillingProfileCustomerOverrideOrderBy = "customerCreatedAt"
	BillingProfileCustomerOverrideOrderByCustomerId           BillingProfileCustomerOverrideOrderBy = "customerId"
	BillingProfileCustomerOverrideOrderByCustomerKey          BillingProfileCustomerOverrideOrderBy = "customerKey"
	BillingProfileCustomerOverrideOrderByCustomerName         BillingProfileCustomerOverrideOrderBy = "customerName"
	BillingProfileCustomerOverrideOrderByCustomerPrimaryEmail BillingProfileCustomerOverrideOrderBy = "customerPrimaryEmail"
)

// Defines values for BillingProfileExpand.
const (
	BillingProfileExpandApps BillingProfileExpand = "apps"
)

// Defines values for BillingProfileOrderBy.
const (
	BillingProfileOrderByCreatedAt BillingProfileOrderBy = "createdAt"
	BillingProfileOrderByDefault   BillingProfileOrderBy = "default"
	BillingProfileOrderByName      BillingProfileOrderBy = "name"
	BillingProfileOrderByUpdatedAt BillingProfileOrderBy = "updatedAt"
)

// Defines values for BillingWorkflowAppReferenceType.
const (
	BillingWorkflowAppReferenceTypeAppId   BillingWorkflowAppReferenceType = "app_id"
	BillingWorkflowAppReferenceTypeAppType BillingWorkflowAppReferenceType = "app_type"
)

// Defines values for BillingWorkflowCollectionAlignmentSubscriptionType.
const (
	BillingWorkflowCollectionAlignmentSubscriptionTypeSubscription BillingWorkflowCollectionAlignmentSubscriptionType = "subscription"
)

// Defines values for BillingWorkflowLineResolution.
const (
	BillingWorkflowLineResolutionDay    BillingWorkflowLineResolution = "day"
	BillingWorkflowLineResolutionPeriod BillingWorkflowLineResolution = "period"
)

// Defines values for CheckoutSessionUIMode.
const (
	CheckoutSessionUIModeEmbedded CheckoutSessionUIMode = "embedded"
	CheckoutSessionUIModeHosted   CheckoutSessionUIMode = "hosted"
)

// Defines values for CollectionMethod.
const (
	CollectionMethodChargeAutomatically CollectionMethod = "charge_automatically"
	CollectionMethodSendInvoice         CollectionMethod = "send_invoice"
)

// Defines values for CreateCheckoutSessionTaxIdCollectionRequired.
const (
	CreateCheckoutSessionTaxIdCollectionRequiredIfSupported CreateCheckoutSessionTaxIdCollectionRequired = "if_supported"
	CreateCheckoutSessionTaxIdCollectionRequiredNever       CreateCheckoutSessionTaxIdCollectionRequired = "never"
)

// Defines values for CreateStripeCheckoutSessionBillingAddressCollection.
const (
	CreateStripeCheckoutSessionBillingAddressCollectionAuto     CreateStripeCheckoutSessionBillingAddressCollection = "auto"
	CreateStripeCheckoutSessionBillingAddressCollectionRequired CreateStripeCheckoutSessionBillingAddressCollection = "required"
)

// Defines values for CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPosition.
const (
	CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPositionAuto   CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPosition = "auto"
	CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPositionHidden CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPosition = "hidden"
)

// Defines values for CreateStripeCheckoutSessionConsentCollectionPromotions.
const (
	CreateStripeCheckoutSessionConsentCollectionPromotionsAuto CreateStripeCheckoutSessionConsentCollectionPromotions = "auto"
	CreateStripeCheckoutSessionConsentCollectionPromotionsNone CreateStripeCheckoutSessionConsentCollectionPromotions = "none"
)

// Defines values for CreateStripeCheckoutSessionConsentCollectionTermsOfService.
const (
	CreateStripeCheckoutSessionConsentCollectionTermsOfServiceNone     CreateStripeCheckoutSessionConsentCollectionTermsOfService = "none"
	CreateStripeCheckoutSessionConsentCollectionTermsOfServiceRequired CreateStripeCheckoutSessionConsentCollectionTermsOfService = "required"
)

// Defines values for CreateStripeCheckoutSessionCustomerUpdateBehavior.
const (
	CreateStripeCheckoutSessionCustomerUpdateBehaviorAuto  CreateStripeCheckoutSessionCustomerUpdateBehavior = "auto"
	CreateStripeCheckoutSessionCustomerUpdateBehaviorNever CreateStripeCheckoutSessionCustomerUpdateBehavior = "never"
)

// Defines values for CreateStripeCheckoutSessionRedirectOnCompletion.
const (
	CreateStripeCheckoutSessionRedirectOnCompletionAlways     CreateStripeCheckoutSessionRedirectOnCompletion = "always"
	CreateStripeCheckoutSessionRedirectOnCompletionIfRequired CreateStripeCheckoutSessionRedirectOnCompletion = "if_required"
	CreateStripeCheckoutSessionRedirectOnCompletionNever      CreateStripeCheckoutSessionRedirectOnCompletion = "never"
)

// Defines values for CustomInvoicingAppType.
const (
	CustomInvoicingAppTypeCustomInvoicing CustomInvoicingAppType = "custom_invoicing"
)

// Defines values for CustomInvoicingAppReplaceUpdateType.
const (
	CustomInvoicingAppReplaceUpdateTypeCustomInvoicing CustomInvoicingAppReplaceUpdateType = "custom_invoicing"
)

// Defines values for CustomInvoicingCustomerAppDataType.
const (
	CustomInvoicingCustomerAppDataTypeCustomInvoicing CustomInvoicingCustomerAppDataType = "custom_invoicing"
)

// Defines values for CustomInvoicingPaymentTrigger.
const (
	CustomInvoicingPaymentTriggerActionRequired       CustomInvoicingPaymentTrigger = "action_required"
	CustomInvoicingPaymentTriggerPaid                 CustomInvoicingPaymentTrigger = "paid"
	CustomInvoicingPaymentTriggerPaymentFailed        CustomInvoicingPaymentTrigger = "payment_failed"
	CustomInvoicingPaymentTriggerPaymentOverdue       CustomInvoicingPaymentTrigger = "payment_overdue"
	CustomInvoicingPaymentTriggerPaymentUncollectible CustomInvoicingPaymentTrigger = "payment_uncollectible"
	CustomInvoicingPaymentTriggerVoid                 CustomInvoicingPaymentTrigger = "void"
)

// Defines values for CustomerExpand.
const (
	CustomerExpandSubscriptions CustomerExpand = "subscriptions"
)

// Defines values for CustomerOrderBy.
const (
	CustomerOrderByCreatedAt CustomerOrderBy = "createdAt"
	CustomerOrderById        CustomerOrderBy = "id"
	CustomerOrderByName      CustomerOrderBy = "name"
)

// Defines values for DiscountReasonMaximumSpendType.
const (
	DiscountReasonMaximumSpendTypeMaximumSpend DiscountReasonMaximumSpendType = "maximum_spend"
)

// Defines values for DiscountReasonRatecardPercentageType.
const (
	DiscountReasonRatecardPercentageTypeRatecardPercentage DiscountReasonRatecardPercentageType = "ratecard_percentage"
)

// Defines values for DiscountReasonRatecardUsageType.
const (
	DiscountReasonRatecardUsageTypeRatecardUsage DiscountReasonRatecardUsageType = "ratecard_usage"
)

// Defines values for DiscountReasonType.
const (
	DiscountReasonTypeMaximumSpend       DiscountReasonType = "maximum_spend"
	DiscountReasonTypeRatecardPercentage DiscountReasonType = "ratecard_percentage"
	DiscountReasonTypeRatecardUsage      DiscountReasonType = "ratecard_usage"
)

// Defines values for DynamicPriceType.
const (
	DynamicPriceTypeDynamic DynamicPriceType = "dynamic"
)

// Defines values for DynamicPriceWithCommitmentsType.
const (
	DynamicPriceWithCommitmentsTypeDynamic DynamicPriceWithCommitmentsType = "dynamic"
)

// Defines values for EditOp.
const (
	EditOpAddItem        EditOp = "add_item"
	EditOpAddPhase       EditOp = "add_phase"
	EditOpRemoveItem     EditOp = "remove_item"
	EditOpRemovePhase    EditOp = "remove_phase"
	EditOpStretchPhase   EditOp = "stretch_phase"
	EditOpUnscheduleEdit EditOp = "unschedule_edit"
)

// Defines values for EditSubscriptionAddItemOp.
const (
	EditSubscriptionAddItemOpAddItem EditSubscriptionAddItemOp = "add_item"
)

// Defines values for EditSubscriptionAddPhaseOp.
const (
	EditSubscriptionAddPhaseOpAddPhase EditSubscriptionAddPhaseOp = "add_phase"
)

// Defines values for EditSubscriptionRemoveItemOp.
const (
	EditSubscriptionRemoveItemOpRemoveItem EditSubscriptionRemoveItemOp = "remove_item"
)

// Defines values for EditSubscriptionRemovePhaseOp.
const (
	EditSubscriptionRemovePhaseOpRemovePhase EditSubscriptionRemovePhaseOp = "remove_phase"
)

// Defines values for EditSubscriptionStretchPhaseOp.
const (
	EditSubscriptionStretchPhaseOpStretchPhase EditSubscriptionStretchPhaseOp = "stretch_phase"
)

// Defines values for EditSubscriptionUnscheduleEditOp.
const (
	EditSubscriptionUnscheduleEditOpUnscheduleEdit EditSubscriptionUnscheduleEditOp = "unschedule_edit"
)

// Defines values for EntitlementBooleanCreateInputsType.
const (
	EntitlementBooleanCreateInputsTypeBoolean EntitlementBooleanCreateInputsType = "boolean"
)

// Defines values for EntitlementMeteredType.
const (
	EntitlementMeteredTypeMetered EntitlementMeteredType = "metered"
)

// Defines values for EntitlementMeteredCreateInputsType.
const (
	EntitlementMeteredCreateInputsTypeMetered EntitlementMeteredCreateInputsType = "metered"
)

// Defines values for EntitlementOrderBy.
const (
	EntitlementOrderByCreatedAt EntitlementOrderBy = "createdAt"
	EntitlementOrderByUpdatedAt EntitlementOrderBy = "updatedAt"
)

// Defines values for EntitlementStaticType.
const (
	EntitlementStaticTypeStatic EntitlementStaticType = "static"
)

// Defines values for EntitlementStaticCreateInputsType.
const (
	EntitlementStaticCreateInputsTypeStatic EntitlementStaticCreateInputsType = "static"
)

// Defines values for ExpirationDuration.
const (
	ExpirationDurationDAY   ExpirationDuration = "DAY"
	ExpirationDurationHOUR  ExpirationDuration = "HOUR"
	ExpirationDurationMONTH ExpirationDuration = "MONTH"
	ExpirationDurationWEEK  ExpirationDuration = "WEEK"
	ExpirationDurationYEAR  ExpirationDuration = "YEAR"
)

// Defines values for FeatureOrderBy.
const (
	FeatureOrderByCreatedAt FeatureOrderBy = "createdAt"
	FeatureOrderById        FeatureOrderBy = "id"
	FeatureOrderByKey       FeatureOrderBy = "key"
	FeatureOrderByName      FeatureOrderBy = "name"
	FeatureOrderByUpdatedAt FeatureOrderBy = "updatedAt"
)

// Defines values for FlatPriceType.
const (
	FlatPriceTypeFlat FlatPriceType = "flat"
)

// Defines values for FlatPriceWithPaymentTermType.
const (
	FlatPriceWithPaymentTermTypeFlat FlatPriceWithPaymentTermType = "flat"
)

// Defines values for GrantOrderBy.
const (
	GrantOrderByCreatedAt GrantOrderBy = "createdAt"
	GrantOrderById        GrantOrderBy = "id"
	GrantOrderByUpdatedAt GrantOrderBy = "updatedAt"
)

// Defines values for InstallMethod.
const (
	InstallMethodNoCredentialsRequired InstallMethod = "no_credentials_required"
	InstallMethodWithApiKey            InstallMethod = "with_api_key"
	InstallMethodWithOauth2            InstallMethod = "with_oauth2"
)

// Defines values for InvoiceDetailedLineType.
const (
	InvoiceDetailedLineTypeFlatFee InvoiceDetailedLineType = "flat_fee"
)

// Defines values for InvoiceDetailedLineCostCategory.
const (
	InvoiceDetailedLineCostCategoryCommitment InvoiceDetailedLineCostCategory = "commitment"
	InvoiceDetailedLineCostCategoryRegular    InvoiceDetailedLineCostCategory = "regular"
)

// Defines values for InvoiceDocumentRefType.
const (
	InvoiceDocumentRefTypeCreditNoteOriginalInvoice InvoiceDocumentRefType = "credit_note_original_invoice"
)

// Defines values for InvoiceExpand.
const (
	InvoiceExpandLines        InvoiceExpand = "lines"
	InvoiceExpandPreceding    InvoiceExpand = "preceding"
	InvoiceExpandWorkflowApps InvoiceExpand = "workflow.apps"
)

// Defines values for InvoiceLineType.
const (
	InvoiceLineTypeUsageBased InvoiceLineType = "usage_based"
)

// Defines values for InvoiceLineManagedBy.
const (
	InvoiceLineManagedByManual       InvoiceLineManagedBy = "manual"
	InvoiceLineManagedBySubscription InvoiceLineManagedBy = "subscription"
	InvoiceLineManagedBySystem       InvoiceLineManagedBy = "system"
)

// Defines values for InvoiceLineStatus.
const (
	InvoiceLineStatusDetail InvoiceLineStatus = "detail"
	InvoiceLineStatusSplit  InvoiceLineStatus = "split"
	InvoiceLineStatusValid  InvoiceLineStatus = "valid"
)

// Defines values for InvoiceLineTaxBehavior.
const (
	InvoiceLineTaxBehaviorExclusive InvoiceLineTaxBehavior = "exclusive"
	InvoiceLineTaxBehaviorInclusive InvoiceLineTaxBehavior = "inclusive"
)

// Defines values for InvoiceLineTypes.
const (
	InvoiceLineTypesFlatFee    InvoiceLineTypes = "flat_fee"
	InvoiceLineTypesUsageBased InvoiceLineTypes = "usage_based"
)

// Defines values for InvoiceOrderBy.
const (
	InvoiceOrderByCreatedAt    InvoiceOrderBy = "createdAt"
	InvoiceOrderByCustomerName InvoiceOrderBy = "customer.name"
	InvoiceOrderByIssuedAt     InvoiceOrderBy = "issuedAt"
	InvoiceOrderByPeriodStart  InvoiceOrderBy = "periodStart"
	InvoiceOrderByStatus       InvoiceOrderBy = "status"
	InvoiceOrderByUpdatedAt    InvoiceOrderBy = "updatedAt"
)

// Defines values for InvoiceStatus.
const (
	InvoiceStatusDraft             InvoiceStatus = "draft"
	InvoiceStatusGathering         InvoiceStatus = "gathering"
	InvoiceStatusIssued            InvoiceStatus = "issued"
	InvoiceStatusIssuing           InvoiceStatus = "issuing"
	InvoiceStatusOverdue           InvoiceStatus = "overdue"
	InvoiceStatusPaid              InvoiceStatus = "paid"
	InvoiceStatusPaymentProcessing InvoiceStatus = "payment_processing"
	InvoiceStatusUncollectible     InvoiceStatus = "uncollectible"
	InvoiceStatusVoided            InvoiceStatus = "voided"
)

// Defines values for InvoiceType.
const (
	InvoiceTypeCreditNote InvoiceType = "credit_note"
	InvoiceTypeStandard   InvoiceType = "standard"
)

// Defines values for MeasureUsageFromPreset.
const (
	MeasureUsageFromPresetCurrentPeriodStart MeasureUsageFromPreset = "CURRENT_PERIOD_START"
	MeasureUsageFromPresetNow                MeasureUsageFromPreset = "NOW"
)

// Defines values for MeterAggregation.
const (
	MeterAggregationAvg         MeterAggregation = "AVG"
	MeterAggregationCount       MeterAggregation = "COUNT"
	MeterAggregationLatest      MeterAggregation = "LATEST"
	MeterAggregationMax         MeterAggregation = "MAX"
	MeterAggregationMin         MeterAggregation = "MIN"
	MeterAggregationSum         MeterAggregation = "SUM"
	MeterAggregationUniqueCount MeterAggregation = "UNIQUE_COUNT"
)

// Defines values for MeterOrderBy.
const (
	MeterOrderByAggregation MeterOrderBy = "aggregation"
	MeterOrderByCreatedAt   MeterOrderBy = "createdAt"
	MeterOrderByKey         MeterOrderBy = "key"
	MeterOrderByName        MeterOrderBy = "name"
	MeterOrderByUpdatedAt   MeterOrderBy = "updatedAt"
)

// Defines values for NotificationChannelOrderBy.
const (
	NotificationChannelOrderByCreatedAt NotificationChannelOrderBy = "createdAt"
	NotificationChannelOrderById        NotificationChannelOrderBy = "id"
	NotificationChannelOrderByType      NotificationChannelOrderBy = "type"
	NotificationChannelOrderByUpdatedAt NotificationChannelOrderBy = "updatedAt"
)

// Defines values for NotificationChannelType.
const (
	NotificationChannelTypeWebhook NotificationChannelType = "WEBHOOK"
)

// Defines values for NotificationChannelWebhookType.
const (
	NotificationChannelWebhookTypeWEBHOOK NotificationChannelWebhookType = "WEBHOOK"
)

// Defines values for NotificationChannelWebhookCreateRequestType.
const (
	NotificationChannelWebhookCreateRequestTypeWEBHOOK NotificationChannelWebhookCreateRequestType = "WEBHOOK"
)

// Defines values for NotificationEventBalanceThresholdPayloadType.
const (
	NotificationEventBalanceThresholdPayloadTypeEntitlementsBalanceThreshold NotificationEventBalanceThresholdPayloadType = "entitlements.balance.threshold"
)

// Defines values for NotificationEventDeliveryStatusState.
const (
	NotificationEventDeliveryStatusStateFailed  NotificationEventDeliveryStatusState = "FAILED"
	NotificationEventDeliveryStatusStatePending NotificationEventDeliveryStatusState = "PENDING"
	NotificationEventDeliveryStatusStateSending NotificationEventDeliveryStatusState = "SENDING"
	NotificationEventDeliveryStatusStateSuccess NotificationEventDeliveryStatusState = "SUCCESS"
)

// Defines values for NotificationEventInvoiceCreatedPayloadType.
const (
	NotificationEventInvoiceCreatedPayloadTypeInvoiceCreated NotificationEventInvoiceCreatedPayloadType = "invoice.created"
)

// Defines values for NotificationEventInvoiceUpdatedPayloadType.
const (
	NotificationEventInvoiceUpdatedPayloadTypeInvoiceUpdated NotificationEventInvoiceUpdatedPayloadType = "invoice.updated"
)

// Defines values for NotificationEventOrderBy.
const (
	NotificationEventOrderByCreatedAt NotificationEventOrderBy = "createdAt"
	NotificationEventOrderById        NotificationEventOrderBy = "id"
)

// Defines values for NotificationEventResetPayloadType.
const (
	NotificationEventResetPayloadTypeEntitlementsReset NotificationEventResetPayloadType = "entitlements.reset"
)

// Defines values for NotificationEventType.
const (
	NotificationEventTypeEntitlementsBalanceThreshold NotificationEventType = "entitlements.balance.threshold"
	NotificationEventTypeEntitlementsReset            NotificationEventType = "entitlements.reset"
	NotificationEventTypeInvoiceCreated               NotificationEventType = "invoice.created"
	NotificationEventTypeInvoiceUpdated               NotificationEventType = "invoice.updated"
)

// Defines values for NotificationRuleBalanceThresholdType.
const (
	NotificationRuleBalanceThresholdTypeEntitlementsBalanceThreshold NotificationRuleBalanceThresholdType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdCreateRequestType.
const (
	NotificationRuleBalanceThresholdCreateRequestTypeEntitlementsBalanceThreshold NotificationRuleBalanceThresholdCreateRequestType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdValueType.
const (
	NotificationRuleBalanceThresholdValueTypeNumber  NotificationRuleBalanceThresholdValueType = "NUMBER"
	NotificationRuleBalanceThresholdValueTypePercent NotificationRuleBalanceThresholdValueType = "PERCENT"
)

// Defines values for NotificationRuleEntitlementResetType.
const (
	NotificationRuleEntitlementResetTypeEntitlementsReset NotificationRuleEntitlementResetType = "entitlements.reset"
)

// Defines values for NotificationRuleEntitlementResetCreateRequestType.
const (
	NotificationRuleEntitlementResetCreateRequestTypeEntitlementsReset NotificationRuleEntitlementResetCreateRequestType = "entitlements.reset"
)

// Defines values for NotificationRuleInvoiceCreatedType.
const (
	NotificationRuleInvoiceCreatedTypeInvoiceCreated NotificationRuleInvoiceCreatedType = "invoice.created"
)

// Defines values for NotificationRuleInvoiceCreatedCreateRequestType.
const (
	NotificationRuleInvoiceCreatedCreateRequestTypeInvoiceCreated NotificationRuleInvoiceCreatedCreateRequestType = "invoice.created"
)

// Defines values for NotificationRuleInvoiceUpdatedType.
const (
	NotificationRuleInvoiceUpdatedTypeInvoiceUpdated NotificationRuleInvoiceUpdatedType = "invoice.updated"
)

// Defines values for NotificationRuleInvoiceUpdatedCreateRequestType.
const (
	NotificationRuleInvoiceUpdatedCreateRequestTypeInvoiceUpdated NotificationRuleInvoiceUpdatedCreateRequestType = "invoice.updated"
)

// Defines values for NotificationRuleOrderBy.
const (
	NotificationRuleOrderByCreatedAt NotificationRuleOrderBy = "createdAt"
	NotificationRuleOrderById        NotificationRuleOrderBy = "id"
	NotificationRuleOrderByType      NotificationRuleOrderBy = "type"
	NotificationRuleOrderByUpdatedAt NotificationRuleOrderBy = "updatedAt"
)

// Defines values for OAuth2AuthorizationCodeGrantErrorType.
const (
	OAuth2AuthorizationCodeGrantErrorTypeAccessDenied            OAuth2AuthorizationCodeGrantErrorType = "access_denied"
	OAuth2AuthorizationCodeGrantErrorTypeInvalidRequest          OAuth2AuthorizationCodeGrantErrorType = "invalid_request"
	OAuth2AuthorizationCodeGrantErrorTypeInvalidScope            OAuth2AuthorizationCodeGrantErrorType = "invalid_scope"
	OAuth2AuthorizationCodeGrantErrorTypeServerError             OAuth2AuthorizationCodeGrantErrorType = "server_error"
	OAuth2AuthorizationCodeGrantErrorTypeTemporarilyUnavailable  OAuth2AuthorizationCodeGrantErrorType = "temporarily_unavailable"
	OAuth2AuthorizationCodeGrantErrorTypeUnauthorizedClient      OAuth2AuthorizationCodeGrantErrorType = "unauthorized_client"
	OAuth2AuthorizationCodeGrantErrorTypeUnsupportedResponseType OAuth2AuthorizationCodeGrantErrorType = "unsupported_response_type"
)

// Defines values for PackagePriceType.
const (
	PackagePriceTypePackage PackagePriceType = "package"
)

// Defines values for PackagePriceWithCommitmentsType.
const (
	PackagePriceWithCommitmentsTypePackage PackagePriceWithCommitmentsType = "package"
)

// Defines values for PaymentTermDueDateType.
const (
	PaymentTermDueDateTypeDueDate PaymentTermDueDateType = "due_date"
)

// Defines values for PaymentTermInstantType.
const (
	PaymentTermInstantTypeInstant PaymentTermInstantType = "instant"
)

// Defines values for PaymentTermType.
const (
	PaymentTermTypeDueDate PaymentTermType = "due_date"
	PaymentTermTypeInstant PaymentTermType = "instant"
)

// Defines values for PlanAddonOrderBy.
const (
	PlanAddonOrderByCreatedAt PlanAddonOrderBy = "created_at"
	PlanAddonOrderById        PlanAddonOrderBy = "id"
	PlanAddonOrderByKey       PlanAddonOrderBy = "key"
	PlanAddonOrderByUpdatedAt PlanAddonOrderBy = "updated_at"
	PlanAddonOrderByVersion   PlanAddonOrderBy = "version"
)

// Defines values for PlanOrderBy.
const (
	PlanOrderByCreatedAt PlanOrderBy = "created_at"
	PlanOrderById        PlanOrderBy = "id"
	PlanOrderByKey       PlanOrderBy = "key"
	PlanOrderByUpdatedAt PlanOrderBy = "updated_at"
	PlanOrderByVersion   PlanOrderBy = "version"
)

// Defines values for PlanStatus.
const (
	PlanStatusActive    PlanStatus = "active"
	PlanStatusArchived  PlanStatus = "archived"
	PlanStatusDraft     PlanStatus = "draft"
	PlanStatusScheduled PlanStatus = "scheduled"
)

// Defines values for PricePaymentTerm.
const (
	PricePaymentTermInAdvance PricePaymentTerm = "in_advance"
	PricePaymentTermInArrears PricePaymentTerm = "in_arrears"
)

// Defines values for PriceType.
const (
	PriceTypeDynamic PriceType = "dynamic"
	PriceTypeFlat    PriceType = "flat"
	PriceTypePackage PriceType = "package"
	PriceTypeTiered  PriceType = "tiered"
	PriceTypeUnit    PriceType = "unit"
)

// Defines values for ProRatingMode.
const (
	ProRatingModeProratePrices ProRatingMode = "prorate_prices"
)

// Defines values for RateCardBooleanEntitlementType.
const (
	RateCardBooleanEntitlementTypeBoolean RateCardBooleanEntitlementType = "boolean"
)

// Defines values for RateCardFlatFeeType.
const (
	RateCardFlatFeeTypeFlatFee RateCardFlatFeeType = "flat_fee"
)

// Defines values for RateCardMeteredEntitlementType.
const (
	RateCardMeteredEntitlementTypeMetered RateCardMeteredEntitlementType = "metered"
)

// Defines values for RateCardStaticEntitlementType.
const (
	RateCardStaticEntitlementTypeStatic RateCardStaticEntitlementType = "static"
)

// Defines values for RateCardType.
const (
	RateCardTypeFlatFee    RateCardType = "flat_fee"
	RateCardTypeUsageBased RateCardType = "usage_based"
)

// Defines values for RateCardUsageBasedType.
const (
	RateCardUsageBasedTypeUsageBased RateCardUsageBasedType = "usage_based"
)

// Defines values for RecurringPeriodIntervalEnum.
const (
	RecurringPeriodIntervalEnumDAY   RecurringPeriodIntervalEnum = "DAY"
	RecurringPeriodIntervalEnumMONTH RecurringPeriodIntervalEnum = "MONTH"
	RecurringPeriodIntervalEnumWEEK  RecurringPeriodIntervalEnum = "WEEK"
	RecurringPeriodIntervalEnumYEAR  RecurringPeriodIntervalEnum = "YEAR"
)

// Defines values for RemovePhaseShifting.
const (
	RemovePhaseShiftingNext RemovePhaseShifting = "next"
	RemovePhaseShiftingPrev RemovePhaseShifting = "prev"
)

// Defines values for SandboxAppType.
const (
	SandboxAppTypeSandbox SandboxAppType = "sandbox"
)

// Defines values for SandboxAppReplaceUpdateType.
const (
	SandboxAppReplaceUpdateTypeSandbox SandboxAppReplaceUpdateType = "sandbox"
)

// Defines values for SandboxCustomerAppDataType.
const (
	SandboxCustomerAppDataTypeSandbox SandboxCustomerAppDataType = "sandbox"
)

// Defines values for SortOrder.
const (
	SortOrderASC  SortOrder = "ASC"
	SortOrderDESC SortOrder = "DESC"
)

// Defines values for StripeAppType.
const (
	StripeAppTypeStripe StripeAppType = "stripe"
)

// Defines values for StripeAppReadOrCreateOrUpdateOrDeleteOrQueryType.
const (
	StripeAppReadOrCreateOrUpdateOrDeleteOrQueryTypeStripe StripeAppReadOrCreateOrUpdateOrDeleteOrQueryType = "stripe"
)

// Defines values for StripeAppReplaceUpdateType.
const (
	StripeAppReplaceUpdateTypeStripe StripeAppReplaceUpdateType = "stripe"
)

// Defines values for StripeCheckoutSessionMode.
const (
	StripeCheckoutSessionModeSetup StripeCheckoutSessionMode = "setup"
)

// Defines values for StripeCustomerAppDataType.
const (
	StripeCustomerAppDataTypeStripe StripeCustomerAppDataType = "stripe"
)

// Defines values for StripeCustomerAppDataCreateOrUpdateItemType.
const (
	StripeCustomerAppDataCreateOrUpdateItemTypeStripe StripeCustomerAppDataCreateOrUpdateItemType = "stripe"
)

// Defines values for SubscriptionStatus.
const (
	SubscriptionStatusActive    SubscriptionStatus = "active"
	SubscriptionStatusCanceled  SubscriptionStatus = "canceled"
	SubscriptionStatusInactive  SubscriptionStatus = "inactive"
	SubscriptionStatusScheduled SubscriptionStatus = "scheduled"
)

// Defines values for SubscriptionTimingEnum.
const (
	SubscriptionTimingEnumImmediate        SubscriptionTimingEnum = "immediate"
	SubscriptionTimingEnumNextBillingCycle SubscriptionTimingEnum = "next_billing_cycle"
)

// Defines values for TaxBehavior.
const (
	TaxBehaviorExclusive TaxBehavior = "exclusive"
	TaxBehaviorInclusive TaxBehavior = "inclusive"
)

// Defines values for TieredPriceType.
const (
	TieredPriceTypeTiered TieredPriceType = "tiered"
)

// Defines values for TieredPriceMode.
const (
	TieredPriceModeGraduated TieredPriceMode = "graduated"
	TieredPriceModeVolume    TieredPriceMode = "volume"
)

// Defines values for TieredPriceWithCommitmentsType.
const (
	TieredPriceWithCommitmentsTypeTiered TieredPriceWithCommitmentsType = "tiered"
)

// Defines values for UnitPriceType.
const (
	UnitPriceTypeUnit UnitPriceType = "unit"
)

// Defines values for UnitPriceWithCommitmentsType.
const (
	UnitPriceWithCommitmentsTypeUnit UnitPriceWithCommitmentsType = "unit"
)

// Defines values for ValidationIssueSeverity.
const (
	ValidationIssueSeverityCritical ValidationIssueSeverity = "critical"
	ValidationIssueSeverityWarning  ValidationIssueSeverity = "warning"
)

// Defines values for VoidInvoiceLineActionType.
const (
	VoidInvoiceLineActionTypeDiscard VoidInvoiceLineActionType = "discard"
	VoidInvoiceLineActionTypePending VoidInvoiceLineActionType = "pending"
)

// Defines values for VoidInvoiceLineDiscardActionType.
const (
	VoidInvoiceLineDiscardActionTypeDiscard VoidInvoiceLineDiscardActionType = "discard"
)

// Defines values for VoidInvoiceLinePendingActionCreateType.
const (
	VoidInvoiceLinePendingActionCreateTypePending VoidInvoiceLinePendingActionCreateType = "pending"
)

// Defines values for VoidInvoiceLinePendingActionCreateItemType.
const (
	VoidInvoiceLinePendingActionCreateItemTypePending VoidInvoiceLinePendingActionCreateItemType = "pending"
)

// Defines values for WindowSize.
const (
	WindowSizeDay    WindowSize = "DAY"
	WindowSizeHour   WindowSize = "HOUR"
	WindowSizeMinute WindowSize = "MINUTE"
)

// Addon Add-on allows extending subscriptions with compatible plans with additional ratecards.
type Addon struct {
	// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the add-on.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EffectiveFrom The date and time when the add-on becomes effective. When not specified, the add-on is a draft.
	EffectiveFrom *time.Time `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time when the add-on is no longer effective. When not specified, the add-on is effective indefinitely.
	EffectiveTo *time.Time `json:"effectiveTo,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// InstanceType The instanceType of the add-ons. Can be "single" or "multiple".
	InstanceType AddonInstanceType `json:"instanceType"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the add-on.
	RateCards []RateCard `json:"rateCards"`

	// Status The status of the add-on.
	// Computed based on the effective start and end dates:
	// - draft = no effectiveFrom
	// - active = effectiveFrom <= now < effectiveTo
	// - archived  = effectiveTo <= now
	Status AddonStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// ValidationErrors List of validation errors.
	ValidationErrors *[]ValidationError `json:"validationErrors"`

	// Version Version of the add-on. Incremented when the add-on is updated.
	Version int `json:"version"`
}

// AddonCreate Resource create operation model.
type AddonCreate struct {
	// Currency The currency code of the add-on.
	Currency CurrencyCode `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// InstanceType The instanceType of the add-ons. Can be "single" or "multiple".
	InstanceType AddonInstanceType `json:"instanceType"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the add-on.
	RateCards []RateCard `json:"rateCards"`
}

// AddonInstanceType The instanceType of the add-on.
// Single instance add-ons can be added to subscription only once while add-ons with multiple type can be added more then once.
type AddonInstanceType string

// AddonOrderBy Order by options for add-ons.
type AddonOrderBy string

// AddonPaginatedResponse Paginated response
type AddonPaginatedResponse struct {
	// Items The items in the current page.
	Items []Addon `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// AddonReplaceUpdate Resource update operation model.
type AddonReplaceUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// InstanceType The instanceType of the add-ons. Can be "single" or "multiple".
	InstanceType AddonInstanceType `json:"instanceType"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the add-on.
	RateCards []RateCard `json:"rateCards"`
}

// AddonStatus The status of the add-on defined by the effectiveFrom and effectiveTo properties.
type AddonStatus string

// Address Address
type Address struct {
	// City City.
	City *string `json:"city,omitempty"`

	// Country Country code in [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 format.
	Country *CountryCode `json:"country,omitempty"`

	// Line1 First line of the address.
	Line1 *string `json:"line1,omitempty"`

	// Line2 Second line of the address.
	Line2 *string `json:"line2,omitempty"`

	// PhoneNumber Phone number.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// PostalCode Postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State State or province.
	State *string `json:"state,omitempty"`
}

// Alignment Alignment configuration for a plan or subscription.
type Alignment struct {
	// BillablesMustAlign Whether all Billable items and RateCards must align.
	// Alignment means the Price's BillingCadence must align for both duration and anchor time.
	BillablesMustAlign *bool `json:"billablesMustAlign,omitempty"`
}

// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
type Annotations map[string]interface{}

// App App.
// One of: stripe
type App struct {
	union json.RawMessage
}

// AppBase Abstract base model for installed apps.
//
// Represent an app installed to the organization.
// This is an actual instance, with its own configuration and credentials.
type AppBase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AppCapability App capability.
//
// Capabilities only exist in config so they don't extend the Resource model.
type AppCapability struct {
	// Description The capability description.
	Description string `json:"description"`

	// Key Key
	Key string `json:"key"`

	// Name The capability name.
	Name string `json:"name"`

	// Type The capability type.
	Type AppCapabilityType `json:"type"`
}

// AppCapabilityType App capability type.
type AppCapabilityType string

// AppPaginatedResponse Paginated response
type AppPaginatedResponse struct {
	// Items The items in the current page.
	Items []App `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// AppReadOrCreateOrUpdateOrDeleteOrQuery App.
// One of: stripe
type AppReadOrCreateOrUpdateOrDeleteOrQuery struct {
	union json.RawMessage
}

// AppReference App reference
//
// Can be used as a short reference to an app if the full app object is not needed.
type AppReference struct {
	// Id The ID of the app.
	Id string `json:"id"`
}

// AppReplaceUpdate App ReplaceUpdate Model
type AppReplaceUpdate struct {
	union json.RawMessage
}

// AppStatus App installed status.
type AppStatus string

// AppType Type of the app.
type AppType string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = UnexpectedProblemResponse

// BalanceHistoryWindow The balance history window.
type BalanceHistoryWindow struct {
	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart float64 `json:"balanceAtStart"`

	// Period A period with a start and end time.
	Period Period `json:"period"`

	// Usage The total usage of the feature in the period.
	Usage float64 `json:"usage"`
}

// BillingCollectionAlignment BillingCollectionAlignment specifies when the pending line items should be collected into
// an invoice.
type BillingCollectionAlignment string

// BillingCustomerProfile Customer specific merged profile.
//
// This profile is calculated from the customer override and the billing profile it references or the default.
//
// Thus this does not have any kind of resource fields, only the calculated values.
type BillingCustomerProfile struct {
	// Apps The applications used by this billing profile.
	//
	// Expand settings govern if this includes the whole app object or just the ID references.
	Apps BillingProfileAppsOrReference `json:"apps"`

	// Supplier The name and contact information for the supplier this billing profile represents
	Supplier BillingParty `json:"supplier"`

	// Workflow The billing workflow settings for this profile
	Workflow BillingWorkflow `json:"workflow"`
}

// BillingDiscountMetadata Billing specific fields for product catalog discounts.
type BillingDiscountMetadata struct {
	// CorrelationId Correlation ID for the discount.
	//
	// This is used to link discounts across different invoices (progressive billing use case).
	//
	// If not provided, the invoicing engine will auto-generate one. When editing an invoice line,
	// please make sure to keep the same correlation ID of the discount or in progressive billing
	// setups the discount amounts might be incorrect.
	CorrelationId *string `json:"correlationId,omitempty"`
}

// BillingDiscountPercentage A percentage discount.
type BillingDiscountPercentage struct {
	// CorrelationId Correlation ID for the discount.
	//
	// This is used to link discounts across different invoices (progressive billing use case).
	//
	// If not provided, the invoicing engine will auto-generate one. When editing an invoice line,
	// please make sure to keep the same correlation ID of the discount or in progressive billing
	// setups the discount amounts might be incorrect.
	CorrelationId *string `json:"correlationId,omitempty"`

	// Percentage The percentage of the discount.
	Percentage Percentage `json:"percentage"`
}

// BillingDiscountReason The reason for the discount.
type BillingDiscountReason struct {
	union json.RawMessage
}

// BillingDiscountUsage A usage discount.
type BillingDiscountUsage struct {
	// CorrelationId Correlation ID for the discount.
	//
	// This is used to link discounts across different invoices (progressive billing use case).
	//
	// If not provided, the invoicing engine will auto-generate one. When editing an invoice line,
	// please make sure to keep the same correlation ID of the discount or in progressive billing
	// setups the discount amounts might be incorrect.
	CorrelationId *string `json:"correlationId,omitempty"`

	// Quantity The quantity of the usage discount.
	//
	// Must be positive.
	Quantity Numeric `json:"quantity"`
}

// BillingDiscounts A discount by type.
type BillingDiscounts struct {
	// Percentage The percentage discount.
	Percentage *BillingDiscountPercentage `json:"percentage,omitempty"`

	// Usage The usage discount.
	Usage *BillingDiscountUsage `json:"usage,omitempty"`
}

// BillingParty Party represents a person or business entity.
type BillingParty struct {
	// Addresses Regular post addresses for where information should be sent if needed.
	Addresses *[]Address `json:"addresses,omitempty"`

	// Id Unique identifier for the party (if available)
	Id *string `json:"id,omitempty"`

	// Name Legal name or representation of the organization.
	Name *string `json:"name,omitempty"`

	// TaxId The entity's legal ID code used for tax purposes. They may have
	// other numbers, but we're only interested in those valid for tax purposes.
	TaxId *BillingPartyTaxIdentity `json:"taxId,omitempty"`
}

// BillingPartyReplaceUpdate Resource update operation model.
type BillingPartyReplaceUpdate struct {
	// Addresses Regular post addresses for where information should be sent if needed.
	Addresses *[]Address `json:"addresses,omitempty"`

	// Name Legal name or representation of the organization.
	Name *string `json:"name,omitempty"`

	// TaxId The entity's legal ID code used for tax purposes. They may have
	// other numbers, but we're only interested in those valid for tax purposes.
	TaxId *BillingPartyTaxIdentity `json:"taxId,omitempty"`
}

// BillingPartyTaxIdentity Identity stores the details required to identify an entity for tax purposes in a specific country.
type BillingPartyTaxIdentity struct {
	// Code Normalized tax code shown on the original identity document.
	Code *BillingTaxIdentificationCode `json:"code,omitempty"`
}

// BillingProfile BillingProfile represents a billing profile
type BillingProfile struct {
	// Apps The applications used by this billing profile.
	//
	// Expand settings govern if this includes the whole app object or just the ID references.
	Apps BillingProfileAppsOrReference `json:"apps"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default Is this the default profile?
	Default bool `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Supplier The name and contact information for the supplier this billing profile represents
	Supplier BillingParty `json:"supplier"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Workflow The billing workflow settings for this profile
	Workflow BillingWorkflow `json:"workflow"`
}

// BillingProfileAppReferences BillingProfileAppReferences represents the references (id, type) to the apps used by a billing profile
type BillingProfileAppReferences struct {
	// Invoicing The invoicing app used for this workflow
	Invoicing AppReference `json:"invoicing"`

	// Payment The payment app used for this workflow
	Payment AppReference `json:"payment"`

	// Tax The tax app used for this workflow
	Tax AppReference `json:"tax"`
}

// BillingProfileApps BillingProfileApps represents the applications used by a billing profile
type BillingProfileApps struct {
	// Invoicing The invoicing app used for this workflow
	Invoicing App `json:"invoicing"`

	// Payment The payment app used for this workflow
	Payment App `json:"payment"`

	// Tax The tax app used for this workflow
	Tax App `json:"tax"`
}

// BillingProfileAppsCreate BillingProfileAppsCreate represents the input for creating a billing profile's apps
type BillingProfileAppsCreate struct {
	// Invoicing The invoicing app used for this workflow
	Invoicing string `json:"invoicing"`

	// Payment The payment app used for this workflow
	Payment string `json:"payment"`

	// Tax The tax app used for this workflow
	Tax string `json:"tax"`
}

// BillingProfileAppsOrReference ProfileAppsOrReference represents the union of ProfileApps and ProfileAppReferences
// for a billing profile.
type BillingProfileAppsOrReference struct {
	union json.RawMessage
}

// BillingProfileCreate BillingProfileCreate represents the input for creating a billing profile
type BillingProfileCreate struct {
	// Apps The apps used by this billing profile.
	Apps BillingProfileAppsCreate `json:"apps"`

	// Default Is this the default profile?
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Supplier The name and contact information for the supplier this billing profile represents
	Supplier BillingParty `json:"supplier"`

	// Workflow The billing workflow settings for this profile.
	Workflow BillingWorkflowCreate `json:"workflow"`
}

// BillingProfileCustomerOverride Customer override values.
type BillingProfileCustomerOverride struct {
	// BillingProfileId The billing profile this override is associated with.
	//
	// If empty the default profile is looked up dynamically.
	BillingProfileId *string `json:"billingProfileId,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CustomerId The customer id this override is associated with.
	CustomerId string `json:"customerId"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// BillingProfileCustomerOverrideCreate Payload for creating a new or updating an existing customer override.
type BillingProfileCustomerOverrideCreate struct {
	// BillingProfileId The billing profile this override is associated with.
	//
	// If not provided, the default billing profile is chosen if available.
	BillingProfileId *string `json:"billingProfileId,omitempty"`
}

// BillingProfileCustomerOverrideExpand CustomerOverrideExpand specifies the parts of the profile to expand.
type BillingProfileCustomerOverrideExpand string

// BillingProfileCustomerOverrideOrderBy Order by options for customers.
type BillingProfileCustomerOverrideOrderBy string

// BillingProfileCustomerOverrideWithDetails Customer specific workflow overrides.
type BillingProfileCustomerOverrideWithDetails struct {
	// BaseBillingProfileId The billing profile the customerProfile is associated with at the time of query.
	//
	// customerOverride contains the explicit mapping set in the customer override object. If that is
	// empty, then the baseBillingProfileId is the default profile.
	BaseBillingProfileId string `json:"baseBillingProfileId"`

	// Customer The customer this override belongs to.
	Customer *Customer `json:"customer,omitempty"`

	// CustomerOverride The customer override values.
	//
	// If empty the merged values are calculated based on the default profile.
	CustomerOverride *BillingProfileCustomerOverride `json:"customerOverride,omitempty"`

	// CustomerProfile Merged billing profile with the customer specific overrides.
	CustomerProfile *BillingCustomerProfile `json:"customerProfile,omitempty"`
}

// BillingProfileCustomerOverrideWithDetailsPaginatedResponse Paginated response
type BillingProfileCustomerOverrideWithDetailsPaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingProfileCustomerOverrideWithDetails `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// BillingProfileCustomerWorkflowOverride Customer specific workflow overrides.
type BillingProfileCustomerWorkflowOverride struct {
	// Collection The collection settings for this workflow
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// Invoicing The invoicing settings for this workflow
	Invoicing *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`

	// InvoicingApp The invoicing app used for this workflow
	InvoicingApp AppReadOrCreateOrUpdateOrDeleteOrQuery `json:"invoicingApp"`

	// Payment The payment settings for this workflow
	Payment *BillingWorkflowPaymentSettings `json:"payment,omitempty"`

	// PaymentApp The payment app used for this workflow
	PaymentApp AppReadOrCreateOrUpdateOrDeleteOrQuery `json:"paymentApp"`

	// Tax The tax settings for this workflow
	Tax *BillingWorkflowTaxSettings `json:"tax,omitempty"`

	// TaxApp The tax app used for this workflow
	TaxApp AppReadOrCreateOrUpdateOrDeleteOrQuery `json:"taxApp"`
}

// BillingProfileExpand BillingProfileExpand details what profile fields to expand
type BillingProfileExpand string

// BillingProfileOrderBy BillingProfileOrderBy specifies the ordering options for profiles
type BillingProfileOrderBy string

// BillingProfilePaginatedResponse Paginated response
type BillingProfilePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingProfile `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// BillingProfileReplaceUpdateWithWorkflow BillingProfileReplaceUpdate represents the input for updating a billing profile
//
// The apps field cannot be updated directly, if an app change is desired a new
// profile should be created.
type BillingProfileReplaceUpdateWithWorkflow struct {
	// Default Is this the default profile?
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Supplier The name and contact information for the supplier this billing profile represents
	Supplier BillingParty `json:"supplier"`

	// Workflow The billing workflow settings for this profile.
	Workflow BillingWorkflow `json:"workflow"`
}

// BillingTaxIdentificationCode TaxIdentificationCode is a normalized tax code shown on the original identity document.
type BillingTaxIdentificationCode = string

// BillingWorkflow BillingWorkflow represents the settings for a billing workflow.
type BillingWorkflow struct {
	// Collection The collection settings for this workflow
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// Invoicing The invoicing settings for this workflow
	Invoicing *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`

	// Payment The payment settings for this workflow
	Payment *BillingWorkflowPaymentSettings `json:"payment,omitempty"`

	// Tax The tax settings for this workflow
	Tax *BillingWorkflowTaxSettings `json:"tax,omitempty"`
}

// BillingWorkflowAppReferenceType App reference type specifies the type of reference inside an app reference
type BillingWorkflowAppReferenceType string

// BillingWorkflowCollectionAlignment BillingWorkflowCollectionAlignmentSubscription specifies the alignment for collecting the pending line items
// into an invoice.
type BillingWorkflowCollectionAlignment = BillingWorkflowCollectionAlignmentSubscription

// BillingWorkflowCollectionAlignmentSubscription BillingWorkflowCollectionAlignmentSubscription specifies the alignment for collecting the pending line items
// into an invoice.
type BillingWorkflowCollectionAlignmentSubscription struct {
	// Type The type of alignment.
	Type BillingWorkflowCollectionAlignmentSubscriptionType `json:"type"`
}

// BillingWorkflowCollectionAlignmentSubscriptionType The type of alignment.
type BillingWorkflowCollectionAlignmentSubscriptionType string

// BillingWorkflowCollectionSettings Workflow collection specifies how to collect the pending line items for an invoice
type BillingWorkflowCollectionSettings struct {
	// Alignment The alignment for collecting the pending line items into an invoice.
	Alignment *BillingWorkflowCollectionAlignment `json:"alignment,omitempty"`

	// Interval This grace period can be used to delay the collection of the pending line items specified in
	// alignment.
	//
	// This is useful, in case of multiple subscriptions having slightly different billing periods.
	Interval *string `json:"interval,omitempty"`
}

// BillingWorkflowCreate Resource create operation model.
type BillingWorkflowCreate struct {
	// Collection The collection settings for this workflow
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// Invoicing The invoicing settings for this workflow
	Invoicing *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`

	// Payment The payment settings for this workflow
	Payment *BillingWorkflowPaymentSettings `json:"payment,omitempty"`

	// Tax The tax settings for this workflow
	Tax *BillingWorkflowTaxSettings `json:"tax,omitempty"`
}

// BillingWorkflowInvoicingSettings BillingWorkflowInvoicingSettings represents the invoice settings for a billing workflow
type BillingWorkflowInvoicingSettings struct {
	// AutoAdvance Whether to automatically issue the invoice after the draftPeriod has passed.
	AutoAdvance *bool `json:"autoAdvance,omitempty"`

	// DefaultTaxConfig Default tax configuration to apply to the invoices.
	DefaultTaxConfig *TaxConfig `json:"defaultTaxConfig,omitempty"`

	// DraftPeriod The period for the invoice to be kept in draft status for manual reviews.
	DraftPeriod *string `json:"draftPeriod,omitempty"`

	// DueAfter The period after which the invoice is due.
	// With some payment solutions it's only applicable for manual collection method.
	DueAfter *string `json:"dueAfter,omitempty"`

	// ProgressiveBilling Should progressive billing be allowed for this workflow?
	ProgressiveBilling *bool `json:"progressiveBilling,omitempty"`
}

// BillingWorkflowLineResolution BillingWorkflowLineResolution specifies how the line items should be resolved in the invoice
type BillingWorkflowLineResolution string

// BillingWorkflowPaymentSettings BillingWorkflowPaymentSettings represents the payment settings for a billing workflow
type BillingWorkflowPaymentSettings struct {
	// CollectionMethod The payment method for the invoice.
	CollectionMethod *CollectionMethod `json:"collectionMethod,omitempty"`
}

// BillingWorkflowTaxSettings BillingWorkflowTaxSettings represents the tax settings for a billing workflow
type BillingWorkflowTaxSettings struct {
	// Enabled Enable automatic tax calculation when tax is supported by the app.
	// For example, with Stripe Invoicing when enabled, tax is calculated via Stripe Tax.
	Enabled *bool `json:"enabled,omitempty"`

	// Enforced Enforce tax calculation when tax is supported by the app.
	// When enabled, OpenMeter will not allow to create an invoice without tax calculation.
	// Enforcement is different per apps, for example, Stripe app requires customer
	// to have a tax location when starting a paid subscription.
	Enforced *bool `json:"enforced,omitempty"`
}

// CheckoutSessionCustomTextAfterSubmitParams Stripe CheckoutSession.custom_text
type CheckoutSessionCustomTextAfterSubmitParams struct {
	// AfterSubmit Custom text that should be displayed after the payment confirmation button.
	AfterSubmit *struct {
		Message *string `json:"message,omitempty"`
	} `json:"afterSubmit,omitempty"`

	// ShippingAddress Custom text that should be displayed alongside shipping address collection.
	ShippingAddress *struct {
		Message *string `json:"message,omitempty"`
	} `json:"shippingAddress,omitempty"`

	// Submit Custom text that should be displayed alongside the payment confirmation button.
	Submit *struct {
		Message *string `json:"message,omitempty"`
	} `json:"submit,omitempty"`

	// TermsOfServiceAcceptance Custom text that should be displayed in place of the default terms of service agreement text.
	TermsOfServiceAcceptance *struct {
		Message *string `json:"message,omitempty"`
	} `json:"termsOfServiceAcceptance,omitempty"`
}

// CheckoutSessionUIMode Stripe CheckoutSession.ui_mode
type CheckoutSessionUIMode string

// ClientAppStartResponse Response from the client app (OpenMeter backend) to start the OAuth2 flow.
type ClientAppStartResponse struct {
	// Url The URL to start the OAuth2 authorization code grant flow.
	Url string `json:"url"`
}

// CollectionMethod CollectionMethod specifies how the invoice should be collected (automatic vs manual)
type CollectionMethod string

// ConflictProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ConflictProblemResponse = UnexpectedProblemResponse

// CountryCode [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code.
// Custom two-letter country codes are also supported for convenience.
type CountryCode = string

// CreateCheckoutSessionTaxIdCollection Create Stripe checkout session tax ID collection.
type CreateCheckoutSessionTaxIdCollection struct {
	// Enabled Enable tax ID collection during checkout. Defaults to false.
	Enabled bool `json:"enabled"`

	// Required Describes whether a tax ID is required during checkout. Defaults to never.
	Required *CreateCheckoutSessionTaxIdCollectionRequired `json:"required,omitempty"`
}

// CreateCheckoutSessionTaxIdCollectionRequired Create Stripe checkout session tax ID collection required.
type CreateCheckoutSessionTaxIdCollectionRequired string

// CreateStripeCheckoutSessionBillingAddressCollection Specify whether Checkout should collect the customer’s billing address.
type CreateStripeCheckoutSessionBillingAddressCollection string

// CreateStripeCheckoutSessionConsentCollection Configure fields for the Checkout Session to gather active consent from customers.
type CreateStripeCheckoutSessionConsentCollection struct {
	// PaymentMethodReuseAgreement Determines the position and visibility of the payment method reuse agreement in the UI.
	// When set to auto, Stripe’s defaults will be used. When set to hidden, the payment method reuse agreement text will always be hidden in the UI.
	PaymentMethodReuseAgreement *CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreement `json:"paymentMethodReuseAgreement,omitempty"`

	// Promotions If set to auto, enables the collection of customer consent for promotional communications.
	// The Checkout Session will determine whether to display an option to opt into promotional
	// communication from the merchant depending on the customer’s locale. Only available to US merchants.
	Promotions *CreateStripeCheckoutSessionConsentCollectionPromotions `json:"promotions,omitempty"`

	// TermsOfService If set to required, it requires customers to check a terms of service checkbox before being able to pay.
	// There must be a valid terms of service URL set in your Stripe Dashboard settings.
	// https://dashboard.stripe.com/settings/public
	TermsOfService *CreateStripeCheckoutSessionConsentCollectionTermsOfService `json:"termsOfService,omitempty"`
}

// CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreement Create Stripe checkout session payment method reuse agreement.
type CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreement struct {
	// Position Create Stripe checkout session consent collection agreement position.
	Position *CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPosition `json:"position,omitempty"`
}

// CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPosition Create Stripe checkout session consent collection agreement position.
type CreateStripeCheckoutSessionConsentCollectionPaymentMethodReuseAgreementPosition string

// CreateStripeCheckoutSessionConsentCollectionPromotions Create Stripe checkout session consent collection promotions.
type CreateStripeCheckoutSessionConsentCollectionPromotions string

// CreateStripeCheckoutSessionConsentCollectionTermsOfService Create Stripe checkout session consent collection terms of service.
type CreateStripeCheckoutSessionConsentCollectionTermsOfService string

// CreateStripeCheckoutSessionCustomerUpdate Controls what fields on Customer can be updated by the Checkout Session.
type CreateStripeCheckoutSessionCustomerUpdate struct {
	// Address Describes whether Checkout saves the billing address onto customer.address.
	// To always collect a full billing address, use billing_address_collection.
	// Defaults to never.
	Address *CreateStripeCheckoutSessionCustomerUpdateBehavior `json:"address,omitempty"`

	// Name Describes whether Checkout saves the name onto customer.name.
	// Defaults to never.
	Name *CreateStripeCheckoutSessionCustomerUpdateBehavior `json:"name,omitempty"`

	// Shipping Describes whether Checkout saves shipping information onto customer.shipping.
	// To collect shipping information, use shipping_address_collection.
	// Defaults to never.
	Shipping *CreateStripeCheckoutSessionCustomerUpdateBehavior `json:"shipping,omitempty"`
}

// CreateStripeCheckoutSessionCustomerUpdateBehavior Create Stripe checkout session customer update behavior.
type CreateStripeCheckoutSessionCustomerUpdateBehavior string

// CreateStripeCheckoutSessionRedirectOnCompletion Create Stripe checkout session redirect on completion.
type CreateStripeCheckoutSessionRedirectOnCompletion string

// CreateStripeCheckoutSessionRequest Create Stripe checkout session request.
type CreateStripeCheckoutSessionRequest struct {
	// AppId If not provided, the default Stripe app is used if any.
	AppId *string `json:"appId,omitempty"`

	// Customer Provide a customer ID or key to use an existing OpenMeter customer.
	// or provide a customer object to create a new customer.
	Customer CreateStripeCheckoutSessionRequest_Customer `json:"customer"`

	// Options Options passed to Stripe when creating the checkout session.
	Options CreateStripeCheckoutSessionRequestOptions `json:"options"`

	// StripeCustomerId Stripe customer ID.
	// If not provided OpenMeter creates a new Stripe customer or
	// uses the OpenMeter customer's default Stripe customer ID.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
}

// CreateStripeCheckoutSessionRequest_Customer Provide a customer ID or key to use an existing OpenMeter customer.
// or provide a customer object to create a new customer.
type CreateStripeCheckoutSessionRequest_Customer struct {
	union json.RawMessage
}

// CreateStripeCheckoutSessionRequestOptions Create Stripe checkout session options
// See https://docs.stripe.com/api/checkout/sessions/create
type CreateStripeCheckoutSessionRequestOptions struct {
	// BillingAddressCollection Specify whether Checkout should collect the customer’s billing address. Defaults to auto.
	BillingAddressCollection *CreateStripeCheckoutSessionBillingAddressCollection `json:"billingAddressCollection,omitempty"`

	// CancelURL If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
	// This parameter is not allowed if ui_mode is embedded.
	CancelURL *string `json:"cancelURL,omitempty"`

	// ClientReferenceID A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
	ClientReferenceID *string `json:"clientReferenceID,omitempty"`

	// ConsentCollection Configure fields for the Checkout Session to gather active consent from customers.
	ConsentCollection *CreateStripeCheckoutSessionConsentCollection `json:"consentCollection,omitempty"`

	// Currency Three-letter ISO currency code, in lowercase.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// CustomText Display additional text for your customers using custom text.
	CustomText *CheckoutSessionCustomTextAfterSubmitParams `json:"customText,omitempty"`

	// CustomerUpdate Controls what fields on Customer can be updated by the Checkout Session.
	CustomerUpdate *CreateStripeCheckoutSessionCustomerUpdate `json:"customerUpdate,omitempty"`

	// ExpiresAt The Epoch time in seconds at which the Checkout Session will expire.
	// It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
	ExpiresAt *int64  `json:"expiresAt,omitempty"`
	Locale    *string `json:"locale,omitempty"`

	// Metadata Set of key-value pairs that you can attach to an object.
	// This can be useful for storing additional information about the object in a structured format.
	// Individual keys can be unset by posting an empty value to them.
	// All keys can be unset by posting an empty value to metadata.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// PaymentMethodTypes A list of the types of payment methods (e.g., card) this Checkout Session can accept.
	PaymentMethodTypes *[]string `json:"paymentMethodTypes,omitempty"`

	// RedirectOnCompletion This parameter applies to ui_mode: embedded. Defaults to always.
	// Learn more about the redirect behavior of embedded sessions at
	// https://docs.stripe.com/payments/checkout/custom-success-page?payment-ui=embedded-form
	RedirectOnCompletion *CreateStripeCheckoutSessionRedirectOnCompletion `json:"redirectOnCompletion,omitempty"`

	// ReturnURL The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method’s app or site.
	// This parameter is required if ui_mode is embedded and redirect-based payment methods are enabled on the session.
	ReturnURL *string `json:"returnURL,omitempty"`

	// SuccessURL The URL to which Stripe should send customers when payment or setup is complete.
	// This parameter is not allowed if ui_mode is embedded.
	// If you’d like to use information from the successful Checkout Session on your page, read the guide on customizing your success page:
	// https://docs.stripe.com/payments/checkout/custom-success-page
	SuccessURL *string `json:"successURL,omitempty"`

	// TaxIdCollection Controls tax ID collection during checkout.
	TaxIdCollection *CreateCheckoutSessionTaxIdCollection `json:"taxIdCollection,omitempty"`

	// UiMode The UI mode of the Session. Defaults to hosted.
	UiMode *CheckoutSessionUIMode `json:"uiMode,omitempty"`
}

// CreateStripeCheckoutSessionResult Create Stripe Checkout Session response.
type CreateStripeCheckoutSessionResult struct {
	// CancelURL Cancel URL.
	CancelURL *string `json:"cancelURL,omitempty"`

	// ClientReferenceId A unique string to reference the Checkout Session.
	// This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
	ClientReferenceId *string `json:"clientReferenceId,omitempty"`

	// ClientSecret The client secret of the checkout session.
	// This can be used to initialize Stripe.js for your client-side implementation.
	ClientSecret *string `json:"clientSecret,omitempty"`

	// CreatedAt Timestamp at which the checkout session was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency Three-letter ISO currency code, in lowercase.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// CustomerEmail Customer's email address provided to Stripe.
	CustomerEmail *string `json:"customerEmail,omitempty"`

	// CustomerId The OpenMeter customer ID.
	CustomerId string `json:"customerId"`

	// ExpiresAt Timestamp at which the checkout session will expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Metadata Set of key-value pairs attached to the checkout session.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Mode Mode
	// Always `setup` for now.
	Mode StripeCheckoutSessionMode `json:"mode"`

	// ReturnURL Return URL.
	ReturnURL *string `json:"returnURL,omitempty"`

	// SessionId The checkout session ID.
	SessionId string `json:"sessionId"`

	// SetupIntentId The checkout session setup intent ID.
	SetupIntentId string `json:"setupIntentId"`

	// Status The status of the checkout session.
	Status *string `json:"status,omitempty"`

	// StripeCustomerId The Stripe customer ID.
	StripeCustomerId string `json:"stripeCustomerId"`

	// SuccessURL Success URL.
	SuccessURL *string `json:"successURL,omitempty"`

	// Url URL to show the checkout session.
	Url *string `json:"url,omitempty"`
}

// CreditNoteOriginalInvoiceRef Omitted fields:
// period: Tax period in which the referred document had an effect required by some tax regimes and formats.
// stamps: Seals of approval from other organisations that may need to be listed.
// ext: 	Extensions for additional codes that may be required.
type CreditNoteOriginalInvoiceRef = InvoiceGenericDocumentRef

// Currency Currency describes a currency supported by OpenMeter.
type Currency struct {
	// Code The currency ISO code.
	Code CurrencyCode `json:"code"`

	// Name The currency name.
	Name string `json:"name"`

	// Subunits Subunit of the currency.
	Subunits uint32 `json:"subunits"`

	// Symbol The currency symbol.
	Symbol string `json:"symbol"`
}

// CurrencyCode Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
// Custom three-letter currency codes are also supported for convenience.
type CurrencyCode = string

// CustomInvoicingApp Custom Invoicing app can be used for interface with any invoicing or payment system.
//
// This app provides ways to manipulate invoices and payments, however the integration
// must rely on Notifications API to get notified about invoice changes.
type CustomInvoicingApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EnableDraftSyncHook Enable draft.sync hook.
	//
	// If the hook is not enabled, the invoice will be progressed to the next state automatically.
	EnableDraftSyncHook bool `json:"enableDraftSyncHook"`

	// EnableIssuingSyncHook Enable issuing.sync hook.
	//
	// If the hook is not enabled, the invoice will be progressed to the next state automatically.
	EnableIssuingSyncHook bool `json:"enableIssuingSyncHook"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// Type The app's type is CustomInvoicing.
	Type CustomInvoicingAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// CustomInvoicingAppType The app's type is CustomInvoicing.
type CustomInvoicingAppType string

// CustomInvoicingAppReplaceUpdate Resource update operation model.
type CustomInvoicingAppReplaceUpdate struct {
	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EnableDraftSyncHook Enable draft.sync hook.
	//
	// If the hook is not enabled, the invoice will be progressed to the next state automatically.
	EnableDraftSyncHook bool `json:"enableDraftSyncHook"`

	// EnableIssuingSyncHook Enable issuing.sync hook.
	//
	// If the hook is not enabled, the invoice will be progressed to the next state automatically.
	EnableIssuingSyncHook bool `json:"enableIssuingSyncHook"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Type The app's type is CustomInvoicing.
	Type CustomInvoicingAppReplaceUpdateType `json:"type"`
}

// CustomInvoicingAppReplaceUpdateType The app's type is CustomInvoicing.
type CustomInvoicingAppReplaceUpdateType string

// CustomInvoicingCustomerAppData Custom Invoicing Customer App Data.
type CustomInvoicingCustomerAppData struct {
	// App The installed custom invoicing app this data belongs to.
	App *CustomInvoicingApp `json:"app,omitempty"`

	// Id The app ID.
	// If not provided, it will use the global default for the app type.
	Id *string `json:"id,omitempty"`

	// Metadata Metadata to be used by the custom invoicing provider.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Type The app name.
	Type CustomInvoicingCustomerAppDataType `json:"type"`
}

// CustomInvoicingCustomerAppDataType The app name.
type CustomInvoicingCustomerAppDataType string

// CustomInvoicingDraftSynchronizedRequest Information to finalize the draft details of an invoice.
type CustomInvoicingDraftSynchronizedRequest struct {
	// Invoicing The result of the synchronization.
	Invoicing *CustomInvoicingSyncResult `json:"invoicing,omitempty"`
}

// CustomInvoicingFinalizedInvoicingRequest Information to finalize the invoicing details of an invoice.
type CustomInvoicingFinalizedInvoicingRequest struct {
	// InvoiceNumber If set the invoice's number will be set to this value.
	InvoiceNumber *InvoiceNumber `json:"invoiceNumber,omitempty"`

	// SentToCustomerAt If set the invoice's sent to customer at will be set to this value.
	SentToCustomerAt *time.Time `json:"sentToCustomerAt,omitempty"`
}

// CustomInvoicingFinalizedPaymentRequest Information to finalize the payment details of an invoice.
type CustomInvoicingFinalizedPaymentRequest struct {
	// ExternalId If set the invoice's payment external ID will be set to this value.
	ExternalId *string `json:"externalId,omitempty"`
}

// CustomInvoicingFinalizedRequest Information to finalize the invoice.
//
// If invoicing.invoiceNumber is not set, then a new invoice number will be generated (INV- prefix).
type CustomInvoicingFinalizedRequest struct {
	// Invoicing The result of the synchronization.
	Invoicing *CustomInvoicingFinalizedInvoicingRequest `json:"invoicing,omitempty"`

	// Payment The result of the payment synchronization.
	Payment *CustomInvoicingFinalizedPaymentRequest `json:"payment,omitempty"`
}

// CustomInvoicingLineDiscountExternalIdMapping Mapping between line discounts and external IDs.
type CustomInvoicingLineDiscountExternalIdMapping struct {
	// ExternalId The external ID (e.g. custom invoicing system's ID).
	ExternalId string `json:"externalId"`

	// LineDiscountId The line discount ID.
	LineDiscountId string `json:"lineDiscountId"`
}

// CustomInvoicingLineExternalIdMapping Mapping between lines and external IDs.
type CustomInvoicingLineExternalIdMapping struct {
	// ExternalId The external ID (e.g. custom invoicing system's ID).
	ExternalId string `json:"externalId"`

	// LineId The line ID.
	LineId string `json:"lineId"`
}

// CustomInvoicingPaymentTrigger Payment trigger to execute on a finalized invoice.
type CustomInvoicingPaymentTrigger string

// CustomInvoicingSyncResult Information to synchronize the invoice.
//
// Can be used to store external app's IDs on the invoice or lines.
type CustomInvoicingSyncResult struct {
	// ExternalId If set the invoice's invoicing external ID will be set to this value.
	ExternalId *string `json:"externalId,omitempty"`

	// InvoiceNumber If set the invoice's number will be set to this value.
	InvoiceNumber *InvoiceNumber `json:"invoiceNumber,omitempty"`

	// LineDiscountExternalIds If set the invoice's line discount external IDs will be set to this value.
	//
	// This can be used to reference the external system's entities in the
	// invoice.
	LineDiscountExternalIds *[]CustomInvoicingLineDiscountExternalIdMapping `json:"lineDiscountExternalIds,omitempty"`

	// LineExternalIds If set the invoice's line external IDs will be set to this value.
	//
	// This can be used to reference the external system's entities in the
	// invoice.
	LineExternalIds *[]CustomInvoicingLineExternalIdMapping `json:"lineExternalIds,omitempty"`
}

// CustomInvoicingTaxConfig Custom invoicing tax config.
type CustomInvoicingTaxConfig struct {
	// Code Tax code.
	//
	// The tax code should be interpreted by the custom invoicing provider.
	Code string `json:"code"`
}

// CustomInvoicingUpdatePaymentStatusRequest Update payment status request.
//
// Can be used to manipulate invoice's payment status (when custominvoicing app is being used).
type CustomInvoicingUpdatePaymentStatusRequest struct {
	// Trigger The trigger to be executed on the invoice.
	Trigger CustomInvoicingPaymentTrigger `json:"trigger"`
}

// CustomPlanInput The template for omitting properties.
type CustomPlanInput struct {
	// Alignment Alignment configuration for the plan.
	Alignment *Alignment `json:"alignment,omitempty"`

	// BillingCadence The default billing cadence for subscriptions using this plan.
	// Defines how often customers are billed using ISO8601 duration format.
	// Examples: "P1M" (monthly), "P3M" (quarterly), "P1Y" (annually).
	BillingCadence string `json:"billingCadence"`

	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`

	// ProRatingConfig Default pro-rating configuration for subscriptions using this plan.
	ProRatingConfig *ProRatingConfig `json:"proRatingConfig,omitempty"`
}

// CustomSubscriptionChange Change a custom subscription.
type CustomSubscriptionChange struct {
	// CustomPlan The custom plan description which defines the Subscription.
	CustomPlan CustomPlanInput `json:"customPlan"`

	// Timing Timing configuration for the change, when the change should take effect.
	// For changing a subscription, the accepted values depend on the subscription configuration.
	Timing SubscriptionTiming `json:"timing"`
}

// CustomSubscriptionCreate Create a custom subscription.
type CustomSubscriptionCreate struct {
	// CustomPlan The custom plan description which defines the Subscription.
	CustomPlan CustomPlanInput `json:"customPlan"`

	// CustomerId The ID of the customer. Provide either the key or ID. Has presedence over the key.
	CustomerId *string `json:"customerId,omitempty"`

	// CustomerKey The key of the customer. Provide either the key or ID.
	CustomerKey *string `json:"customerKey,omitempty"`

	// Timing Timing configuration for the change, when the change should take effect.
	// The default is immediate.
	Timing *SubscriptionTiming `json:"timing,omitempty"`
}

// Customer A customer object.
type Customer struct {
	// BillingAddress The billing address of the customer.
	// Used for tax and invoicing.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency Currency of the customer.
	// Used for billing, tax and invoicing.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// CurrentSubscriptionId The ID of the Subscription if the customer has one.
	CurrentSubscriptionId *string `json:"currentSubscriptionId,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Key An optional unique key of the customer.
	// Useful to reference the customer in external systems.
	// For example, your database ID.
	Key *string `json:"key,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// PrimaryEmail The primary email address of the customer.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`

	// Subscriptions The subscriptions of the customer.
	// Only with the `subscriptions` expand option.
	Subscriptions *[]Subscription `json:"subscriptions,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsageAttribution Mapping to attribute metered usage to the customer
	UsageAttribution CustomerUsageAttribution `json:"usageAttribution"`
}

// CustomerAccess CustomerAccess describes what features the customer has access to.
type CustomerAccess struct {
	// Entitlements Map of entitlements the customer has access to.
	// The key is the feature key, the value is the entitlement value + the entitlement ID.
	Entitlements map[string]EntitlementValue `json:"entitlements"`
}

// CustomerAppData CustomerAppData
// Stores the app specific data for the customer.
// One of: stripe, sandbox, custom_invoicing
type CustomerAppData struct {
	union json.RawMessage
}

// CustomerAppDataCreateOrUpdateItem CustomerAppData
// Stores the app specific data for the customer.
// One of: stripe, sandbox, custom_invoicing
type CustomerAppDataCreateOrUpdateItem struct {
	union json.RawMessage
}

// CustomerAppDataPaginatedResponse Paginated response
type CustomerAppDataPaginatedResponse struct {
	// Items The items in the current page.
	Items []CustomerAppData `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// CustomerCreate Resource create operation model.
type CustomerCreate struct {
	// BillingAddress The billing address of the customer.
	// Used for tax and invoicing.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// Currency Currency of the customer.
	// Used for billing, tax and invoicing.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Key An optional unique key of the customer.
	// Useful to reference the customer in external systems.
	// For example, your database ID.
	Key *string `json:"key,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// PrimaryEmail The primary email address of the customer.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`

	// UsageAttribution Mapping to attribute metered usage to the customer
	UsageAttribution CustomerUsageAttribution `json:"usageAttribution"`
}

// CustomerExpand CustomerExpand specifies the parts of the customer to expand in the list output.
type CustomerExpand string

// CustomerId Create Stripe checkout session with customer ID.
type CustomerId struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id string `json:"id"`
}

// CustomerKey Create Stripe checkout session with customer key.
type CustomerKey struct {
	Key string `json:"key"`
}

// CustomerOrderBy Order by options for customers.
type CustomerOrderBy string

// CustomerPaginatedResponse Paginated response
type CustomerPaginatedResponse struct {
	// Items The items in the current page.
	Items []Customer `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// CustomerReplaceUpdate Resource update operation model.
type CustomerReplaceUpdate struct {
	// BillingAddress The billing address of the customer.
	// Used for tax and invoicing.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// Currency Currency of the customer.
	// Used for billing, tax and invoicing.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Key An optional unique key of the customer.
	// Useful to reference the customer in external systems.
	// For example, your database ID.
	Key *string `json:"key,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// PrimaryEmail The primary email address of the customer.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`

	// UsageAttribution Mapping to attribute metered usage to the customer
	UsageAttribution CustomerUsageAttribution `json:"usageAttribution"`
}

// CustomerUsageAttribution Mapping to attribute metered usage to the customer.
// One customer can have multiple subjects,
// but one subject can only belong to one customer.
type CustomerUsageAttribution struct {
	// SubjectKeys The subjects that are attributed to the customer.
	SubjectKeys []string `json:"subjectKeys"`
}

// DiscountPercentage Percentage discount.
type DiscountPercentage struct {
	// Percentage The percentage of the discount.
	Percentage Percentage `json:"percentage"`
}

// DiscountReasonMaximumSpend The reason for the discount is a maximum spend.
type DiscountReasonMaximumSpend struct {
	Type DiscountReasonMaximumSpendType `json:"type"`
}

// DiscountReasonMaximumSpendType defines model for DiscountReasonMaximumSpend.Type.
type DiscountReasonMaximumSpendType string

// DiscountReasonRatecardPercentage The reason for the discount is a ratecard percentage.
type DiscountReasonRatecardPercentage struct {
	// CorrelationId Correlation ID for the discount.
	//
	// This is used to link discounts across different invoices (progressive billing use case).
	//
	// If not provided, the invoicing engine will auto-generate one. When editing an invoice line,
	// please make sure to keep the same correlation ID of the discount or in progressive billing
	// setups the discount amounts might be incorrect.
	CorrelationId *string `json:"correlationId,omitempty"`

	// Percentage The percentage of the discount.
	Percentage Percentage                           `json:"percentage"`
	Type       DiscountReasonRatecardPercentageType `json:"type"`
}

// DiscountReasonRatecardPercentageType defines model for DiscountReasonRatecardPercentage.Type.
type DiscountReasonRatecardPercentageType string

// DiscountReasonRatecardUsage The reason for the discount is a ratecard usage.
type DiscountReasonRatecardUsage struct {
	// CorrelationId Correlation ID for the discount.
	//
	// This is used to link discounts across different invoices (progressive billing use case).
	//
	// If not provided, the invoicing engine will auto-generate one. When editing an invoice line,
	// please make sure to keep the same correlation ID of the discount or in progressive billing
	// setups the discount amounts might be incorrect.
	CorrelationId *string `json:"correlationId,omitempty"`

	// Quantity The quantity of the usage discount.
	//
	// Must be positive.
	Quantity Numeric                         `json:"quantity"`
	Type     DiscountReasonRatecardUsageType `json:"type"`
}

// DiscountReasonRatecardUsageType defines model for DiscountReasonRatecardUsage.Type.
type DiscountReasonRatecardUsageType string

// DiscountReasonType The type of the discount reason.
type DiscountReasonType string

// DiscountUsage Usage discount.
//
// Usage discount means that the first N items are free. From billing perspective
// this means that any usage on a specific feature is considered 0 until this discount
// is exhausted.
type DiscountUsage struct {
	// Quantity The quantity of the usage discount.
	//
	// Must be positive.
	Quantity Numeric `json:"quantity"`
}

// Discounts Discount by type on a price
type Discounts struct {
	// Percentage The percentage discount.
	Percentage *DiscountPercentage `json:"percentage,omitempty"`

	// Usage The usage discount.
	Usage *DiscountUsage `json:"usage,omitempty"`
}

// DynamicPrice Dynamic price.
//
// The underlying meter's value is considered the base price in the
// customer's currency.
//
// The rate specifies the markup over the price.
type DynamicPrice struct {
	// Multiplier The multiplier to apply to the base price to get the dynamic price.
	//
	// Examples:
	// - 0.0: the price is zero
	// - 0.5: the price is 50% of the base price
	// - 1.0: the price is the same as the base price
	// - 1.5: the price is 150% of the base price
	Multiplier *Numeric `json:"multiplier,omitempty"`

	// Type The type of the price.
	Type DynamicPriceType `json:"type"`
}

// DynamicPriceType The type of the price.
type DynamicPriceType string

// DynamicPriceWithCommitments Dynamic price with spend commitments.
type DynamicPriceWithCommitments struct {
	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// Multiplier The multiplier to apply to the base price to get the dynamic price.
	//
	// Examples:
	// - 0.0: the price is zero
	// - 0.5: the price is 50% of the base price
	// - 1.0: the price is the same as the base price
	// - 1.5: the price is 150% of the base price
	Multiplier *Numeric `json:"multiplier,omitempty"`

	// Type The type of the price.
	Type DynamicPriceWithCommitmentsType `json:"type"`
}

// DynamicPriceWithCommitmentsType The type of the price.
type DynamicPriceWithCommitmentsType string

// EditOp Enum listing the different operation types.
type EditOp string

// EditSubscriptionAddItem Add a new item to a phase.
type EditSubscriptionAddItem struct {
	Op       EditSubscriptionAddItemOp `json:"op"`
	PhaseKey string                    `json:"phaseKey"`

	// RateCard A rate card defines the pricing and entitlement of a feature or service.
	RateCard RateCard `json:"rateCard"`
}

// EditSubscriptionAddItemOp defines model for EditSubscriptionAddItem.Op.
type EditSubscriptionAddItemOp string

// EditSubscriptionAddPhase Add a new phase
type EditSubscriptionAddPhase struct {
	Op EditSubscriptionAddPhaseOp `json:"op"`

	// Phase Subscription phase create input.
	Phase SubscriptionPhaseCreate `json:"phase"`
}

// EditSubscriptionAddPhaseOp defines model for EditSubscriptionAddPhase.Op.
type EditSubscriptionAddPhaseOp string

// EditSubscriptionRemoveItem Remove an item from a phase.
type EditSubscriptionRemoveItem struct {
	ItemKey  string                       `json:"itemKey"`
	Op       EditSubscriptionRemoveItemOp `json:"op"`
	PhaseKey string                       `json:"phaseKey"`
}

// EditSubscriptionRemoveItemOp defines model for EditSubscriptionRemoveItem.Op.
type EditSubscriptionRemoveItemOp string

// EditSubscriptionRemovePhase Remove a phase
type EditSubscriptionRemovePhase struct {
	Op       EditSubscriptionRemovePhaseOp `json:"op"`
	PhaseKey string                        `json:"phaseKey"`

	// Shift The direction of the phase shift when a phase is removed.
	Shift RemovePhaseShifting `json:"shift"`
}

// EditSubscriptionRemovePhaseOp defines model for EditSubscriptionRemovePhase.Op.
type EditSubscriptionRemovePhaseOp string

// EditSubscriptionStretchPhase Stretch a phase
type EditSubscriptionStretchPhase struct {
	ExtendBy string                         `json:"extendBy"`
	Op       EditSubscriptionStretchPhaseOp `json:"op"`
	PhaseKey string                         `json:"phaseKey"`
}

// EditSubscriptionStretchPhaseOp defines model for EditSubscriptionStretchPhase.Op.
type EditSubscriptionStretchPhaseOp string

// EditSubscriptionUnscheduleEdit Unschedules any edits from the current phase.
type EditSubscriptionUnscheduleEdit struct {
	Op EditSubscriptionUnscheduleEditOp `json:"op"`
}

// EditSubscriptionUnscheduleEditOp defines model for EditSubscriptionUnscheduleEdit.Op.
type EditSubscriptionUnscheduleEditOp string

// Entitlement Entitlement templates are used to define the entitlements of a plan.
// Features are omitted from the entitlement template, as they are defined in the rate card.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementBaseTemplate Shared fields of the entitlement templates.
type EntitlementBaseTemplate struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Annotations The annotations of the entitlement.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string `json:"subjectKey"`

	// Type The type of the entitlement.
	Type EntitlementType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsagePeriod The defined usage period of the entitlement
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBoolean Shared fields of the entitlement templates.
type EntitlementBoolean = EntitlementBaseTemplate

// EntitlementBooleanCreateInputs Create inputs for boolean entitlement
type EntitlementBooleanCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                          `json:"metadata,omitempty"`
	Type     EntitlementBooleanCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanCreateInputsType defines model for EntitlementBooleanCreateInputs.Type.
type EntitlementBooleanCreateInputsType string

// EntitlementCreateInputs Create inputs for entitlement
type EntitlementCreateInputs struct {
	union json.RawMessage
}

// EntitlementCreateSharedFields Shared fields for entitlement creation
type EntitlementCreateSharedFields struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementGrant The grant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId string `json:"entitlementId"`

	// Expiration The grant expiration definition
	Expiration ExpirationPeriod `json:"expiration"`

	// ExpiresAt The time the grant expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

	// Metadata The grant metadata.
	Metadata *Metadata `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *uint8 `json:"priority,omitempty"`

	// Recurrence The recurrence period of the grant.
	Recurrence *RecurringPeriod `json:"recurrence,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// VoidedAt The time the grant was voided.
	VoidedAt *time.Time `json:"voidedAt,omitempty"`
}

// EntitlementGrantCreateInput The grant creation input.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// Expiration The grant expiration definition
	Expiration ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

	// Metadata The grant metadata.
	Metadata *Metadata `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *uint8 `json:"priority,omitempty"`

	// Recurrence The subject of the grant.
	Recurrence *RecurringPeriodCreateInput `json:"recurrence,omitempty"`
}

// EntitlementMetered Metered entitlements are useful for many different use cases, from setting up usage based access to implementing complex credit systems.
// Access is determined based on feature usage using a balance calculation (the "usage allowance" provided by the issued grants is "burnt down" by the usage).
type EntitlementMetered struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Annotations The annotations of the entitlement.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	// Deprecated:
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// LastReset The time the last reset happened.
	LastReset time.Time `json:"lastReset"`

	// MeasureUsageFrom The time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom time.Time `json:"measureUsageFrom"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool `json:"preserveOverageAtReset,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementMeteredType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsagePeriod THe usage period of the entitlement.
	UsagePeriod RecurringPeriod `json:"usagePeriod"`
}

// EntitlementMeteredType defines model for EntitlementMetered.Type.
type EntitlementMeteredType string

// EntitlementMeteredCalculatedFields Calculated fields for metered entitlements.
type EntitlementMeteredCalculatedFields struct {
	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// LastReset The time the last reset happened.
	LastReset time.Time `json:"lastReset"`

	// MeasureUsageFrom The time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom time.Time `json:"measureUsageFrom"`

	// UsagePeriod THe usage period of the entitlement.
	UsagePeriod RecurringPeriod `json:"usagePeriod"`
}

// EntitlementMeteredCreateInputs Create inpurs for metered entitlement
type EntitlementMeteredCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	// Deprecated:
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// MeasureUsageFrom Defines the time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom *MeasureUsageFrom `json:"measureUsageFrom,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool                              `json:"preserveOverageAtReset,omitempty"`
	Type                   EntitlementMeteredCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod RecurringPeriodCreateInput `json:"usagePeriod"`
}

// EntitlementMeteredCreateInputsType defines model for EntitlementMeteredCreateInputs.Type.
type EntitlementMeteredCreateInputsType string

// EntitlementOrderBy Order by options for entitlements.
type EntitlementOrderBy string

// EntitlementPaginatedResponse Paginated response
type EntitlementPaginatedResponse struct {
	// Items The items in the current page.
	Items []Entitlement `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// EntitlementStatic A static entitlement.
type EntitlementStatic struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Annotations The annotations of the entitlement.
	Annotations *Annotations `json:"annotations,omitempty"`

	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                `json:"subjectKey"`
	Type       EntitlementStaticType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsagePeriod The defined usage period of the entitlement
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStaticType defines model for EntitlementStatic.Type.
type EntitlementStaticType string

// EntitlementStaticCreateInputs Create inputs for static entitlement
type EntitlementStaticCreateInputs struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                         `json:"metadata,omitempty"`
	Type     EntitlementStaticCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementStaticCreateInputsType defines model for EntitlementStaticCreateInputs.Type.
type EntitlementStaticCreateInputsType string

// EntitlementType Type of the entitlement.
type EntitlementType = string

// EntitlementValue Entitlements are the core of OpenMeter access management. They define access to features for subjects. Entitlements can be metered, boolean, or static.
type EntitlementValue struct {
	// Balance Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.
	Balance *float64 `json:"balance,omitempty"`

	// Config Only available for static entitlements. The JSON parsable config of the entitlement.
	Config *string `json:"config,omitempty"`

	// HasAccess Whether the subject has access to the feature. Shared accross all entitlement types.
	HasAccess bool `json:"hasAccess"`

	// Overage Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.
	Overage *float64 `json:"overage,omitempty"`

	// Usage Only available for metered entitlements. Returns the total feature usage in the current period.
	Usage *float64 `json:"usage,omitempty"`
}

// Event CloudEvents Specification JSON Schema
//
// Optional properties are nullable according to the CloudEvents specification:
// OPTIONAL not omitted attributes MAY be represented as a null JSON value.
type Event = event.Event

// ExpirationDuration The expiration duration enum
type ExpirationDuration string

// ExpirationPeriod The grant expiration definition
type ExpirationPeriod struct {
	// Count The number of time units in the expiration period.
	Count int `json:"count"`

	// Duration The unit of time for the expiration period.
	Duration ExpirationDuration `json:"duration"`
}

// Feature Represents a feature that can be enabled or disabled for a plan.
// Used both for product catalog and entitlements.
type Feature struct {
	// ArchivedAt Timestamp of when the resource was archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// Key A key is a unique string that is used to identify a resource.
	Key      string    `json:"key"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters.
	// Useful if the meter scope is broader than what feature tracks.
	// Example scenario would be a meter tracking all token use with groupBy fields for the model,
	// then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug A key is a unique string that is used to identify a resource.
	MeterSlug *string `json:"meterSlug,omitempty"`
	Name      string  `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// FeatureCreateInputs Represents a feature that can be enabled or disabled for a plan.
// Used both for product catalog and entitlements.
type FeatureCreateInputs struct {
	// Key A key is a unique string that is used to identify a resource.
	Key      string    `json:"key"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters.
	// Useful if the meter scope is broader than what feature tracks.
	// Example scenario would be a meter tracking all token use with groupBy fields for the model,
	// then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug A key is a unique string that is used to identify a resource.
	MeterSlug *string `json:"meterSlug,omitempty"`
	Name      string  `json:"name"`
}

// FeatureMeta Limited representation of a feature resource which includes only its unique identifiers (id, key).
type FeatureMeta struct {
	// Id Unique identifier of a feature.
	Id string `json:"id"`

	// Key The key is an immutable unique identifier of the feature used throughout the API,
	// for example when interacting with a subject's entitlements.
	Key string `json:"key"`
}

// FeatureOrderBy Order by options for features.
type FeatureOrderBy string

// FeaturePaginatedResponse Paginated response
type FeaturePaginatedResponse struct {
	// Items The items in the current page.
	Items []Feature `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// FilterBoolean A filter for a boolean field.
type FilterBoolean struct {
	// Eq The field must be equal to the provided value.
	Eq *bool `json:"$eq"`
}

// FilterFloat A filter for a float field.
type FilterFloat struct {
	// And Provide a list of filters to be combined with a logical AND.
	And *[]FilterFloat `json:"$and"`

	// Eq The field must be equal to the provided value.
	Eq *float64 `json:"$eq"`

	// Gt The field must be greater than the provided value.
	Gt *float64 `json:"$gt"`

	// Gte The field must be greater than or equal to the provided value.
	Gte *float64 `json:"$gte"`

	// Lt The field must be less than the provided value.
	Lt *float64 `json:"$lt"`

	// Lte The field must be less than or equal to the provided value.
	Lte *float64 `json:"$lte"`

	// Ne The field must not be equal to the provided value.
	Ne *float64 `json:"$ne"`

	// Or Provide a list of filters to be combined with a logical OR.
	Or *[]FilterFloat `json:"$or"`
}

// FilterInteger A filter for an integer field.
type FilterInteger struct {
	// And Provide a list of filters to be combined with a logical AND.
	And *[]FilterInteger `json:"$and"`

	// Eq The field must be equal to the provided value.
	Eq *int `json:"$eq"`

	// Gt The field must be greater than the provided value.
	Gt *int `json:"$gt"`

	// Gte The field must be greater than or equal to the provided value.
	Gte *int `json:"$gte"`

	// Lt The field must be less than the provided value.
	Lt *int `json:"$lt"`

	// Lte The field must be less than or equal to the provided value.
	Lte *int `json:"$lte"`

	// Ne The field must not be equal to the provided value.
	Ne *int `json:"$ne"`

	// Or Provide a list of filters to be combined with a logical OR.
	Or *[]FilterInteger `json:"$or"`
}

// FilterString A filter for a string field.
type FilterString struct {
	// And Provide a list of filters to be combined with a logical AND.
	And *[]FilterString `json:"$and"`

	// Eq The field must be equal to the provided value.
	Eq *string `json:"$eq"`

	// Gt The field must be greater than the provided value.
	Gt *string `json:"$gt"`

	// Gte The field must be greater than or equal to the provided value.
	Gte *string `json:"$gte"`

	// Ilike The field must match the provided value, ignoring case.
	Ilike *string `json:"$ilike"`

	// In The field must be in the provided list of values.
	In *[]string `json:"$in"`

	// Like The field must match the provided value.
	Like *string `json:"$like"`

	// Lt The field must be less than the provided value.
	Lt *string `json:"$lt"`

	// Lte The field must be less than or equal to the provided value.
	Lte *string `json:"$lte"`

	// Ne The field must not be equal to the provided value.
	Ne *string `json:"$ne"`

	// Nilike The field must not match the provided value, ignoring case.
	Nilike *string `json:"$nilike"`

	// Nin The field must not be in the provided list of values.
	Nin *[]string `json:"$nin"`

	// Nlike The field must not match the provided value.
	Nlike *string `json:"$nlike"`

	// Or Provide a list of filters to be combined with a logical OR.
	Or *[]FilterString `json:"$or"`
}

// FilterTime A filter for a time field.
type FilterTime struct {
	// And Provide a list of filters to be combined with a logical AND.
	And *[]FilterTime `json:"$and"`

	// Gt The field must be greater than the provided value.
	Gt *time.Time `json:"$gt"`

	// Gte The field must be greater than or equal to the provided value.
	Gte *time.Time `json:"$gte"`

	// Lt The field must be less than the provided value.
	Lt *time.Time `json:"$lt"`

	// Lte The field must be less than or equal to the provided value.
	Lte *time.Time `json:"$lte"`

	// Or Provide a list of filters to be combined with a logical OR.
	Or *[]FilterTime `json:"$or"`
}

// FlatPrice Flat price.
type FlatPrice struct {
	// Amount The amount of the flat price.
	Amount Numeric `json:"amount"`

	// Type The type of the price.
	Type FlatPriceType `json:"type"`
}

// FlatPriceType The type of the price.
type FlatPriceType string

// FlatPriceWithPaymentTerm Flat price with payment term.
type FlatPriceWithPaymentTerm struct {
	// Amount The amount of the flat price.
	Amount Numeric `json:"amount"`

	// PaymentTerm The payment term of the flat price.
	// Defaults to in advance.
	PaymentTerm *PricePaymentTerm `json:"paymentTerm,omitempty"`

	// Type The type of the price.
	Type FlatPriceWithPaymentTermType `json:"type"`
}

// FlatPriceWithPaymentTermType The type of the price.
type FlatPriceWithPaymentTermType string

// ForbiddenProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ForbiddenProblemResponse = UnexpectedProblemResponse

// GatewayTimeoutProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type GatewayTimeoutProblemResponse = UnexpectedProblemResponse

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant between events that changed either the grant burn down priority order or the usag period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd float64 `json:"balanceAtEnd"`

	// BalanceAtStart entitlement balance at the start of the period.
	BalanceAtStart float64 `json:"balanceAtStart"`

	// GrantBalancesAtEnd The balance breakdown of each active grant at the end of the period: GrantID: Balance
	GrantBalancesAtEnd map[string]float64 `json:"grantBalancesAtEnd"`

	// GrantBalancesAtStart The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtStart map[string]float64 `json:"grantBalancesAtStart"`

	// GrantUsages Which grants were actually burnt down in the period and by what amount.
	GrantUsages []GrantUsageRecord `json:"grantUsages"`

	// Overage Overuse that wasn't covered by grants.
	Overage float64 `json:"overage"`

	// Period The period of the segment.
	Period Period `json:"period"`

	// Usage The total usage of the grant in the period.
	Usage float64 `json:"usage"`
}

// GrantOrderBy Order by options for grants.
type GrantOrderBy string

// GrantPaginatedResponse Paginated response
type GrantPaginatedResponse struct {
	// Items The items in the current page.
	Items []EntitlementGrant `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// GrantUsageRecord Usage Record
type GrantUsageRecord struct {
	// GrantId The id of the grant
	GrantId string `json:"grantId"`

	// Usage The usage in the period
	Usage float64 `json:"usage"`
}

// IDResource IDResource is a resouce with an ID.
type IDResource struct {
	// Id A unique identifier for the resource.
	Id string `json:"id"`
}

// IngestEventsBody The body of the events request.
// Either a single event or a batch of events.
type IngestEventsBody struct {
	union json.RawMessage
}

// IngestEventsBody1 defines model for .
type IngestEventsBody1 = []Event

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event The original event ingested.
	Event Event `json:"event"`

	// IngestedAt The date and time the event was ingested.
	IngestedAt time.Time `json:"ingestedAt"`

	// StoredAt The date and time the event was stored.
	StoredAt time.Time `json:"storedAt"`

	// ValidationError The validation error if the event failed validation.
	ValidationError *string `json:"validationError,omitempty"`
}

// IngestedEventCursorPaginatedResponse A response for cursor pagination.
type IngestedEventCursorPaginatedResponse struct {
	// Items The items in the response.
	Items []IngestedEvent `json:"items"`

	// NextCursor The cursor of the last item in the list.
	NextCursor *string `json:"nextCursor,omitempty"`
}

// InstallMethod Install method of the application.
type InstallMethod string

// InternalServerErrorProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type InternalServerErrorProblemResponse = UnexpectedProblemResponse

// Invoice Invoice represents an invoice in the system.
type Invoice struct {
	// CollectionAt The time when the invoice will be/has been collected.
	CollectionAt *time.Time `json:"collectionAt,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency Currency for all invoice line items.
	//
	// Multi currency invoices are not supported yet.
	Currency CurrencyCode `json:"currency"`

	// Customer Legal entity receiving the goods or services.
	Customer BillingParty `json:"customer"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// DraftUntil The time until the invoice is in draft status.
	//
	// On draft invoice creation it is calculated from the workflow settings.
	//
	// If manual approval is required, the draftUntil time is set.
	DraftUntil *time.Time `json:"draftUntil,omitempty"`

	// DueAt Due time of the fulfillment of the invoice (if available).
	DueAt *time.Time `json:"dueAt,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceAppExternalIds `json:"externalIds,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// IssuedAt The time the invoice was issued.
	//
	// Depending on the status of the invoice this can mean multiple things:
	// - draft, gathering: The time the invoice will be issued based on the workflow settings.
	// - issued: The time the invoice was issued.
	IssuedAt *time.Time `json:"issuedAt,omitempty"`

	// Lines List of invoice lines representing each of the items sold to the customer.
	Lines *[]InvoiceLine `json:"lines,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Number Number specifies the human readable key used to reference this Invoice.
	//
	// The invoice number can change in the draft phases, as we are allocating temporary draft
	// invoice numbers, but it's final as soon as the invoice gets finalized (issued state).
	//
	// Please note that the number is (depending on the upstream settings) either unique for the
	// whole organization or unique for the customer, or in multi (stripe) account setups unique for the
	// account.
	Number InvoiceNumber `json:"number"`

	// Payment Information on when, how, and to whom the invoice should be paid.
	Payment *InvoicePaymentTerms `json:"payment,omitempty"`

	// Period The period the invoice covers. If the invoice has no line items, it's not set.
	Period *Period `json:"period,omitempty"`

	// Preceding Key information regarding previous invoices and potentially details as to why they were corrected.
	Preceding *[]InvoiceDocumentRef `json:"preceding,omitempty"`

	// QuantitySnapshotedAt The time when the quantity snapshots on the invoice lines were taken.
	QuantitySnapshotedAt *time.Time `json:"quantitySnapshotedAt,omitempty"`

	// SentToCustomerAt The time the invoice was sent to customer.
	SentToCustomerAt *time.Time `json:"sentToCustomerAt,omitempty"`

	// Status The status of the invoice.
	//
	// This field only conatins a simplified status, for more detailed information use the statusDetails field.
	Status InvoiceStatus `json:"status"`

	// StatusDetails The details of the current invoice status.
	StatusDetails InvoiceStatusDetails `json:"statusDetails"`

	// Supplier The taxable entity supplying the goods or services.
	Supplier BillingParty `json:"supplier"`

	// Totals Summary of all the invoice totals, including taxes (calculated).
	Totals InvoiceTotals `json:"totals"`

	// Type Type of the invoice.
	//
	// The type of invoice determines the purpose of the invoice and how it should be handled.
	//
	// Supported types:
	// - standard: A regular commercial invoice document between a supplier and customer.
	// - credit_note: Reflects a refund either partial or complete of the preceding document. A credit note effectively *extends* the previous document.
	Type InvoiceType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// ValidationIssues Validation issues reported by the invoice workflow.
	ValidationIssues *[]ValidationIssue `json:"validationIssues,omitempty"`

	// VoidedAt The time the invoice was voided.
	//
	// If the invoice was voided, this field will be set to the time the invoice was voided.
	VoidedAt *time.Time `json:"voidedAt,omitempty"`

	// Workflow The workflow associated with the invoice.
	//
	// It is always a snapshot of the workflow settings at the time of invoice creation. The
	// field is optional as it should be explicitly requested with expand options.
	Workflow InvoiceWorkflowSettings `json:"workflow"`
}

// InvoiceAppExternalIds InvoiceAppExternalIds contains the external IDs of the invoice in other apps such as Stripe.
type InvoiceAppExternalIds struct {
	// Invoicing The external ID of the invoice in the invoicing app if available.
	Invoicing *string `json:"invoicing,omitempty"`

	// Payment The external ID of the invoice in the payment app if available.
	Payment *string `json:"payment,omitempty"`

	// Tax The external ID of the invoice in the tax app if available.
	Tax *string `json:"tax,omitempty"`
}

// InvoiceAvailableActionDetails InvoiceAvailableActionInvoiceDetails represents the details of the invoice action for
// non-gathering invoices.
type InvoiceAvailableActionDetails struct {
	// ResultingState The state the invoice will reach if the action is activated and
	// all intermediate steps are successful.
	//
	// For example advancing a draft_created invoice will result in a draft_manual_approval_needed invoice.
	ResultingState string `json:"resultingState"`
}

// InvoiceAvailableActionInvoiceDetails InvoiceAvailableActionInvoiceDetails represents the details of the invoice action for
// gathering invoices.
type InvoiceAvailableActionInvoiceDetails = map[string]interface{}

// InvoiceAvailableActions InvoiceAvailableActions represents the actions that can be performed on the invoice.
type InvoiceAvailableActions struct {
	// Advance Advance the invoice to the next status.
	Advance *InvoiceAvailableActionDetails `json:"advance,omitempty"`

	// Approve Approve an invoice that requires manual approval.
	Approve *InvoiceAvailableActionDetails `json:"approve,omitempty"`

	// Delete Delete the invoice (only non-issued invoices can be deleted).
	Delete *InvoiceAvailableActionDetails `json:"delete,omitempty"`

	// Invoice Invoice a gathering invoice
	Invoice *InvoiceAvailableActionInvoiceDetails `json:"invoice,omitempty"`

	// Retry Retry an invoice issuing step that failed.
	Retry *InvoiceAvailableActionDetails `json:"retry,omitempty"`

	// SnapshotQuantities Snapshot quantities for usage based line items.
	SnapshotQuantities *InvoiceAvailableActionDetails `json:"snapshotQuantities,omitempty"`

	// Void Void an already issued invoice.
	Void *InvoiceAvailableActionDetails `json:"void,omitempty"`
}

// InvoiceDetailedLine InvoiceDetailedLine represents a line item that is sold to the customer as a manually added fee.
type InvoiceDetailedLine struct {
	// Category Category of the flat fee.
	Category *InvoiceDetailedLineCostCategory `json:"category,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency of this line.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts Discounts detailes applied to this line.
	//
	// New discounts can be added via the invoice's discounts API, to facilitate
	// discounts that are affecting multiple lines.
	Discounts *InvoiceLineDiscounts `json:"discounts,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceLineAppExternalIds `json:"externalIds,omitempty"`

	// Id ID of the line.
	Id string `json:"id"`

	// Invoice The invoice this item belongs to.
	Invoice *InvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt The time this line item should be invoiced.
	InvoiceAt time.Time `json:"invoiceAt"`

	// ManagedBy managedBy specifies if the line is manually added via the api or managed by OpenMeter.
	ManagedBy InvoiceLineManagedBy `json:"managedBy"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// PaymentTerm Payment term of the line.
	// Deprecated:
	PaymentTerm *PricePaymentTerm `json:"paymentTerm,omitempty"`

	// PerUnitAmount Price of the item being sold.
	// Deprecated:
	PerUnitAmount *Numeric `json:"perUnitAmount,omitempty"`

	// Period Period of the line item applies to for revenue recognition pruposes.
	//
	// Billing always treats periods as start being inclusive and end being exclusive.
	Period Period `json:"period"`

	// Quantity Quantity of the item being sold.
	// Deprecated:
	Quantity *Numeric `json:"quantity,omitempty"`

	// RateCard The rate card that is used for this line.
	RateCard *InvoiceDetailedLineRateCard `json:"rateCard,omitempty"`

	// Status Status of the line.
	//
	// External calls always create valid lines, other line types are managed by the
	// billing engine of OpenMeter.
	Status InvoiceLineStatus `json:"status"`

	// Subscription Subscription are the references to the subscritpions that this line is related to.
	Subscription *InvoiceLineSubscriptionReference `json:"subscription,omitempty"`

	// TaxConfig Tax config specify the tax configuration for this line.
	// Deprecated:
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Taxes Taxes applied to the invoice totals.
	Taxes *[]InvoiceLineTaxItem `json:"taxes,omitempty"`

	// Totals Totals for this line.
	Totals InvoiceTotals `json:"totals"`

	// Type Type of the line.
	// Deprecated:
	Type InvoiceDetailedLineType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvoiceDetailedLineType Type of the line.
type InvoiceDetailedLineType string

// InvoiceDetailedLineCostCategory InvoiceDetailedLineCostCategory determines if the flat fee is a regular fee due to use due to a
// commitment.
type InvoiceDetailedLineCostCategory string

// InvoiceDetailedLineRateCard InvoiceDetailedLineRateCard represents the rate card (intent) for a flat fee line.
type InvoiceDetailedLineRateCard struct {
	// Discounts The discounts that are applied to the line.
	Discounts *BillingDiscounts `json:"discounts,omitempty"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *FlatPriceWithPaymentTerm `json:"price"`

	// Quantity Quantity of the item being sold.
	//
	// Default: 1
	Quantity *Numeric `json:"quantity,omitempty"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`
}

// InvoiceDiscountBase InvoiceDiscountBase represents a charge or discount that can be applied to a line or the entire invoice.
type InvoiceDiscountBase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Text description as to why the discount was applied.
	Description *string `json:"description,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceLineAppExternalIds `json:"externalIds,omitempty"`

	// Id ID of the charge or discount.
	Id string `json:"id"`

	// Reason Reason code.
	Reason BillingDiscountReason `json:"reason"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvoiceDocumentRef CreditNoteOriginalInvoiceRef is used to reference the original invoice that a credit note is based on.
type InvoiceDocumentRef = CreditNoteOriginalInvoiceRef

// InvoiceDocumentRefType InvoiceDocumentRefType defines the type of document that is being referenced.
type InvoiceDocumentRefType string

// InvoiceExpand InvoiceExpand specifies the parts of the invoice to expand in the list output.
type InvoiceExpand string

// InvoiceGenericDocumentRef Omitted fields:
// period: Tax period in which the referred document had an effect required by some tax regimes and formats.
// stamps: Seals of approval from other organisations that may need to be listed.
// ext: 	Extensions for additional codes that may be required.
type InvoiceGenericDocumentRef struct {
	// Description Additional details about the document.
	Description *string `json:"description,omitempty"`

	// Reason Human readable description on why this reference is here or needs to be used.
	Reason *string `json:"reason,omitempty"`

	// Type Type of the document referenced.
	Type InvoiceDocumentRefType `json:"type"`
}

// InvoiceLine InvoiceUsageBasedLine represents a line item that is sold to the customer based on usage.
type InvoiceLine struct {
	// Children The lines detailing the item or service sold.
	Children *[]InvoiceDetailedLine `json:"children,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency of this line.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts Discounts detailes applied to this line.
	//
	// New discounts can be added via the invoice's discounts API, to facilitate
	// discounts that are affecting multiple lines.
	Discounts *InvoiceLineDiscounts `json:"discounts,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceLineAppExternalIds `json:"externalIds,omitempty"`

	// FeatureKey The feature that the usage is based on.
	// Deprecated:
	FeatureKey *string `json:"featureKey,omitempty"`

	// Id ID of the line.
	Id string `json:"id"`

	// Invoice The invoice this item belongs to.
	Invoice *InvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt The time this line item should be invoiced.
	InvoiceAt time.Time `json:"invoiceAt"`

	// ManagedBy managedBy specifies if the line is manually added via the api or managed by OpenMeter.
	ManagedBy InvoiceLineManagedBy `json:"managedBy"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// MeteredPreLinePeriodQuantity The metered quantity of the item used in before this line's period without any discounts applied.
	//
	// It is non-zero in case of progressive billing, when this shows how much of the usage was already billed.
	MeteredPreLinePeriodQuantity *Numeric `json:"meteredPreLinePeriodQuantity,omitempty"`

	// MeteredQuantity The quantity of the item that has been metered for the period before any discounts were applied.
	MeteredQuantity *Numeric `json:"meteredQuantity,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Period Period of the line item applies to for revenue recognition pruposes.
	//
	// Billing always treats periods as start being inclusive and end being exclusive.
	Period Period `json:"period"`

	// PreLinePeriodQuantity The quantity of the item used before this line's period.
	//
	// It is non-zero in case of progressive billing, when this shows how much of the usage was already billed.
	//
	// Any usage discounts applied previously are deducted from this quantity.
	PreLinePeriodQuantity *Numeric `json:"preLinePeriodQuantity,omitempty"`

	// Price Price of the usage-based item being sold.
	// Deprecated:
	Price *RateCardUsageBasedPrice `json:"price,omitempty"`

	// Quantity The quantity of the item being sold.
	//
	// Any usage discounts applied previously are deducted from this quantity.
	Quantity *Numeric `json:"quantity,omitempty"`

	// RateCard The rate card that is used for this line.
	//
	// The rate card captures the intent of the price and discounts for the usage-based item.
	RateCard *InvoiceUsageBasedRateCard `json:"rateCard,omitempty"`

	// Status Status of the line.
	//
	// External calls always create valid lines, other line types are managed by the
	// billing engine of OpenMeter.
	Status InvoiceLineStatus `json:"status"`

	// Subscription Subscription are the references to the subscritpions that this line is related to.
	Subscription *InvoiceLineSubscriptionReference `json:"subscription,omitempty"`

	// TaxConfig Tax config specify the tax configuration for this line.
	// Deprecated:
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Taxes Taxes applied to the invoice totals.
	Taxes *[]InvoiceLineTaxItem `json:"taxes,omitempty"`

	// Totals Totals for this line.
	Totals InvoiceTotals `json:"totals"`

	// Type Type of the line.
	// Deprecated:
	Type InvoiceLineType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvoiceLineType Type of the line.
type InvoiceLineType string

// InvoiceLineAmountDiscount InvoiceLineAmountDiscount represents an amount deducted from the line, and will be applied before taxes.
type InvoiceLineAmountDiscount struct {
	// Amount Fixed discount amount to apply (calculated if percent present).
	Amount Numeric `json:"amount"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Text description as to why the discount was applied.
	Description *string `json:"description,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceLineAppExternalIds `json:"externalIds,omitempty"`

	// Id ID of the charge or discount.
	Id string `json:"id"`

	// Reason Reason code.
	Reason BillingDiscountReason `json:"reason"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvoiceLineAppExternalIds InvoiceLineAppExternalIds contains the external IDs of the invoice in other apps such as Stripe.
type InvoiceLineAppExternalIds struct {
	// Invoicing The external ID of the invoice in the invoicing app if available.
	Invoicing *string `json:"invoicing,omitempty"`

	// Tax The external ID of the invoice in the tax app if available.
	Tax *string `json:"tax,omitempty"`
}

// InvoiceLineBase InvoiceLine represents a single item or service sold to the customer.
//
// This is a base class for all line types, and should not be used directly.
type InvoiceLineBase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency of this line.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts Discounts detailes applied to this line.
	//
	// New discounts can be added via the invoice's discounts API, to facilitate
	// discounts that are affecting multiple lines.
	Discounts *InvoiceLineDiscounts `json:"discounts,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceLineAppExternalIds `json:"externalIds,omitempty"`

	// Id ID of the line.
	Id string `json:"id"`

	// Invoice The invoice this item belongs to.
	Invoice *InvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt The time this line item should be invoiced.
	InvoiceAt time.Time `json:"invoiceAt"`

	// ManagedBy managedBy specifies if the line is manually added via the api or managed by OpenMeter.
	ManagedBy InvoiceLineManagedBy `json:"managedBy"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Period Period of the line item applies to for revenue recognition pruposes.
	//
	// Billing always treats periods as start being inclusive and end being exclusive.
	Period Period `json:"period"`

	// Status Status of the line.
	//
	// External calls always create valid lines, other line types are managed by the
	// billing engine of OpenMeter.
	Status InvoiceLineStatus `json:"status"`

	// Subscription Subscription are the references to the subscritpions that this line is related to.
	Subscription *InvoiceLineSubscriptionReference `json:"subscription,omitempty"`

	// TaxConfig Tax config specify the tax configuration for this line.
	// Deprecated:
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Taxes Taxes applied to the invoice totals.
	Taxes *[]InvoiceLineTaxItem `json:"taxes,omitempty"`

	// Totals Totals for this line.
	Totals InvoiceTotals `json:"totals"`

	// Type Type of the line.
	//
	// A line's type cannot be changed after creation.
	// Deprecated:
	Type InvoiceLineTypes `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvoiceLineDiscounts InvoiceLineDiscounts represents the discounts applied to the invoice line by type.
type InvoiceLineDiscounts struct {
	// Amount Amount based discounts applied to the line.
	//
	// Amount based discounts are deduced from the total price of the line.
	Amount *[]InvoiceLineAmountDiscount `json:"amount,omitempty"`

	// Usage Usage based discounts applied to the line.
	//
	// Usage based discounts are deduced from the usage of the line before price calculations are applied.
	Usage *[]InvoiceLineUsageDiscount `json:"usage,omitempty"`
}

// InvoiceLineManagedBy InvoiceLineManagedBy specifies who manages the line.
type InvoiceLineManagedBy string

// InvoiceLineReplaceUpdate InvoiceLineReplaceUpdate represents the update model for an UBP invoice line.
//
// This type makes ID optional to allow for creating new lines as part of the update.
type InvoiceLineReplaceUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// FeatureKey The feature that the usage is based on.
	// Deprecated:
	FeatureKey *string `json:"featureKey,omitempty"`

	// Id The ID of the line.
	Id *string `json:"id,omitempty"`

	// InvoiceAt The time this line item should be invoiced.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Period Period of the line item applies to for revenue recognition pruposes.
	//
	// Billing always treats periods as start being inclusive and end being exclusive.
	Period Period `json:"period"`

	// Price Price of the usage-based item being sold.
	// Deprecated:
	Price *RateCardUsageBasedPrice `json:"price,omitempty"`

	// RateCard The rate card that is used for this line.
	//
	// The rate card captures the intent of the price and discounts for the usage-based item.
	RateCard *InvoiceUsageBasedRateCard `json:"rateCard,omitempty"`

	// TaxConfig Tax config specify the tax configuration for this line.
	// Deprecated:
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`
}

// InvoiceLineStatus Line status specifies the status of the line.
type InvoiceLineStatus string

// InvoiceLineSubscriptionReference InvoiceLineSubscriptionReference contains the references to the subscription that this line is related to.
type InvoiceLineSubscriptionReference struct {
	// Item The item this line is related to.
	Item IDResource `json:"item"`

	// Phase The phase of the subscription.
	Phase IDResource `json:"phase"`

	// Subscription The subscription.
	Subscription IDResource `json:"subscription"`
}

// InvoiceLineTaxBehavior InvoiceLineTaxBehavior details how the tax item is applied to the base amount.
//
// Inclusive means the tax is included in the base amount.
// Exclusive means the tax is added to the base amount.
type InvoiceLineTaxBehavior string

// InvoiceLineTaxItem TaxConfig stores the configuration for a tax line relative to an invoice line.
type InvoiceLineTaxItem struct {
	// Behavior Is the tax item inclusive or exclusive of the base amount.
	Behavior *InvoiceLineTaxBehavior `json:"behavior,omitempty"`

	// Config Tax provider configuration.
	Config *TaxConfig `json:"config,omitempty"`

	// Percent Percent defines the percentage set manually or determined from
	// the rate key (calculated if rate present). A nil percent implies that
	// this tax combo is **exempt** from tax.")
	Percent *Percentage `json:"percent,omitempty"`

	// Surcharge Some countries require an additional surcharge (calculated if rate present).
	Surcharge *Numeric `json:"surcharge,omitempty"`
}

// InvoiceLineTypes LineTypes represents the different types of lines that can be used in an invoice.
type InvoiceLineTypes string

// InvoiceLineUsageDiscount InvoiceLineUsageDiscount represents an usage-based discount applied to the line.
//
// The deduction is done before the pricing algorithm is applied.
type InvoiceLineUsageDiscount struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Text description as to why the discount was applied.
	Description *string `json:"description,omitempty"`

	// ExternalIds External IDs of the invoice in other apps such as Stripe.
	ExternalIds *InvoiceLineAppExternalIds `json:"externalIds,omitempty"`

	// Id ID of the charge or discount.
	Id string `json:"id"`

	// PreLinePeriodQuantity The usage discount already applied to the previous split lines.
	//
	// Only set if progressive billing is enabled and the line is a split line.
	PreLinePeriodQuantity *Numeric `json:"preLinePeriodQuantity,omitempty"`

	// Quantity The usage to apply.
	Quantity Numeric `json:"quantity"`

	// Reason Reason code.
	Reason BillingDiscountReason `json:"reason"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvoiceNumber InvoiceNumber is a unique identifier for the invoice, generated by the
// invoicing app.
//
// The uniqueness depends on a lot of factors:
// - app setting (unique per app or unique per customer)
// - multiple app scenarios (multiple apps generating invoices with the same prefix)
type InvoiceNumber = string

// InvoiceOrderBy InvoiceOrderBy specifies the ordering options for invoice listing.
type InvoiceOrderBy string

// InvoicePaginatedResponse Paginated response
type InvoicePaginatedResponse struct {
	// Items The items in the current page.
	Items []Invoice `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// InvoicePaymentTerms Payment contains details as to how the invoice should be paid.
type InvoicePaymentTerms struct {
	// Terms The terms of payment for the invoice.
	Terms *PaymentTerms `json:"terms,omitempty"`
}

// InvoicePendingLineCreate InvoicePendingLineCreate represents the create model for an invoice line that is sold to the customer based on usage.
type InvoicePendingLineCreate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// FeatureKey The feature that the usage is based on.
	// Deprecated:
	FeatureKey *string `json:"featureKey,omitempty"`

	// InvoiceAt The time this line item should be invoiced.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Period Period of the line item applies to for revenue recognition pruposes.
	//
	// Billing always treats periods as start being inclusive and end being exclusive.
	Period Period `json:"period"`

	// Price Price of the usage-based item being sold.
	// Deprecated:
	Price *RateCardUsageBasedPrice `json:"price,omitempty"`

	// RateCard The rate card that is used for this line.
	//
	// The rate card captures the intent of the price and discounts for the usage-based item.
	RateCard *InvoiceUsageBasedRateCard `json:"rateCard,omitempty"`

	// TaxConfig Tax config specify the tax configuration for this line.
	// Deprecated:
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`
}

// InvoicePendingLineCreateInput InvoicePendingLineCreate represents the create model for a pending invoice line.
type InvoicePendingLineCreateInput struct {
	// Currency The currency of the lines to be created.
	Currency CurrencyCode `json:"currency"`

	// Lines The lines to be created.
	Lines []InvoicePendingLineCreate `json:"lines"`
}

// InvoicePendingLineCreateResponse InvoicePendingLineCreateResponse represents the response from the create pending line endpoint.
type InvoicePendingLineCreateResponse struct {
	// Invoice The invoice containing the created lines.
	Invoice Invoice `json:"invoice"`

	// IsInvoiceNew Whether the invoice was newly created.
	IsInvoiceNew bool `json:"isInvoiceNew"`

	// Lines The lines that were created.
	Lines []InvoiceLine `json:"lines"`
}

// InvoicePendingLinesActionFiltersInput InvoicePendingLinesActionFiltersInput specifies which lines to include in the invoice.
type InvoicePendingLinesActionFiltersInput struct {
	// LineIds The pending line items to include in the invoice, if not provided:
	// - all line items that have invoice_at < asOf will be included
	// - [progressive billing only] all usage based line items will be included up to asOf, new
	// usage-based line items will be staged for the rest of the billing cycle
	//
	// All lineIDs present in the list, must exists and must be invoicable as of asOf, or the action will fail.
	LineIds *[]string `json:"lineIds,omitempty"`
}

// InvoicePendingLinesActionInput BillingInvoiceActionInput is the input for creating an invoice.
//
// Invoice creation is always based on already pending line items created by the billingCreateLineByCustomer
// operation. Empty invoices are not allowed.
type InvoicePendingLinesActionInput struct {
	// AsOf The time as of which the invoice is created.
	//
	// If not provided, the current time is used.
	AsOf *time.Time `json:"asOf,omitempty"`

	// CustomerId The customer ID for which to create the invoice.
	CustomerId string `json:"customerId"`

	// Filters Filters to apply when creating the invoice.
	Filters *InvoicePendingLinesActionFiltersInput `json:"filters,omitempty"`

	// ProgressiveBillingOverride Override the progressive billing setting of the customer.
	//
	// Can be used to disable/enable progressive billing in case the business logic
	// requires it, if not provided the billing profile's progressive billing setting will be used.
	ProgressiveBillingOverride *bool `json:"progressiveBillingOverride,omitempty"`
}

// InvoiceReference Reference to an invoice.
type InvoiceReference struct {
	// Id The ID of the invoice.
	Id string `json:"id"`

	// Number The number of the invoice.
	Number *InvoiceNumber `json:"number,omitempty"`
}

// InvoiceReplaceUpdate InvoiceReplaceUpdate represents the update model for an invoice.
type InvoiceReplaceUpdate struct {
	// Customer The customer the invoice is sent to.
	Customer BillingPartyReplaceUpdate `json:"customer"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Lines The lines included in the invoice.
	Lines []InvoiceLineReplaceUpdate `json:"lines"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Supplier The supplier of the lines included in the invoice.
	Supplier BillingPartyReplaceUpdate `json:"supplier"`

	// Workflow The workflow settings for the invoice.
	Workflow InvoiceWorkflowReplaceUpdate `json:"workflow"`
}

// InvoiceSimulationInput InvoiceSimulationInput is the input for simulating an invoice.
type InvoiceSimulationInput struct {
	// Currency Currency for all invoice line items.
	//
	// Multi currency invoices are not supported yet.
	Currency CurrencyCode `json:"currency"`

	// Lines Lines to be included in the generated invoice.
	Lines []InvoiceSimulationLine `json:"lines"`

	// Number The number of the invoice.
	Number *InvoiceNumber `json:"number,omitempty"`
}

// InvoiceSimulationLine InvoiceSimulationLine represents a usage-based line item that can be input to the simulation endpoint.
type InvoiceSimulationLine struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// FeatureKey The feature that the usage is based on.
	// Deprecated:
	FeatureKey *string `json:"featureKey,omitempty"`

	// Id ID of the line. If not specified it will be auto-generated.
	//
	// When discounts are specified, this must be provided, so that the discount can reference it.
	Id *string `json:"id,omitempty"`

	// InvoiceAt The time this line item should be invoiced.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Period Period of the line item applies to for revenue recognition pruposes.
	//
	// Billing always treats periods as start being inclusive and end being exclusive.
	Period Period `json:"period"`

	// PreLinePeriodQuantity The quantity of the item used before this line's period, if the line is billed progressively.
	PreLinePeriodQuantity *Numeric `json:"preLinePeriodQuantity,omitempty"`

	// Price Price of the usage-based item being sold.
	// Deprecated:
	Price *RateCardUsageBasedPrice `json:"price,omitempty"`

	// Quantity The quantity of the item being sold.
	Quantity Numeric `json:"quantity"`

	// RateCard The rate card that is used for this line.
	//
	// The rate card captures the intent of the price and discounts for the usage-based item.
	RateCard *InvoiceUsageBasedRateCard `json:"rateCard,omitempty"`

	// TaxConfig Tax config specify the tax configuration for this line.
	// Deprecated:
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`
}

// InvoiceStatus InvoiceStatus describes the status of an invoice.
type InvoiceStatus string

// InvoiceStatusDetails InvoiceStatusDetails represents the details of the invoice status.
//
// API users are encouraged to rely on the immutable/failed/avaliableActions fields to determine
// the next steps of the invoice instead of the extendedStatus field.
type InvoiceStatusDetails struct {
	// AvailableActions The actions that can be performed on the invoice.
	AvailableActions InvoiceAvailableActions `json:"availableActions"`

	// ExtendedStatus Extended status information for the invoice.
	ExtendedStatus string `json:"extendedStatus"`

	// Failed Is the invoice in a failed state?
	Failed bool `json:"failed"`

	// Immutable Is the invoice editable?
	Immutable bool `json:"immutable"`
}

// InvoiceTotals Totals contains the summaries of all calculations for the invoice.
type InvoiceTotals struct {
	// Amount The total value of the line before taxes, discounts and commitments.
	Amount Numeric `json:"amount"`

	// ChargesTotal The amount of value of the line that are due to additional charges.
	ChargesTotal Numeric `json:"chargesTotal"`

	// DiscountsTotal The amount of value of the line that are due to discounts.
	DiscountsTotal Numeric `json:"discountsTotal"`

	// TaxesExclusiveTotal The total amount of taxes that are added on top of amount from the line.
	TaxesExclusiveTotal Numeric `json:"taxesExclusiveTotal"`

	// TaxesInclusiveTotal The total amount of taxes that are included in the line.
	TaxesInclusiveTotal Numeric `json:"taxesInclusiveTotal"`

	// TaxesTotal The total amount of taxes for this line.
	TaxesTotal Numeric `json:"taxesTotal"`

	// Total The total amount value of the line after taxes, discounts and commitments.
	Total Numeric `json:"total"`
}

// InvoiceType InvoiceType represents the type of invoice.
//
// The type of invoice determines the purpose of the invoice and how it should be handled.
type InvoiceType string

// InvoiceUsageBasedRateCard InvoiceUsageBasedRateCard represents the rate card (intent) for an usage-based line.
type InvoiceUsageBasedRateCard struct {
	// Discounts The discounts that are applied to the line.
	Discounts *BillingDiscounts `json:"discounts,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *RateCardUsageBasedPrice `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`
}

// InvoiceWorkflowInvoicingSettingsReplaceUpdate InvoiceWorkflowInvoicingSettingsReplaceUpdate represents the update model for the invoicing settings of an invoice workflow.
type InvoiceWorkflowInvoicingSettingsReplaceUpdate struct {
	// AutoAdvance Whether to automatically issue the invoice after the draftPeriod has passed.
	AutoAdvance *bool `json:"autoAdvance,omitempty"`

	// DefaultTaxConfig Default tax configuration to apply to the invoices.
	DefaultTaxConfig *TaxConfig `json:"defaultTaxConfig,omitempty"`

	// DraftPeriod The period for the invoice to be kept in draft status for manual reviews.
	DraftPeriod *string `json:"draftPeriod,omitempty"`

	// DueAfter The period after which the invoice is due.
	// With some payment solutions it's only applicable for manual collection method.
	DueAfter *string `json:"dueAfter,omitempty"`
}

// InvoiceWorkflowReplaceUpdate InvoiceWorkflowReplaceUpdate represents the update model for an invoice workflow.
//
// Fields that are immutable a re removed from the model. This is based on InvoiceWorkflowSettings.
type InvoiceWorkflowReplaceUpdate struct {
	// Workflow The workflow used for this invoice.
	Workflow InvoiceWorkflowSettingsReplaceUpdate `json:"workflow"`
}

// InvoiceWorkflowSettings InvoiceWorkflowSettings represents the workflow settings used by the invoice.
//
// This is a clone of the billing profile's workflow settings at the time of invoice creation
// with customer overrides considered.
type InvoiceWorkflowSettings struct {
	// Apps The apps that will be used to orchestrate the invoice's workflow.
	Apps *BillingProfileAppsOrReference `json:"apps,omitempty"`

	// SourceBillingProfileId sourceBillingProfileID is the billing profile on which the workflow was based on.
	//
	// The profile is snapshotted on invoice creation, after which it can be altered independently
	// of the profile itself.
	SourceBillingProfileId string `json:"sourceBillingProfileId"`

	// Workflow The workflow details used by this invoice.
	Workflow BillingWorkflow `json:"workflow"`
}

// InvoiceWorkflowSettingsReplaceUpdate Mutable workflow settings for an invoice.
//
// Other fields on the invoice's workflow are not mutable, they serve as a history of the invoice's workflow
// at creation time.
type InvoiceWorkflowSettingsReplaceUpdate struct {
	// Invoicing The invoicing settings for this workflow
	Invoicing InvoiceWorkflowInvoicingSettingsReplaceUpdate `json:"invoicing"`

	// Payment The payment settings for this workflow
	Payment BillingWorkflowPaymentSettings `json:"payment"`
}

// ListAppsRequest Query params for listing installed apps
type ListAppsRequest struct {
	// Page Page index.
	//
	// Default is 1.
	Page *int `json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *int `json:"pageSize,omitempty"`
}

// ListEntitlementsResult List entitlements result
type ListEntitlementsResult struct {
	union json.RawMessage
}

// ListEntitlementsResult0 defines model for .
type ListEntitlementsResult0 = []Entitlement

// ListFeaturesResult List features result
type ListFeaturesResult struct {
	union json.RawMessage
}

// ListFeaturesResult0 defines model for .
type ListFeaturesResult0 = []Feature

// MarketplaceInstallResponse Marketplace install response.
type MarketplaceInstallResponse struct {
	// App App.
	// One of: stripe
	App App `json:"app"`

	// DefaultForCapabilityTypes Default for capabilities
	DefaultForCapabilityTypes []AppCapabilityType `json:"defaultForCapabilityTypes"`
}

// MarketplaceListing A marketplace listing.
// Represent an available app in the app marketplace that can be installed to the organization.
//
// Marketplace apps only exist in config so they don't extend the Resource model.
type MarketplaceListing struct {
	// Capabilities The app's capabilities.
	Capabilities []AppCapability `json:"capabilities"`

	// Description The app's description.
	Description string `json:"description"`

	// InstallMethods Install methods.
	//
	// List of methods to install the app.
	InstallMethods []InstallMethod `json:"installMethods"`

	// Name The app's name.
	Name string `json:"name"`

	// Type The app's type
	Type AppType `json:"type"`
}

// MarketplaceListingPaginatedResponse Paginated response
type MarketplaceListingPaginatedResponse struct {
	// Items The items in the current page.
	Items []MarketplaceListing `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// MeasureUsageFrom Measure usage from
type MeasureUsageFrom struct {
	union json.RawMessage
}

// MeasureUsageFromPreset Start of measurement options
type MeasureUsageFromPreset string

// MeasureUsageFromTime [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
type MeasureUsageFromTime = time.Time

// Metadata Set of key-value pairs.
// Metadata can be used to store additional information about a resource.
type Metadata = map[string]string

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter struct {
	// Aggregation The aggregation type to use for the meter.
	Aggregation MeterAggregation `json:"aggregation"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EventFrom The date since the meter should include events.
	// Useful to skip old events.
	// If not specified, all historical events are included.
	EventFrom *time.Time `json:"eventFrom,omitempty"`

	// EventType The event type to aggregate.
	EventType string `json:"eventType"`

	// GroupBy Named JSONPath expressions to extract the group by values from the event data.
	//
	// Keys must be unique and consist only alphanumeric and underscore characters.
	GroupBy *map[string]string `json:"groupBy,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	// Defaults to the slug if not specified.
	Name *string `json:"name,omitempty"`

	// Slug A unique, human-readable identifier for the meter.
	// Must consist only alphanumeric and underscore characters.
	Slug string `json:"slug"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// ValueProperty JSONPath expression to extract the value from the ingested event's data property.
	//
	// The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number.
	//
	// For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored.
	ValueProperty *string `json:"valueProperty,omitempty"`
}

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation string

// MeterCreate A meter create model.
type MeterCreate struct {
	// Aggregation The aggregation type to use for the meter.
	Aggregation MeterAggregation `json:"aggregation"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EventFrom The date since the meter should include events.
	// Useful to skip old events.
	// If not specified, all historical events are included.
	EventFrom *time.Time `json:"eventFrom,omitempty"`

	// EventType The event type to aggregate.
	EventType string `json:"eventType"`

	// GroupBy Named JSONPath expressions to extract the group by values from the event data.
	//
	// Keys must be unique and consist only alphanumeric and underscore characters.
	GroupBy *map[string]string `json:"groupBy,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	// Defaults to the slug if not specified.
	Name *string `json:"name,omitempty"`

	// Slug A unique, human-readable identifier for the meter.
	// Must consist only alphanumeric and underscore characters.
	Slug string `json:"slug"`

	// ValueProperty JSONPath expression to extract the value from the ingested event's data property.
	//
	// The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number.
	//
	// For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored.
	ValueProperty *string `json:"valueProperty,omitempty"`
}

// MeterOrderBy Order by options for meters.
type MeterOrderBy string

// MeterQueryRequest A meter query request.
type MeterQueryRequest struct {
	// ClientId Client ID
	// Useful to track progress of a query.
	ClientId *string `json:"clientId,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	FilterGroupBy *map[string][]string `json:"filterGroupBy,omitempty"`

	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *time.Time `json:"from,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *[]string `json:"groupBy,omitempty"`

	// Subject Filtering by multiple subjects.
	Subject *[]string `json:"subject,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *time.Time `json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *string `json:"windowTimeZone,omitempty"`
}

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	// Data The usage data.
	// If no data is available, an empty array is returned.
	Data []MeterQueryRow `json:"data"`

	// From The start of the period the usage is queried from.
	// If not specified, the usage is queried from the beginning of time.
	From *time.Time `json:"from,omitempty"`

	// To The end of the period the usage is queried to.
	// If not specified, the usage is queried up to the current time.
	To *time.Time `json:"to,omitempty"`

	// WindowSize The window size that the usage is aggregated.
	// If not specified, the usage is aggregated over the entire period.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow struct {
	// GroupBy The group by values the value is aggregated over.
	GroupBy map[string]*string `json:"groupBy"`

	// Subject The subject the value is aggregated over.
	// If not specified, the value is aggregated over all subjects.
	Subject *string `json:"subject"`

	// Value The aggregated value.
	Value float64 `json:"value"`

	// WindowEnd The end of the window the value is aggregated over.
	WindowEnd time.Time `json:"windowEnd"`

	// WindowStart The start of the window the value is aggregated over.
	WindowStart time.Time `json:"windowStart"`
}

// MeterUpdate A meter update model.
//
// Only the properties that can be updated are included.
// For example, the slug and aggregation cannot be updated.
type MeterUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// GroupBy Named JSONPath expressions to extract the group by values from the event data.
	//
	// Keys must be unique and consist only alphanumeric and underscore characters.
	GroupBy *map[string]string `json:"groupBy,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	// Defaults to the slug if not specified.
	Name *string `json:"name,omitempty"`
}

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = UnexpectedProblemResponse

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = UnexpectedProblemResponse

// NotificationChannel Notification channel with webhook type.
type NotificationChannel = NotificationChannelWebhook

// NotificationChannelCreateRequest Request with input parameters for creating new notification channel with webhook type.
type NotificationChannelCreateRequest = NotificationChannelWebhookCreateRequest

// NotificationChannelMeta Metadata only fields of a notification channel.
type NotificationChannelMeta struct {
	// Id Identifies the notification channel.
	Id string `json:"id"`

	// Type Notification channel type.
	Type NotificationChannelType `json:"type"`
}

// NotificationChannelOrderBy Order by options for notification channels.
type NotificationChannelOrderBy string

// NotificationChannelPaginatedResponse Paginated response
type NotificationChannelPaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationChannel `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// NotificationChannelType Type of the notification channel.
type NotificationChannelType string

// NotificationChannelWebhook Notification channel with webhook type.
type NotificationChannelWebhook struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Id Identifies the notification channel.
	Id string `json:"id"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret,omitempty"`

	// Type Notification channel type.
	Type NotificationChannelWebhookType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookType Notification channel type.
type NotificationChannelWebhookType string

// NotificationChannelWebhookCreateRequest Request with input parameters for creating new notification channel with webhook type.
type NotificationChannelWebhookCreateRequest struct {
	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret,omitempty"`

	// Type Notification channel type.
	Type NotificationChannelWebhookCreateRequestType `json:"type"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookCreateRequestType Notification channel type.
type NotificationChannelWebhookCreateRequestType string

// NotificationEvent Type of the notification event.
type NotificationEvent struct {
	// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp when the notification event was created in RFC 3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// DeliveryStatus The delivery status of the notification event.
	DeliveryStatus []NotificationEventDeliveryStatus `json:"deliveryStatus"`

	// Id A unique identifier of the notification event.
	Id string `json:"id"`

	// Payload Timestamp when the notification event was created in RFC 3339 format.
	Payload NotificationEventPayload `json:"payload"`

	// Rule The nnotification rule which generated this event.
	Rule NotificationRule `json:"rule"`

	// Type Type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationEventBalanceThresholdPayload Payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventBalanceThresholdPayload struct {
	// Data The data of the payload.
	Data NotificationEventBalanceThresholdPayloadData `json:"data"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created in RFC 3339 format.
	Timestamp time.Time `json:"timestamp"`

	// Type Type of the notification event.
	Type NotificationEventBalanceThresholdPayloadType `json:"type"`
}

// NotificationEventBalanceThresholdPayloadType Type of the notification event.
type NotificationEventBalanceThresholdPayloadType string

// NotificationEventBalanceThresholdPayloadData Data of the payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventBalanceThresholdPayloadData struct {
	Entitlement EntitlementMetered                    `json:"entitlement"`
	Feature     Feature                               `json:"feature"`
	Subject     Subject                               `json:"subject"`
	Threshold   NotificationRuleBalanceThresholdValue `json:"threshold"`
	Value       EntitlementValue                      `json:"value"`
}

// NotificationEventDeliveryStatus The delivery status of the notification event.
type NotificationEventDeliveryStatus struct {
	// Channel Notification channel the delivery sattus associated with.
	Channel NotificationChannelMeta `json:"channel"`

	// Reason The reason of the last deliverry state update.
	Reason string `json:"reason"`

	// State Delivery state of the notification event to the channel.
	State NotificationEventDeliveryStatusState `json:"state"`

	// UpdatedAt Timestamp of when the status was last updated in RFC 3339 format.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationEventDeliveryStatusState The delivery state of the notification event to the channel.
type NotificationEventDeliveryStatusState string

// NotificationEventEntitlementValuePayloadBase Base data for any payload with entitlement entitlement value.
type NotificationEventEntitlementValuePayloadBase struct {
	Entitlement EntitlementMetered `json:"entitlement"`
	Feature     Feature            `json:"feature"`
	Subject     Subject            `json:"subject"`
	Value       EntitlementValue   `json:"value"`
}

// NotificationEventInvoiceCreatedPayload Payload for notification event with `invoice.created` type.
type NotificationEventInvoiceCreatedPayload struct {
	// Data The data of the payload.
	Data Invoice `json:"data"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created in RFC 3339 format.
	Timestamp time.Time `json:"timestamp"`

	// Type Type of the notification event.
	Type NotificationEventInvoiceCreatedPayloadType `json:"type"`
}

// NotificationEventInvoiceCreatedPayloadType Type of the notification event.
type NotificationEventInvoiceCreatedPayloadType string

// NotificationEventInvoiceUpdatedPayload Payload for notification event with `invoice.updated` type.
type NotificationEventInvoiceUpdatedPayload struct {
	// Data The data of the payload.
	Data Invoice `json:"data"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created in RFC 3339 format.
	Timestamp time.Time `json:"timestamp"`

	// Type Type of the notification event.
	Type NotificationEventInvoiceUpdatedPayloadType `json:"type"`
}

// NotificationEventInvoiceUpdatedPayloadType Type of the notification event.
type NotificationEventInvoiceUpdatedPayloadType string

// NotificationEventOrderBy Order by options for notification channels.
type NotificationEventOrderBy string

// NotificationEventPaginatedResponse Paginated response
type NotificationEventPaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationEvent `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// NotificationEventPayload The delivery status of the notification event.
type NotificationEventPayload struct {
	union json.RawMessage
}

// NotificationEventResetPayload Payload for notification event with `entitlements.reset` type.
type NotificationEventResetPayload struct {
	// Data The data of the payload.
	Data NotificationEventEntitlementValuePayloadBase `json:"data"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created in RFC 3339 format.
	Timestamp time.Time `json:"timestamp"`

	// Type Type of the notification event.
	Type NotificationEventResetPayloadType `json:"type"`
}

// NotificationEventResetPayloadType Type of the notification event.
type NotificationEventResetPayloadType string

// NotificationEventType Type of the notification event.
type NotificationEventType string

// NotificationRule Notification Rule.
type NotificationRule struct {
	union json.RawMessage
}

// NotificationRuleBalanceThreshold Notification rule with entitlements.balance.threshold type.
type NotificationRuleBalanceThreshold struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field containing list of features the rule applies to.
	Features *[]FeatureMeta `json:"features,omitempty"`

	// Id Identifies the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type Notification rule type.
	Type NotificationRuleBalanceThresholdType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleBalanceThresholdType Notification rule type.
type NotificationRuleBalanceThresholdType string

// NotificationRuleBalanceThresholdCreateRequest Request with input parameters for creating new notification rule with entitlements.balance.threshold type.
type NotificationRuleBalanceThresholdCreateRequest struct {
	// Channels List of notification channels the rule is applied to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field for defining the scope of notification by feature. It may contain features by id or key.
	Features *[]string `json:"features,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type Notification rule type.
	Type NotificationRuleBalanceThresholdCreateRequestType `json:"type"`
}

// NotificationRuleBalanceThresholdCreateRequestType Notification rule type.
type NotificationRuleBalanceThresholdCreateRequestType string

// NotificationRuleBalanceThresholdValue Threshold value with multiple supported types.
type NotificationRuleBalanceThresholdValue struct {
	// Type Type of the threshold.
	Type NotificationRuleBalanceThresholdValueType `json:"type"`

	// Value Value of the threshold.
	Value float64 `json:"value"`
}

// NotificationRuleBalanceThresholdValueType Type of the rule in the balance threshold specification.
type NotificationRuleBalanceThresholdValueType string

// NotificationRuleCreateRequest Union type for requests creating new notification rule with certain type.
type NotificationRuleCreateRequest struct {
	union json.RawMessage
}

// NotificationRuleEntitlementReset Notification rule with entitlements.reset type.
type NotificationRuleEntitlementReset struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field containing list of features the rule applies to.
	Features *[]FeatureMeta `json:"features,omitempty"`

	// Id Identifies the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type Notification rule type.
	Type NotificationRuleEntitlementResetType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleEntitlementResetType Notification rule type.
type NotificationRuleEntitlementResetType string

// NotificationRuleEntitlementResetCreateRequest Request with input parameters for creating new notification rule with entitlements.reset type.
type NotificationRuleEntitlementResetCreateRequest struct {
	// Channels List of notification channels the rule is applied to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field for defining the scope of notification by feature. It may contain features by id or key.
	Features *[]string `json:"features,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type Notification rule type.
	Type NotificationRuleEntitlementResetCreateRequestType `json:"type"`
}

// NotificationRuleEntitlementResetCreateRequestType Notification rule type.
type NotificationRuleEntitlementResetCreateRequestType string

// NotificationRuleInvoiceCreated Notification rule with invoice.created type.
type NotificationRuleInvoiceCreated struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Id Identifies the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type Notification rule type.
	Type NotificationRuleInvoiceCreatedType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleInvoiceCreatedType Notification rule type.
type NotificationRuleInvoiceCreatedType string

// NotificationRuleInvoiceCreatedCreateRequest Request with input parameters for creating new notification rule with invoice.created type.
type NotificationRuleInvoiceCreatedCreateRequest struct {
	// Channels List of notification channels the rule is applied to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type Notification rule type.
	Type NotificationRuleInvoiceCreatedCreateRequestType `json:"type"`
}

// NotificationRuleInvoiceCreatedCreateRequestType Notification rule type.
type NotificationRuleInvoiceCreatedCreateRequestType string

// NotificationRuleInvoiceUpdated Notification rule with invoice.updated type.
type NotificationRuleInvoiceUpdated struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Id Identifies the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type Notification rule type.
	Type NotificationRuleInvoiceUpdatedType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleInvoiceUpdatedType Notification rule type.
type NotificationRuleInvoiceUpdatedType string

// NotificationRuleInvoiceUpdatedCreateRequest Request with input parameters for creating new notification rule with invoice.updated  type.
type NotificationRuleInvoiceUpdatedCreateRequest struct {
	// Channels List of notification channels the rule is applied to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type Notification rule type.
	Type NotificationRuleInvoiceUpdatedCreateRequestType `json:"type"`
}

// NotificationRuleInvoiceUpdatedCreateRequestType Notification rule type.
type NotificationRuleInvoiceUpdatedCreateRequestType string

// NotificationRuleMeta Metadata only fields of a notification channel.
type NotificationRuleMeta struct {
	// Id Identifies the notification rule.
	Id string `json:"id"`

	// Type Notification rule type.
	Type NotificationEventType `json:"type"`
}

// NotificationRuleOrderBy Order by options for notification channels.
type NotificationRuleOrderBy string

// NotificationRulePaginatedResponse Paginated response
type NotificationRulePaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationRule `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// Numeric Numeric represents an arbitrary precision number.
type Numeric = string

// OAuth2AuthorizationCodeGrantErrorType OAuth2 authorization code grant error types.
type OAuth2AuthorizationCodeGrantErrorType string

// PackagePrice Package price.
//
// The item is sold in packages. Each package contains quantityPerPackage items, the price of the
// package is set in amount.
//
// The total price of the usage will be enough packages that can accomodate all the usage.
//
// Examples (given a package size of 20, and an amount of $10):
// - if the quantity is 98, the price will be 5*$10=$50.
// - if the quantity is zero, the price will be 0*$10=$0, as even the first package is not purchased.
// - if the quantity is 20, the price will be 1*$10=$10, as the usage fits into the first package.
// - if the quantity is 20.1, the price will be 2*$10=$20, as the additional 0.1 usage (compared to the
// previous example) requires a new package.
type PackagePrice struct {
	// Amount The price of one package.
	Amount Numeric `json:"amount"`

	// QuantityPerPackage The quantity per package.
	QuantityPerPackage Numeric `json:"quantityPerPackage"`

	// Type The type of the price.
	Type PackagePriceType `json:"type"`
}

// PackagePriceType The type of the price.
type PackagePriceType string

// PackagePriceWithCommitments Package price with spend commitments.
type PackagePriceWithCommitments struct {
	// Amount The price of one package.
	Amount Numeric `json:"amount"`

	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// QuantityPerPackage The quantity per package.
	QuantityPerPackage Numeric `json:"quantityPerPackage"`

	// Type The type of the price.
	Type PackagePriceWithCommitmentsType `json:"type"`
}

// PackagePriceWithCommitmentsType The type of the price.
type PackagePriceWithCommitmentsType string

// PaymentDueDate PaymentDueDate contains an amount that should be paid by the given date.
type PaymentDueDate struct {
	// Amount How much needs to be paid by the date.
	Amount Numeric `json:"amount"`

	// Currency If different from the parent document's base currency.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// DueAt When the payment is due.
	DueAt time.Time `json:"dueAt"`

	// Notes Other details to take into account for the due date.
	Notes *string `json:"notes,omitempty"`

	// Percent Percentage of the total that should be paid by the date.
	Percent *Percentage `json:"percent,omitempty"`
}

// PaymentTermDueDate PaymentTermDueDate defines the terms for payment on a specific date.
type PaymentTermDueDate struct {
	// Detail Text detail of the chosen payment terms.
	Detail *string `json:"detail,omitempty"`

	// DueAt When the payment is due.
	DueAt []PaymentDueDate `json:"dueAt"`

	// Notes Description of the conditions for payment.
	Notes *string `json:"notes,omitempty"`

	// Type Type of terms to be applied.
	Type PaymentTermDueDateType `json:"type"`
}

// PaymentTermDueDateType Type of terms to be applied.
type PaymentTermDueDateType string

// PaymentTermInstant PaymentTermInstant defines the terms for payment on receipt of invoice.
type PaymentTermInstant struct {
	// Detail Text detail of the chosen payment terms.
	Detail *string `json:"detail,omitempty"`

	// Notes Description of the conditions for payment.
	Notes *string `json:"notes,omitempty"`

	// Type Type of terms to be applied.
	Type PaymentTermInstantType `json:"type"`
}

// PaymentTermInstantType Type of terms to be applied.
type PaymentTermInstantType string

// PaymentTermType PaymentTermType defines the type of terms to be applied.
type PaymentTermType string

// PaymentTerms PaymentTerms defines the terms for payment.
type PaymentTerms struct {
	union json.RawMessage
}

// Percentage Numeric representation of a percentage
//
// 50% is represented as 50
type Percentage = models.Percentage

// Period A period with a start and end time.
type Period struct {
	// From Period start time.
	From time.Time `json:"from"`

	// To Period end time.
	To time.Time `json:"to"`
}

// Plan Plans provide a template for subscriptions.
type Plan struct {
	// Alignment Alignment configuration for the plan.
	Alignment *Alignment `json:"alignment,omitempty"`

	// BillingCadence The default billing cadence for subscriptions using this plan.
	// Defines how often customers are billed using ISO8601 duration format.
	// Examples: "P1M" (monthly), "P3M" (quarterly), "P1Y" (annually).
	BillingCadence string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EffectiveFrom The date and time when the plan becomes effective. When not specified, the plan is a draft.
	EffectiveFrom *time.Time `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time when the plan is no longer effective. When not specified, the plan is effective indefinitely.
	EffectiveTo *time.Time `json:"effectiveTo,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`

	// ProRatingConfig Default pro-rating configuration for subscriptions using this plan.
	ProRatingConfig *ProRatingConfig `json:"proRatingConfig,omitempty"`

	// Status The status of the plan.
	// Computed based on the effective start and end dates:
	// - draft = no effectiveFrom
	// - active = effectiveFrom <= now < effectiveTo
	// - archived / inactive = effectiveTo <= now
	// - scheduled = now < effectiveFrom < effectiveTo
	Status PlanStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// ValidationErrors List of validation errors.
	ValidationErrors *[]ValidationError `json:"validationErrors"`

	// Version Version of the plan. Incremented when the plan is updated.
	Version int `json:"version"`
}

// PlanAddon The PlanAddon describes the association between a plan and add-on.
type PlanAddon struct {
	// Addon Add-on object.
	Addon Addon `json:"addon"`

	// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FromPlanPhase The key of the plan phase from the add-on becomes available for purchase.
	FromPlanPhase string `json:"fromPlanPhase"`

	// MaxQuantity The maximum number of times the add-on can be purchased for the plan.
	// It is not applicable for add-ons with single instance type.
	MaxQuantity *int `json:"maxQuantity,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// ValidationErrors List of validation errors.
	ValidationErrors *[]ValidationError `json:"validationErrors"`
}

// PlanAddonCreate A plan add-on assignment create request.
type PlanAddonCreate struct {
	// AddonId The add-on unique identifier in ULID format.
	AddonId string `json:"addonId"`

	// FromPlanPhase The key of the plan phase from the add-on becomes available for purchase.
	FromPlanPhase string `json:"fromPlanPhase"`

	// MaxQuantity The maximum number of times the add-on can be purchased for the plan.
	// It is not applicable for add-ons with single instance type.
	MaxQuantity *int `json:"maxQuantity,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`
}

// PlanAddonOrderBy Order by options for plan add-on assignments.
type PlanAddonOrderBy string

// PlanAddonPaginatedResponse Paginated response
type PlanAddonPaginatedResponse struct {
	// Items The items in the current page.
	Items []PlanAddon `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// PlanAddonReplaceUpdate Resource update operation model.
type PlanAddonReplaceUpdate struct {
	// FromPlanPhase The key of the plan phase from the add-on becomes available for purchase.
	FromPlanPhase string `json:"fromPlanPhase"`

	// MaxQuantity The maximum number of times the add-on can be purchased for the plan.
	// It is not applicable for add-ons with single instance type.
	MaxQuantity *int `json:"maxQuantity,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`
}

// PlanCreate Resource create operation model.
type PlanCreate struct {
	// Alignment Alignment configuration for the plan.
	Alignment *Alignment `json:"alignment,omitempty"`

	// BillingCadence The default billing cadence for subscriptions using this plan.
	// Defines how often customers are billed using ISO8601 duration format.
	// Examples: "P1M" (monthly), "P3M" (quarterly), "P1Y" (annually).
	BillingCadence string `json:"billingCadence"`

	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`

	// ProRatingConfig Default pro-rating configuration for subscriptions using this plan.
	ProRatingConfig *ProRatingConfig `json:"proRatingConfig,omitempty"`
}

// PlanOrderBy Order by options for plans.
type PlanOrderBy string

// PlanPaginatedResponse Paginated response
type PlanPaginatedResponse struct {
	// Items The items in the current page.
	Items []Plan `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// PlanPhase The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
type PlanPhase struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Duration The duration of the phase.
	Duration *string `json:"duration"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the plan.
	RateCards []RateCard `json:"rateCards"`
}

// PlanReference References an exact plan.
type PlanReference struct {
	// Id The plan ID.
	Id string `json:"id"`

	// Key The plan key.
	Key string `json:"key"`

	// Version The plan version.
	Version int `json:"version"`
}

// PlanReferenceInput References an exact plan defaulting to the current active version.
type PlanReferenceInput struct {
	// Key The plan key.
	Key string `json:"key"`

	// Version The plan version.
	Version *int `json:"version,omitempty"`
}

// PlanReplaceUpdate Resource update operation model.
type PlanReplaceUpdate struct {
	// Alignment Alignment configuration for the plan.
	Alignment *Alignment `json:"alignment,omitempty"`

	// BillingCadence The default billing cadence for subscriptions using this plan.
	// Defines how often customers are billed using ISO8601 duration format.
	// Examples: "P1M" (monthly), "P3M" (quarterly), "P1Y" (annually).
	BillingCadence string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`

	// ProRatingConfig Default pro-rating configuration for subscriptions using this plan.
	ProRatingConfig *ProRatingConfig `json:"proRatingConfig,omitempty"`
}

// PlanStatus The status of a plan.
type PlanStatus string

// PlanSubscriptionChange Change subscription based on plan.
type PlanSubscriptionChange struct {
	// Alignment What alignment settings the subscription should have.
	Alignment *Alignment `json:"alignment,omitempty"`

	// Description Description for the Subscription.
	Description *string `json:"description,omitempty"`

	// Metadata Arbitrary metadata associated with the subscription.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name The name of the Subscription. If not provided the plan name is used.
	Name *string `json:"name,omitempty"`

	// Plan The plan reference to change to.
	Plan PlanReferenceInput `json:"plan"`

	// StartingPhase The key of the phase to start the subscription in.
	// If not provided, the subscription will start in the first phase of the plan.
	StartingPhase *string `json:"startingPhase,omitempty"`

	// Timing Timing configuration for the change, when the change should take effect.
	// For changing a subscription, the accepted values depend on the subscription configuration.
	Timing SubscriptionTiming `json:"timing"`
}

// PlanSubscriptionCreate Create subscription based on plan.
type PlanSubscriptionCreate struct {
	// Alignment What alignment settings the subscription should have.
	Alignment *Alignment `json:"alignment,omitempty"`

	// CustomerId The ID of the customer. Provide either the key or ID. Has presedence over the key.
	CustomerId *string `json:"customerId,omitempty"`

	// CustomerKey The key of the customer. Provide either the key or ID.
	CustomerKey *string `json:"customerKey,omitempty"`

	// Description Description for the Subscription.
	Description *string `json:"description,omitempty"`

	// Metadata Arbitrary metadata associated with the subscription.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name The name of the Subscription. If not provided the plan name is used.
	Name *string `json:"name,omitempty"`

	// Plan The plan reference to change to.
	Plan PlanReferenceInput `json:"plan"`

	// StartingPhase The key of the phase to start the subscription in.
	// If not provided, the subscription will start in the first phase of the plan.
	StartingPhase *string `json:"startingPhase,omitempty"`

	// Timing Timing configuration for the change, when the change should take effect.
	// The default is immediate.
	Timing *SubscriptionTiming `json:"timing,omitempty"`
}

// PortalToken A consumer portal token.
//
// Validator doesn't obey required for readOnly properties
// See: https://github.com/stoplightio/spectral/issues/1274
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed.
	AllowedMeterSlugs *[]string `json:"allowedMeterSlugs,omitempty"`

	// CreatedAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Expired   *bool      `json:"expired,omitempty"`

	// ExpiresAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      *string `json:"id,omitempty"`
	Subject string  `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// PreconditionFailedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type PreconditionFailedProblemResponse = UnexpectedProblemResponse

// Price Price.
// One of: flat, unit, or tiered.
type Price struct {
	union json.RawMessage
}

// PricePaymentTerm The payment term of a flat price.
// One of: in_advance or in_arrears.
type PricePaymentTerm string

// PriceTier A price tier.
// At least one price component is required in each tier.
type PriceTier struct {
	// FlatPrice The flat price component of the tier.
	FlatPrice *FlatPrice `json:"flatPrice"`

	// UnitPrice The unit price component of the tier.
	UnitPrice *UnitPrice `json:"unitPrice"`

	// UpToAmount Up to and including to this quantity will be contained in the tier.
	// If null, the tier is open-ended.
	UpToAmount *Numeric `json:"upToAmount,omitempty"`
}

// PriceType The type of the price.
type PriceType string

// ProRatingConfig Configuration for pro-rating behavior.
type ProRatingConfig struct {
	// Enabled Whether pro-rating is enabled for this plan.
	Enabled bool `json:"enabled"`

	// Mode How to handle pro-rating for billing period changes.
	Mode ProRatingMode `json:"mode"`
}

// ProRatingMode Pro-rating mode options for handling billing period changes.
type ProRatingMode string

// Progress Progress describes a progress of a task.
type Progress struct {
	// Failed Failed is the number of items that failed
	Failed uint64 `json:"failed"`

	// Success Success is the number of items that succeeded
	Success uint64 `json:"success"`

	// Total The total number of items to process
	Total uint64 `json:"total"`

	// UpdatedAt The time the progress was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// RateCard A rate card defines the pricing and entitlement of a feature or service.
type RateCard struct {
	union json.RawMessage
}

// RateCardBooleanEntitlement Entitlement template of a boolean entitlement.
type RateCardBooleanEntitlement struct {
	// Metadata Additional metadata for the feature.
	Metadata *Metadata                      `json:"metadata,omitempty"`
	Type     RateCardBooleanEntitlementType `json:"type"`
}

// RateCardBooleanEntitlementType defines model for RateCardBooleanEntitlement.Type.
type RateCardBooleanEntitlementType string

// RateCardEntitlement Entitlement templates are used to define the entitlements of a plan.
// Features are omitted from the entitlement template, as they are defined in the rate card.
type RateCardEntitlement struct {
	union json.RawMessage
}

// RateCardFlatFee A flat fee rate card defines a one-time purchase or a recurring fee.
type RateCardFlatFee struct {
	// BillingCadence The billing cadence of the rate card.
	// When null it means it is a one time fee.
	BillingCadence *string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discount of the rate card. For flat fee rate cards only percentage discounts are supported.
	// Only available when price is set.
	Discounts *Discounts `json:"discounts,omitempty"`

	// EntitlementTemplate The entitlement of the rate card.
	// Only available when featureKey is set.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *FlatPriceWithPaymentTerm `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardFlatFeeType `json:"type"`
}

// RateCardFlatFeeType The type of the RateCard.
type RateCardFlatFeeType string

// RateCardMeteredEntitlement The entitlement template with a metered entitlement.
type RateCardMeteredEntitlement struct {
	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool                          `json:"preserveOverageAtReset,omitempty"`
	Type                   RateCardMeteredEntitlementType `json:"type"`

	// UsagePeriod The interval of the metered entitlement.
	// Defaults to the billing cadence of the rate card.
	UsagePeriod *string `json:"usagePeriod,omitempty"`
}

// RateCardMeteredEntitlementType defines model for RateCardMeteredEntitlement.Type.
type RateCardMeteredEntitlementType string

// RateCardStaticEntitlement Entitlement template of a static entitlement.
type RateCardStaticEntitlement struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                     `json:"metadata,omitempty"`
	Type     RateCardStaticEntitlementType `json:"type"`
}

// RateCardStaticEntitlementType defines model for RateCardStaticEntitlement.Type.
type RateCardStaticEntitlementType string

// RateCardType The type of the rate card.
type RateCardType string

// RateCardUsageBased A usage-based rate card defines a price based on usage.
type RateCardUsageBased struct {
	// BillingCadence The billing cadence of the rate card.
	BillingCadence string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts of the rate card.
	//
	// Flat fee rate cards only support percentage discounts.
	Discounts *Discounts `json:"discounts,omitempty"`

	// EntitlementTemplate The entitlement of the rate card.
	// Only available when featureKey is set.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *RateCardUsageBasedPrice `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardUsageBasedType `json:"type"`
}

// RateCardUsageBasedType The type of the RateCard.
type RateCardUsageBasedType string

// RateCardUsageBasedPrice The price of the usage based rate card.
type RateCardUsageBasedPrice struct {
	union json.RawMessage
}

// RecurringPeriod Recurring period with an interval and an anchor.
type RecurringPeriod struct {
	// Anchor A date-time anchor to base the recurring period on.
	Anchor time.Time `json:"anchor"`

	// Interval The unit of time for the interval. Heuristically maps ISO duraitons to enum values or returns the ISO duration.
	Interval RecurringPeriodInterval `json:"interval"`

	// IntervalISO The unit of time for the interval in ISO8601 format.
	IntervalISO string `json:"intervalISO"`
}

// RecurringPeriodCreateInput Recurring period with an interval and an anchor.
type RecurringPeriodCreateInput struct {
	// Anchor A date-time anchor to base the recurring period on.
	Anchor *time.Time `json:"anchor,omitempty"`

	// Interval The unit of time for the interval.
	Interval RecurringPeriodInterval `json:"interval"`
}

// RecurringPeriodInterval Period duration for the recurrence
type RecurringPeriodInterval struct {
	union json.RawMessage
}

// RecurringPeriodInterval0 defines model for .
type RecurringPeriodInterval0 = string

// RecurringPeriodIntervalEnum The unit of time for the interval.
// One of: `day`, `week`, `month`, or `year`.
type RecurringPeriodIntervalEnum string

// RemovePhaseShifting The direction of the phase shift when a phase is removed.
type RemovePhaseShifting string

// ResetEntitlementUsageInput Reset parameters
type ResetEntitlementUsageInput struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now. The reset cannot be in the future. The provided value is truncated to the minute due to how historical meter data is stored.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`

	// PreserveOverage Determines whether the overage is preserved or forgiven, overriding the entitlement's default behavior.
	// - If true, the overage is preserved.
	// - If false, the overage is forgiven.
	PreserveOverage *bool `json:"preserveOverage,omitempty"`

	// RetainAnchor Determines whether the usage period anchor is retained or reset to the effectiveAt time.
	// - If true, the usage period anchor is retained.
	// - If false, the usage period anchor is reset to the effectiveAt time.
	RetainAnchor *bool `json:"retainAnchor,omitempty"`
}

// SandboxApp Sandbox app can be used for testing OpenMeter features.
//
// The app is not creating anything in external systems, thus it is safe to use for
// verifying OpenMeter features.
type SandboxApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// Type The app's type is Sandbox.
	Type SandboxAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SandboxAppType The app's type is Sandbox.
type SandboxAppType string

// SandboxAppReplaceUpdate Resource update operation model.
type SandboxAppReplaceUpdate struct {
	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Type The app's type is Sandbox.
	Type SandboxAppReplaceUpdateType `json:"type"`
}

// SandboxAppReplaceUpdateType The app's type is Sandbox.
type SandboxAppReplaceUpdateType string

// SandboxCustomerAppData Sandbox Customer App Data.
type SandboxCustomerAppData struct {
	// App The installed sandbox app this data belongs to.
	App *SandboxApp `json:"app,omitempty"`

	// Id The app ID.
	// If not provided, it will use the global default for the app type.
	Id *string `json:"id,omitempty"`

	// Type The app name.
	Type SandboxCustomerAppDataType `json:"type"`
}

// SandboxCustomerAppDataType The app name.
type SandboxCustomerAppDataType string

// ServiceUnavailableProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ServiceUnavailableProblemResponse = UnexpectedProblemResponse

// SortOrder The order direction.
type SortOrder string

// SpendCommitments Spending commitments.
// The customer is committed to spend at least the minimum amount and at most the maximum amount.
type SpendCommitments struct {
	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`
}

// StripeAPIKeyInput The Stripe API key input.
// Used to authenticate with the Stripe API.
type StripeAPIKeyInput struct {
	SecretAPIKey string `json:"secretAPIKey"`
}

// StripeApp A installed Stripe app object.
type StripeApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Livemode Livemode, true if the app is in production mode.
	Livemode bool `json:"livemode"`

	// MaskedAPIKey The masked API key.
	// Only shows the first 8 and last 3 characters.
	MaskedAPIKey string `json:"maskedAPIKey"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// StripeAccountId The Stripe account ID.
	StripeAccountId string `json:"stripeAccountId"`

	// Type The app's type is Stripe.
	Type StripeAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// StripeAppType The app's type is Stripe.
type StripeAppType string

// StripeAppReadOrCreateOrUpdateOrDeleteOrQuery A installed Stripe app object.
type StripeAppReadOrCreateOrUpdateOrDeleteOrQuery struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Livemode Livemode, true if the app is in production mode.
	Livemode bool `json:"livemode"`

	// MaskedAPIKey The masked API key.
	// Only shows the first 8 and last 3 characters.
	MaskedAPIKey string `json:"maskedAPIKey"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// SecretAPIKey The Stripe API key.
	SecretAPIKey *string `json:"secretAPIKey,omitempty"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// StripeAccountId The Stripe account ID.
	StripeAccountId string `json:"stripeAccountId"`

	// Type The app's type is Stripe.
	Type StripeAppReadOrCreateOrUpdateOrDeleteOrQueryType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// StripeAppReadOrCreateOrUpdateOrDeleteOrQueryType The app's type is Stripe.
type StripeAppReadOrCreateOrUpdateOrDeleteOrQueryType string

// StripeAppReplaceUpdate Resource update operation model.
type StripeAppReplaceUpdate struct {
	// Default Default for the app type
	// Only one app of each type can be default.
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// SecretAPIKey The Stripe API key.
	SecretAPIKey *string `json:"secretAPIKey,omitempty"`

	// Type The app's type is Stripe.
	Type StripeAppReplaceUpdateType `json:"type"`
}

// StripeAppReplaceUpdateType The app's type is Stripe.
type StripeAppReplaceUpdateType string

// StripeCheckoutSessionMode Stripe CheckoutSession.mode
type StripeCheckoutSessionMode string

// StripeCustomerAppData Stripe Customer App Data.
type StripeCustomerAppData struct {
	// App The installed stripe app this data belongs to.
	App *StripeApp `json:"app,omitempty"`

	// Id The app ID.
	// If not provided, it will use the global default for the app type.
	Id *string `json:"id,omitempty"`

	// StripeCustomerId The Stripe customer ID.
	StripeCustomerId string `json:"stripeCustomerId"`

	// StripeDefaultPaymentMethodId The Stripe default payment method ID.
	StripeDefaultPaymentMethodId *string `json:"stripeDefaultPaymentMethodId,omitempty"`

	// Type The app name.
	Type StripeCustomerAppDataType `json:"type"`
}

// StripeCustomerAppDataType The app name.
type StripeCustomerAppDataType string

// StripeCustomerAppDataCreateOrUpdateItem Stripe Customer App Data.
type StripeCustomerAppDataCreateOrUpdateItem struct {
	// Id The app ID.
	// If not provided, it will use the global default for the app type.
	Id *string `json:"id,omitempty"`

	// StripeCustomerId The Stripe customer ID.
	StripeCustomerId string `json:"stripeCustomerId"`

	// StripeDefaultPaymentMethodId The Stripe default payment method ID.
	StripeDefaultPaymentMethodId *string `json:"stripeDefaultPaymentMethodId,omitempty"`

	// Type The app name.
	Type StripeCustomerAppDataCreateOrUpdateItemType `json:"type"`
}

// StripeCustomerAppDataCreateOrUpdateItemType The app name.
type StripeCustomerAppDataCreateOrUpdateItemType string

// StripeTaxConfig The tax config for Stripe.
type StripeTaxConfig struct {
	// Code Product tax code.
	//
	// See: https://docs.stripe.com/tax/tax-codes
	Code string `json:"code"`
}

// StripeWebhookEvent Stripe webhook event.
type StripeWebhookEvent struct {
	// Created The event created timestamp.
	Created int32 `json:"created"`

	// Data The event data.
	Data struct {
		Object interface{} `json:"object"`
	} `json:"data"`

	// Id The event ID.
	Id string `json:"id"`

	// Livemode Live mode.
	Livemode bool `json:"livemode"`

	// Type The event type.
	Type string `json:"type"`
}

// StripeWebhookResponse Stripe webhook response.
type StripeWebhookResponse struct {
	// AppId ULID (Universally Unique Lexicographically Sortable Identifier).
	AppId string `json:"appId"`

	// CustomerId ULID (Universally Unique Lexicographically Sortable Identifier).
	CustomerId *string `json:"customerId,omitempty"`
	Message    *string `json:"message,omitempty"`

	// NamespaceId ULID (Universally Unique Lexicographically Sortable Identifier).
	NamespaceId string `json:"namespaceId"`
}

// Subject A subject is a unique identifier for a usage attribution by its key.
// Subjects only exist in the concept of metering.
// Subjects are optional to create and work as an enrichment for the subject key like displayName, metadata, etc.
// Subjects are useful when you are reporting usage events with your own database ID but want to enrich the subject with a human-readable name or metadata.
// For most use cases, a subject is equivalent to a customer.
type Subject struct {
	// CurrentPeriodEnd The end of the current period for the subject.
	// Deprecated:
	CurrentPeriodEnd *time.Time `json:"currentPeriodEnd,omitempty"`

	// CurrentPeriodStart The start of the current period for the subject.
	// Deprecated:
	CurrentPeriodStart *time.Time `json:"currentPeriodStart,omitempty"`

	// DisplayName A human-readable display name for the subject.
	DisplayName *string `json:"displayName"`

	// Id A unique identifier for the subject.
	Id string `json:"id"`

	// Key A unique, human-readable identifier for the subject.
	// This is typically a database ID or a customer key.
	Key string `json:"key"`

	// Metadata Metadata for the subject.
	Metadata *map[string]interface{} `json:"metadata"`

	// StripeCustomerId The Stripe customer ID for the subject.
	// Deprecated:
	StripeCustomerId *string `json:"stripeCustomerId"`
}

// SubjectUpsert A subject is a unique identifier for a user or entity.
type SubjectUpsert struct {
	// CurrentPeriodEnd The end of the current period for the subject.
	// Deprecated:
	CurrentPeriodEnd *time.Time `json:"currentPeriodEnd,omitempty"`

	// CurrentPeriodStart The start of the current period for the subject.
	// Deprecated:
	CurrentPeriodStart *time.Time `json:"currentPeriodStart,omitempty"`

	// DisplayName A human-readable display name for the subject.
	DisplayName *string `json:"displayName"`

	// Key A unique, human-readable identifier for the subject.
	// This is typically a database ID or a customer key.
	Key string `json:"key"`

	// Metadata Metadata for the subject.
	Metadata *map[string]interface{} `json:"metadata"`

	// StripeCustomerId The Stripe customer ID for the subject.
	// Deprecated:
	StripeCustomerId *string `json:"stripeCustomerId"`
}

// Subscription Subscription is an exact subscription instance.
type Subscription struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Alignment Alignment configuration for the plan.
	Alignment *Alignment `json:"alignment,omitempty"`

	// BillingCadence The billing cadence for the subscriptions.
	// Defines how often customers are billed using ISO8601 duration format.
	// Examples: "P1M" (monthly), "P3M" (quarterly), "P1Y" (annually).
	BillingCadence string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the subscription.
	// Will be revised once we add multi currency support.
	Currency CurrencyCode `json:"currency"`

	// CustomerId The customer ID of the subscription.
	CustomerId string `json:"customerId"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Plan The plan of the subscription.
	Plan *PlanReference `json:"plan,omitempty"`

	// ProRatingConfig The pro-rating configuration for the subscriptions.
	ProRatingConfig *ProRatingConfig `json:"proRatingConfig,omitempty"`

	// Status The status of the subscription.
	Status SubscriptionStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionAddon A subscription add-on, represents concrete instances of an add-on for a given subscription.
type SubscriptionAddon struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Addon Partially populated add-on properties.
	Addon struct {
		// Id The ID of the add-on.
		Id string `json:"id"`

		// InstanceType The instance type of the add-on.
		InstanceType AddonInstanceType `json:"instanceType"`

		// Key A semi-unique identifier for the resource.
		Key string `json:"key"`

		// Version The version of the Add-on which templates this instance.
		Version int `json:"version"`
	} `json:"addon"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Quantity The quantity of the add-on. Always 1 for single instance add-ons.
	Quantity int `json:"quantity"`

	// QuantityAt For which point in time the quantity was resolved to.
	QuantityAt time.Time `json:"quantityAt"`

	// RateCards The rate cards of the add-on.
	RateCards []SubscriptionAddonRateCard `json:"rateCards"`

	// SubscriptionId The ID of the subscription.
	SubscriptionId string `json:"subscriptionId"`

	// Timeline The timeline of the add-on. The returned periods are sorted and continuous.
	Timeline []SubscriptionAddonTimelineSegment `json:"timeline"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionAddonCreate A subscription add-on create body.
type SubscriptionAddonCreate struct {
	// Addon The add-on to create.
	Addon struct {
		// Id The ID of the add-on.
		Id string `json:"id"`
	} `json:"addon"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Quantity The quantity of the add-on. Always 1 for single instance add-ons.
	Quantity int `json:"quantity"`

	// Timing The timing of the operation. After the create or update, a new entry will be created in the timeline.
	Timing SubscriptionTiming `json:"timing"`
}

// SubscriptionAddonRateCard A rate card for a subscription add-on.
type SubscriptionAddonRateCard struct {
	// AffectedSubscriptionItemIds The IDs of the subscription items that this rate card belongs to.
	AffectedSubscriptionItemIds []string `json:"affectedSubscriptionItemIds"`

	// RateCard The rate card.
	RateCard RateCard `json:"rateCard"`
}

// SubscriptionAddonTimelineSegment A subscription add-on event.
type SubscriptionAddonTimelineSegment struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Quantity The quantity of the add-on for the given period.
	Quantity int `json:"quantity"`
}

// SubscriptionAddonUpdate Resource create or update operation model.
type SubscriptionAddonUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name *string `json:"name,omitempty"`

	// Quantity The quantity of the add-on. Always 1 for single instance add-ons.
	Quantity *int `json:"quantity,omitempty"`

	// Timing The timing of the operation. After the create or update, a new entry will be created in the timeline.
	Timing *SubscriptionTiming `json:"timing,omitempty"`
}

// SubscriptionAlignment Alignment details enriched with the current billing period.
type SubscriptionAlignment struct {
	// BillablesMustAlign Whether all Billable items and RateCards must align.
	// Alignment means the Price's BillingCadence must align for both duration and anchor time.
	BillablesMustAlign *bool `json:"billablesMustAlign,omitempty"`

	// CurrentAlignedBillingPeriod The current billing period. Only has value if the subscription is aligned and active.
	CurrentAlignedBillingPeriod *Period `json:"currentAlignedBillingPeriod,omitempty"`
}

// SubscriptionChange Change a subscription.
type SubscriptionChange struct {
	union json.RawMessage
}

// SubscriptionChangeResponseBody Response body for subscription change.
type SubscriptionChangeResponseBody struct {
	// Current The current subscription before the change.
	Current Subscription `json:"current"`

	// Next The new state of the subscription after the change.
	Next SubscriptionExpanded `json:"next"`
}

// SubscriptionCreate Create a subscription.
type SubscriptionCreate struct {
	union json.RawMessage
}

// SubscriptionEdit Subscription edit input.
type SubscriptionEdit struct {
	// Customizations Batch processing commands for manipulating running subscriptions.
	// The key format is `/phases/{phaseKey}` or `/phases/{phaseKey}/items/{itemKey}`.
	Customizations []SubscriptionEditOperation `json:"customizations"`

	// Timing Whether the billing period should be restarted.Timing configuration to allow for the changes to take effect at different times.
	Timing *SubscriptionTiming `json:"timing,omitempty"`
}

// SubscriptionEditOperation The operation to be performed on the subscription.
type SubscriptionEditOperation struct {
	union json.RawMessage
}

// SubscriptionExpanded Expanded subscription
type SubscriptionExpanded struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// Alignment Alignment details enriched with the current billing period.
	Alignment *SubscriptionAlignment `json:"alignment,omitempty"`

	// BillingCadence The billing cadence for the subscriptions.
	// Defines how often customers are billed using ISO8601 duration format.
	// Examples: "P1M" (monthly), "P3M" (quarterly), "P1Y" (annually).
	BillingCadence string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the subscription.
	// Will be revised once we add multi currency support.
	Currency CurrencyCode `json:"currency"`

	// CustomerId The customer ID of the subscription.
	CustomerId string `json:"customerId"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The phases of the subscription.
	Phases []SubscriptionPhaseExpanded `json:"phases"`

	// Plan The plan of the subscription.
	Plan *PlanReference `json:"plan,omitempty"`

	// ProRatingConfig The pro-rating configuration for the subscriptions.
	ProRatingConfig *ProRatingConfig `json:"proRatingConfig,omitempty"`

	// Status The status of the subscription.
	Status SubscriptionStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionItem The actual contents of the Subscription, what the user gets, what they pay, etc...
type SubscriptionItem struct {
	// ActiveFrom The cadence start of the resource.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The cadence end of the resource.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// BillingCadence The billing cadence of the rate card.
	// When null, the rate card is a one-time purchase.
	BillingCadence *string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts applied to the rate card.
	Discounts *Discounts `json:"discounts,omitempty"`

	// FeatureKey The feature's key (if present).
	FeatureKey *string `json:"featureKey,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Included Describes what access is gained via the SubscriptionItem
	Included *SubscriptionItemIncluded `json:"included,omitempty"`

	// Key The identifier of the RateCard.
	// SubscriptionItem/RateCard can be identified, it has a reference:
	//
	// 1. If a Feature is associated with the SubscriptionItem, it is identified by the Feature
	// 1.1 It can be an ID reference, for an exact version of the Feature (Features can change across versions)
	// 1.2 It can be a Key reference, which always refers to the latest (active or inactive) version of a Feature
	//
	// 2. If a Feature is not associated with the SubscriptionItem, it is referenced by the Price
	//
	// We say “referenced by the Price” regardless of how a price itself is referenced, it colloquially makes sense to say “paying the same price for the same thing”. In practice this should be derived from what's printed on the invoice line-item.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *RateCardUsageBasedPrice `json:"price"`

	// TaxConfig The tax config of the Subscription Item.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionItemIncluded Included contents like Entitlement, or the Feature.
type SubscriptionItemIncluded struct {
	// Entitlement The entitlement of the Subscription Item.
	Entitlement *Entitlement `json:"entitlement,omitempty"`

	// Feature The feature the customer is entitled to use.
	Feature Feature `json:"feature"`
}

// SubscriptionPaginatedResponse Paginated response
type SubscriptionPaginatedResponse struct {
	// Items The items in the current page.
	Items []Subscription `json:"items"`

	// Page The page index.
	Page int `json:"page"`

	// PageSize The maximum number of items per page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// SubscriptionPhase Subscription phase, analogous to plan phases.
type SubscriptionPhase struct {
	// ActiveFrom The time from which the phase is active.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The until which the Phase is active.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *Discounts `json:"discounts,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Key A locally unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionPhaseCreate Subscription phase create input.
type SubscriptionPhaseCreate struct {
	// Description The description of the phase.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *Discounts `json:"discounts,omitempty"`

	// Duration The intended duration of the new phase.
	// Duration is required when the phase will not be the last phase.
	Duration *string `json:"duration,omitempty"`

	// Key A locally unique identifier for the phase.
	Key string `json:"key"`

	// Name The name of the phase.
	Name string `json:"name"`

	// StartAfter Interval after the subscription starts to transition to the phase.
	// When null, the phase starts immediately after the subscription starts.
	StartAfter *string `json:"startAfter"`
}

// SubscriptionPhaseExpanded Expanded subscription phase
type SubscriptionPhaseExpanded struct {
	// ActiveFrom The time from which the phase is active.
	ActiveFrom time.Time `json:"activeFrom"`

	// ActiveTo The until which the Phase is active.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *Discounts `json:"discounts,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// ItemTimelines Includes all versions of the items on each key, including all edits, scheduled changes, etc...
	ItemTimelines map[string][]SubscriptionItem `json:"itemTimelines"`

	// Items The items of the phase. The structure is flattened to better conform to the Plan API.
	// The timelines are flattened according to the following rules:
	// - for the current phase, the `items` contains only the active item for each key
	// - for past phases, the `items` contains only the last item for each key
	// - for future phases, the `items` contains only the first version of the item for each key
	Items []SubscriptionItem `json:"items"`

	// Key A locally unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionStatus Subscription status.
type SubscriptionStatus string

// SubscriptionTiming Subscription edit timing defined when the changes should take effect.
// If the provided configuration is not supported by the subscription, an error will be returned.
type SubscriptionTiming struct {
	union json.RawMessage
}

// SubscriptionTiming1 [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
type SubscriptionTiming1 = time.Time

// SubscriptionTimingEnum Subscription edit timing.
// When immediate, the requested changes take effect immediately.
// When nextBillingCycle, the requested changes take effect at the next billing cycle.
type SubscriptionTimingEnum string

// TaxBehavior Tax behavior.
//
// This enum is used to specify whether tax is included in the price or excluded from the price.
type TaxBehavior string

// TaxConfig Set of provider specific tax configs.
type TaxConfig struct {
	// Behavior Tax behavior.
	//
	// If not specified the billing profile is used to determine the tax behavior.
	// If not specified in the billing profile, the provider's default behavior is used.
	Behavior *TaxBehavior `json:"behavior,omitempty"`

	// CustomInvoicing Custom invoicing tax config.
	CustomInvoicing *CustomInvoicingTaxConfig `json:"customInvoicing,omitempty"`

	// Stripe Stripe tax config.
	Stripe *StripeTaxConfig `json:"stripe,omitempty"`
}

// TieredPrice Tiered price.
type TieredPrice struct {
	// Mode Defines if the tiering mode is volume-based or graduated:
	// - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
	// - In `graduated` tiering, pricing can change as the quantity grows.
	Mode TieredPriceMode `json:"mode"`

	// Tiers The tiers of the tiered price.
	// At least one price component is required in each tier.
	Tiers []PriceTier `json:"tiers"`

	// Type The type of the price.
	//
	// One of: flat, unit, or tiered.
	Type TieredPriceType `json:"type"`
}

// TieredPriceType The type of the price.
//
// One of: flat, unit, or tiered.
type TieredPriceType string

// TieredPriceMode The mode of the tiered price.
type TieredPriceMode string

// TieredPriceWithCommitments Tiered price with spend commitments.
type TieredPriceWithCommitments struct {
	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// Mode Defines if the tiering mode is volume-based or graduated:
	// - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
	// - In `graduated` tiering, pricing can change as the quantity grows.
	Mode TieredPriceMode `json:"mode"`

	// Tiers The tiers of the tiered price.
	// At least one price component is required in each tier.
	Tiers []PriceTier `json:"tiers"`

	// Type The type of the price.
	//
	// One of: flat, unit, or tiered.
	Type TieredPriceWithCommitmentsType `json:"type"`
}

// TieredPriceWithCommitmentsType The type of the price.
//
// One of: flat, unit, or tiered.
type TieredPriceWithCommitmentsType string

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = UnexpectedProblemResponse

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = models.StatusProblem

// UnitPrice Unit price.
type UnitPrice struct {
	// Amount The amount of the unit price.
	Amount Numeric `json:"amount"`

	// Type The type of the price.
	Type UnitPriceType `json:"type"`
}

// UnitPriceType The type of the price.
type UnitPriceType string

// UnitPriceWithCommitments Unit price with spend commitments.
type UnitPriceWithCommitments struct {
	// Amount The amount of the unit price.
	Amount Numeric `json:"amount"`

	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// Type The type of the price.
	Type UnitPriceWithCommitmentsType `json:"type"`
}

// UnitPriceWithCommitmentsType The type of the price.
type UnitPriceWithCommitmentsType string

// ValidationError Validation errors providing details about compatibility issues between a plan and its add-on.
type ValidationError struct {
	// Attributes Additional attributes.
	Attributes *Annotations `json:"attributes,omitempty"`

	// Code The machine readable description of the error.
	Code string `json:"code"`

	// Field The path to the field.
	Field string `json:"field"`

	// Message The human readable description of the error.
	Message string `json:"message"`
}

// ValidationIssue ValidationIssue captures any validation issues related to the invoice.
//
// Issues with severity "critical" will prevent the invoice from being issued.
type ValidationIssue struct {
	// Code Machine indentifiable code for the issue, if available.
	Code *string `json:"code,omitempty"`

	// Component Component reporting the issue.
	Component string `json:"component"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Field The field that the issue is related to, if available in JSON path format.
	Field *string `json:"field,omitempty"`

	// Id ID of the charge or discount.
	Id string `json:"id"`

	// Message A human-readable description of the issue.
	Message string `json:"message"`

	// Metadata Additional context for the issue.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Severity The severity of the issue.
	Severity ValidationIssueSeverity `json:"severity"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// ValidationIssueSeverity ValidationIssueSeverity describes the severity of a validation issue.
//
// Issues with severity "critical" will prevent the invoice from being issued.
type ValidationIssueSeverity string

// VoidInvoiceActionCreate InvoiceVoidAction describes how to handle the voided line items.
type VoidInvoiceActionCreate struct {
	// Action The action to take on the line items.
	Action VoidInvoiceLineActionCreate `json:"action"`

	// Percentage How much of the total line items to be voided? (e.g. 100% means all charges are voided)
	Percentage Percentage `json:"percentage"`
}

// VoidInvoiceActionCreateItem InvoiceVoidAction describes how to handle the voided line items.
type VoidInvoiceActionCreateItem struct {
	// Action The action to take on the line items.
	Action VoidInvoiceLineActionCreateItem `json:"action"`

	// Percentage How much of the total line items to be voided? (e.g. 100% means all charges are voided)
	Percentage Percentage `json:"percentage"`
}

// VoidInvoiceActionInput Request to void an invoice
type VoidInvoiceActionInput struct {
	// Action The action to take on the voided line items.
	Action VoidInvoiceActionCreate `json:"action"`

	// Overrides Per line item overrides for the action.
	//
	// If not specified, the `action` will be applied to all line items.
	Overrides *[]VoidInvoiceActionLineOverride `json:"overrides"`

	// Reason The reason for voiding the invoice.
	Reason string `json:"reason"`
}

// VoidInvoiceActionLineOverride VoidInvoiceLineOverride describes how to handle a specific line item in the invoice when voiding.
type VoidInvoiceActionLineOverride struct {
	// Action The action to take on the line item.
	Action VoidInvoiceActionCreateItem `json:"action"`

	// LineId The line item ID to override.
	LineId string `json:"lineId"`
}

// VoidInvoiceLineActionCreate VoidInvoiceLineAction describes how to handle a specific line item in the invoice when voiding.
type VoidInvoiceLineActionCreate struct {
	union json.RawMessage
}

// VoidInvoiceLineActionCreateItem VoidInvoiceLineAction describes how to handle a specific line item in the invoice when voiding.
type VoidInvoiceLineActionCreateItem struct {
	union json.RawMessage
}

// VoidInvoiceLineActionType VoidInvoiceLineActionType describes how to handle the voidied line item in the invoice.
type VoidInvoiceLineActionType string

// VoidInvoiceLineDiscardAction VoidInvoiceLineDiscardAction describes how to handle the voidied line item in the invoice.
type VoidInvoiceLineDiscardAction struct {
	// Type The action to take on the line item.
	Type VoidInvoiceLineDiscardActionType `json:"type"`
}

// VoidInvoiceLineDiscardActionType The action to take on the line item.
type VoidInvoiceLineDiscardActionType string

// VoidInvoiceLinePendingActionCreate VoidInvoiceLinePendingAction describes how to handle the voidied line item in the invoice.
type VoidInvoiceLinePendingActionCreate struct {
	// NextInvoiceAt The time at which the line item should be invoiced again.
	//
	// If not provided, the line item will be re-invoiced now.
	NextInvoiceAt *time.Time `json:"nextInvoiceAt,omitempty"`

	// Type The action to take on the line item.
	Type VoidInvoiceLinePendingActionCreateType `json:"type"`
}

// VoidInvoiceLinePendingActionCreateType The action to take on the line item.
type VoidInvoiceLinePendingActionCreateType string

// VoidInvoiceLinePendingActionCreateItem VoidInvoiceLinePendingAction describes how to handle the voidied line item in the invoice.
type VoidInvoiceLinePendingActionCreateItem struct {
	// NextInvoiceAt The time at which the line item should be invoiced again.
	//
	// If not provided, the line item will be re-invoiced now.
	NextInvoiceAt *time.Time `json:"nextInvoiceAt,omitempty"`

	// Type The action to take on the line item.
	Type VoidInvoiceLinePendingActionCreateItemType `json:"type"`
}

// VoidInvoiceLinePendingActionCreateItemType The action to take on the line item.
type VoidInvoiceLinePendingActionCreateItemType string

// WindowSize Aggregation window size.
type WindowSize string

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory struct {
	// BurndownHistory Grant burndown history.
	BurndownHistory []GrantBurnDownHistorySegment `json:"burndownHistory"`

	// WindowedHistory The windowed balance history.
	// - It only returns rows for windows where there was usage.
	// - The windows are inclusive at their start and exclusive at their end.
	// - The last window may be smaller than the window size and is inclusive at both ends.
	WindowedHistory []BalanceHistoryWindow `json:"windowedHistory"`
}

// AddonOrderByOrderingOrder The order direction.
type AddonOrderByOrderingOrder = SortOrder

// AddonOrderByOrderingOrderBy Order by options for add-ons.
type AddonOrderByOrderingOrderBy = AddonOrderBy

// BillingProfileCustomerOverrideOrderByOrderingOrder The order direction.
type BillingProfileCustomerOverrideOrderByOrderingOrder = SortOrder

// BillingProfileCustomerOverrideOrderByOrderingOrderBy Order by options for customers.
type BillingProfileCustomerOverrideOrderByOrderingOrderBy = BillingProfileCustomerOverrideOrderBy

// BillingProfileListCustomerOverridesParamsBillingProfile defines model for BillingProfileListCustomerOverridesParams.billingProfile.
type BillingProfileListCustomerOverridesParamsBillingProfile = []string

// BillingProfileListCustomerOverridesParamsCustomerId defines model for BillingProfileListCustomerOverridesParams.customerId.
type BillingProfileListCustomerOverridesParamsCustomerId = []string

// BillingProfileListCustomerOverridesParamsCustomerKey defines model for BillingProfileListCustomerOverridesParams.customerKey.
type BillingProfileListCustomerOverridesParamsCustomerKey = string

// BillingProfileListCustomerOverridesParamsCustomerName defines model for BillingProfileListCustomerOverridesParams.customerName.
type BillingProfileListCustomerOverridesParamsCustomerName = string

// BillingProfileListCustomerOverridesParamsCustomerPrimaryEmail defines model for BillingProfileListCustomerOverridesParams.customerPrimaryEmail.
type BillingProfileListCustomerOverridesParamsCustomerPrimaryEmail = string

// BillingProfileListCustomerOverridesParamsExpand defines model for BillingProfileListCustomerOverridesParams.expand.
type BillingProfileListCustomerOverridesParamsExpand = []BillingProfileCustomerOverrideExpand

// BillingProfileListCustomerOverridesParamsIncludeAllCustomers defines model for BillingProfileListCustomerOverridesParams.includeAllCustomers.
type BillingProfileListCustomerOverridesParamsIncludeAllCustomers = bool

// BillingProfileOrderByOrderingOrder The order direction.
type BillingProfileOrderByOrderingOrder = SortOrder

// BillingProfileOrderByOrderingOrderBy BillingProfileOrderBy specifies the ordering options for profiles
type BillingProfileOrderByOrderingOrderBy = BillingProfileOrderBy

// CursorPaginationCursor defines model for CursorPagination.cursor.
type CursorPaginationCursor = string

// CursorPaginationLimit defines model for CursorPagination.limit.
type CursorPaginationLimit = int

// CustomerOrderByOrderingOrder The order direction.
type CustomerOrderByOrderingOrder = SortOrder

// CustomerOrderByOrderingOrderBy Order by options for customers.
type CustomerOrderByOrderingOrderBy = CustomerOrderBy

// EntitlementOrderByOrderingOrder The order direction.
type EntitlementOrderByOrderingOrder = SortOrder

// EntitlementOrderByOrderingOrderBy Order by options for entitlements.
type EntitlementOrderByOrderingOrderBy = EntitlementOrderBy

// FeatureOrderByOrderingOrder The order direction.
type FeatureOrderByOrderingOrder = SortOrder

// FeatureOrderByOrderingOrderBy Order by options for features.
type FeatureOrderByOrderingOrderBy = FeatureOrderBy

// GrantOrderByOrderingOrder The order direction.
type GrantOrderByOrderingOrder = SortOrder

// GrantOrderByOrderingOrderBy Order by options for grants.
type GrantOrderByOrderingOrderBy = GrantOrderBy

// InvoiceListParamsCreatedAfter defines model for InvoiceListParams.createdAfter.
type InvoiceListParamsCreatedAfter = time.Time

// InvoiceListParamsCreatedBefore defines model for InvoiceListParams.createdBefore.
type InvoiceListParamsCreatedBefore = time.Time

// InvoiceListParamsCustomers defines model for InvoiceListParams.customers.
type InvoiceListParamsCustomers = []string

// InvoiceListParamsExpand defines model for InvoiceListParams.expand.
type InvoiceListParamsExpand = []InvoiceExpand

// InvoiceListParamsExtendedStatuses defines model for InvoiceListParams.extendedStatuses.
type InvoiceListParamsExtendedStatuses = []string

// InvoiceListParamsIncludeDeleted defines model for InvoiceListParams.includeDeleted.
type InvoiceListParamsIncludeDeleted = bool

// InvoiceListParamsIssuedAfter defines model for InvoiceListParams.issuedAfter.
type InvoiceListParamsIssuedAfter = time.Time

// InvoiceListParamsIssuedBefore defines model for InvoiceListParams.issuedBefore.
type InvoiceListParamsIssuedBefore = time.Time

// InvoiceListParamsPeriodStartAfter defines model for InvoiceListParams.periodStartAfter.
type InvoiceListParamsPeriodStartAfter = time.Time

// InvoiceListParamsPeriodStartBefore defines model for InvoiceListParams.periodStartBefore.
type InvoiceListParamsPeriodStartBefore = time.Time

// InvoiceListParamsStatuses defines model for InvoiceListParams.statuses.
type InvoiceListParamsStatuses = []InvoiceStatus

// InvoiceOrderByOrderingOrder The order direction.
type InvoiceOrderByOrderingOrder = SortOrder

// InvoiceOrderByOrderingOrderBy InvoiceOrderBy specifies the ordering options for invoice listing.
type InvoiceOrderByOrderingOrderBy = InvoiceOrderBy

// LimitOffsetLimit defines model for LimitOffset.limit.
type LimitOffsetLimit = int

// LimitOffsetOffset defines model for LimitOffset.offset.
type LimitOffsetOffset = int

// MarketplaceApiKeyInstallRequestType Type of the app.
type MarketplaceApiKeyInstallRequestType = AppType

// MarketplaceInstallRequestType Type of the app.
type MarketplaceInstallRequestType = AppType

// MarketplaceOAuth2InstallAuthorizeRequestType Type of the app.
type MarketplaceOAuth2InstallAuthorizeRequestType = AppType

// MeterOrderByOrderingOrder The order direction.
type MeterOrderByOrderingOrder = SortOrder

// MeterOrderByOrderingOrderBy Order by options for meters.
type MeterOrderByOrderingOrderBy = MeterOrderBy

// MeterQueryClientId defines model for MeterQuery.clientId.
type MeterQueryClientId = string

// MeterQueryFilterGroupBy defines model for MeterQuery.filterGroupBy.
type MeterQueryFilterGroupBy map[string]string

// MeterQueryFrom defines model for MeterQuery.from.
type MeterQueryFrom = time.Time

// MeterQueryGroupBy defines model for MeterQuery.groupBy.
type MeterQueryGroupBy = []string

// MeterQuerySubject defines model for MeterQuery.subject.
type MeterQuerySubject = []string

// MeterQueryTo defines model for MeterQuery.to.
type MeterQueryTo = time.Time

// MeterQueryWindowSize Aggregation window size.
type MeterQueryWindowSize = WindowSize

// MeterQueryWindowTimeZone defines model for MeterQuery.windowTimeZone.
type MeterQueryWindowTimeZone = string

// NotificationChannelOrderByOrderingOrder The order direction.
type NotificationChannelOrderByOrderingOrder = SortOrder

// NotificationChannelOrderByOrderingOrderBy Order by options for notification channels.
type NotificationChannelOrderByOrderingOrderBy = NotificationChannelOrderBy

// NotificationEventOrderByOrderingOrder The order direction.
type NotificationEventOrderByOrderingOrder = SortOrder

// NotificationEventOrderByOrderingOrderBy Order by options for notification channels.
type NotificationEventOrderByOrderingOrderBy = NotificationEventOrderBy

// NotificationRuleOrderByOrderingOrder The order direction.
type NotificationRuleOrderByOrderingOrder = SortOrder

// NotificationRuleOrderByOrderingOrderBy Order by options for notification channels.
type NotificationRuleOrderByOrderingOrderBy = NotificationRuleOrderBy

// OAuth2AuthorizationCodeGrantErrorParamsError OAuth2 authorization code grant error types.
type OAuth2AuthorizationCodeGrantErrorParamsError = OAuth2AuthorizationCodeGrantErrorType

// OAuth2AuthorizationCodeGrantErrorParamsErrorDescription defines model for OAuth2AuthorizationCodeGrantErrorParams.error_description.
type OAuth2AuthorizationCodeGrantErrorParamsErrorDescription = string

// OAuth2AuthorizationCodeGrantErrorParamsErrorUri defines model for OAuth2AuthorizationCodeGrantErrorParams.error_uri.
type OAuth2AuthorizationCodeGrantErrorParamsErrorUri = string

// OAuth2AuthorizationCodeGrantSuccessParamsCode defines model for OAuth2AuthorizationCodeGrantSuccessParams.code.
type OAuth2AuthorizationCodeGrantSuccessParamsCode = string

// OAuth2AuthorizationCodeGrantSuccessParamsState defines model for OAuth2AuthorizationCodeGrantSuccessParams.state.
type OAuth2AuthorizationCodeGrantSuccessParamsState = string

// PaginationPage defines model for Pagination.page.
type PaginationPage = int

// PaginationPageSize defines model for Pagination.pageSize.
type PaginationPageSize = int

// PlanAddonOrderByOrderingOrder The order direction.
type PlanAddonOrderByOrderingOrder = SortOrder

// PlanAddonOrderByOrderingOrderBy Order by options for plan add-on assignments.
type PlanAddonOrderByOrderingOrderBy = PlanAddonOrderBy

// PlanOrderByOrderingOrder The order direction.
type PlanOrderByOrderingOrder = SortOrder

// PlanOrderByOrderingOrderBy Order by options for plans.
type PlanOrderByOrderingOrderBy = PlanOrderBy

// QueryCustomerGet defines model for queryCustomerGet.
type QueryCustomerGet = []CustomerExpand

// QueryCustomerListExpand defines model for queryCustomerList.expand.
type QueryCustomerListExpand = []CustomerExpand

// QueryCustomerListIncludeDeleted defines model for queryCustomerList.includeDeleted.
type QueryCustomerListIncludeDeleted = bool

// QueryCustomerListKey defines model for queryCustomerList.key.
type QueryCustomerListKey = string

// QueryCustomerListName defines model for queryCustomerList.name.
type QueryCustomerListName = string

// QueryCustomerListPlanKey defines model for queryCustomerList.planKey.
type QueryCustomerListPlanKey = string

// QueryCustomerListPrimaryEmail defines model for queryCustomerList.primaryEmail.
type QueryCustomerListPrimaryEmail = string

// QueryCustomerListSubject defines model for queryCustomerList.subject.
type QueryCustomerListSubject = string

// QueryCustomerListType Type of the app.
type QueryCustomerListType = AppType

// QueryMeterListIncludeDeleted defines model for queryMeterList.includeDeleted.
type QueryMeterListIncludeDeleted = bool

// ListAddonsParams defines parameters for ListAddons.
type ListAddonsParams struct {
	// IncludeDeleted Include deleted add-ons in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Id Filter by addon.id attribute
	Id *[]string `form:"id,omitempty" json:"id,omitempty"`

	// Key Filter by addon.key attribute
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// KeyVersion Filter by addon.key and addon.version attributes
	KeyVersion *map[string][]int `json:"keyVersion,omitempty"`

	// Status Only return add-ons with the given status.
	//
	// Usage:
	// - `?status=active`: return only the currently active add-ons
	// - `?status=draft`: return only the draft add-ons
	// - `?status=archived`: return only the archived add-ons
	Status *[]AddonStatus `form:"status,omitempty" json:"status,omitempty"`

	// Currency Filter by addon.currency attribute
	Currency *[]CurrencyCode `form:"currency,omitempty" json:"currency,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *AddonOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *AddonOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetAddonParams defines parameters for GetAddon.
type GetAddonParams struct {
	// IncludeLatest Include latest version of the add-on instead of the version in active state.
	//
	// Usage: `?includeLatest=true`
	IncludeLatest *bool `form:"includeLatest,omitempty" json:"includeLatest,omitempty"`
}

// ListAppsParams defines parameters for ListApps.
type ListAppsParams struct {
	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ListBillingProfileCustomerOverridesParams defines parameters for ListBillingProfileCustomerOverrides.
type ListBillingProfileCustomerOverridesParams struct {
	// BillingProfile Filter by billing profile.
	BillingProfile *BillingProfileListCustomerOverridesParamsBillingProfile `form:"billingProfile,omitempty" json:"billingProfile,omitempty"`

	// IncludeAllCustomers Include customers without customer overrides.
	//
	// If set to false only the customers specifically associated with a billing profile will be returned.
	//
	// If set to true, in case of the default billing profile, all customers will be returned.
	IncludeAllCustomers *BillingProfileListCustomerOverridesParamsIncludeAllCustomers `form:"includeAllCustomers,omitempty" json:"includeAllCustomers,omitempty"`

	// CustomerId Filter by customer id.
	CustomerId *BillingProfileListCustomerOverridesParamsCustomerId `form:"customerId,omitempty" json:"customerId,omitempty"`

	// CustomerName Filter by customer name.
	CustomerName *BillingProfileListCustomerOverridesParamsCustomerName `form:"customerName,omitempty" json:"customerName,omitempty"`

	// CustomerKey Filter by customer key
	CustomerKey *BillingProfileListCustomerOverridesParamsCustomerKey `form:"customerKey,omitempty" json:"customerKey,omitempty"`

	// CustomerPrimaryEmail Filter by customer primary email
	CustomerPrimaryEmail *BillingProfileListCustomerOverridesParamsCustomerPrimaryEmail `form:"customerPrimaryEmail,omitempty" json:"customerPrimaryEmail,omitempty"`

	// Expand Expand the response with additional details.
	Expand *BillingProfileListCustomerOverridesParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Order The order direction.
	Order *BillingProfileCustomerOverrideOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *BillingProfileCustomerOverrideOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetBillingProfileCustomerOverrideParams defines parameters for GetBillingProfileCustomerOverride.
type GetBillingProfileCustomerOverrideParams struct {
	Expand *[]BillingProfileCustomerOverrideExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// ListInvoicesParams defines parameters for ListInvoices.
type ListInvoicesParams struct {
	// Statuses Filter by the invoice status.
	Statuses *InvoiceListParamsStatuses `form:"statuses,omitempty" json:"statuses,omitempty"`

	// ExtendedStatuses Filter by invoice extended statuses
	ExtendedStatuses *InvoiceListParamsExtendedStatuses `form:"extendedStatuses,omitempty" json:"extendedStatuses,omitempty"`

	// IssuedAfter Filter by invoice issued time.
	// Inclusive.
	IssuedAfter *InvoiceListParamsIssuedAfter `form:"issuedAfter,omitempty" json:"issuedAfter,omitempty"`

	// IssuedBefore Filter by invoice issued time.
	// Inclusive.
	IssuedBefore *InvoiceListParamsIssuedBefore `form:"issuedBefore,omitempty" json:"issuedBefore,omitempty"`

	// PeriodStartAfter Filter by period start time.
	// Inclusive.
	PeriodStartAfter *InvoiceListParamsPeriodStartAfter `form:"periodStartAfter,omitempty" json:"periodStartAfter,omitempty"`

	// PeriodStartBefore Filter by period start time.
	// Inclusive.
	PeriodStartBefore *InvoiceListParamsPeriodStartBefore `form:"periodStartBefore,omitempty" json:"periodStartBefore,omitempty"`

	// CreatedAfter Filter by invoice created time.
	// Inclusive.
	CreatedAfter *InvoiceListParamsCreatedAfter `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore Filter by invoice created time.
	// Inclusive.
	CreatedBefore *InvoiceListParamsCreatedBefore `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// Expand What parts of the list output to expand in listings
	Expand *InvoiceListParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Customers Filter by customer ID
	Customers *InvoiceListParamsCustomers `form:"customers,omitempty" json:"customers,omitempty"`

	// IncludeDeleted Include deleted invoices
	IncludeDeleted *InvoiceListParamsIncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *InvoiceOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *InvoiceOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetInvoiceParams defines parameters for GetInvoice.
type GetInvoiceParams struct {
	Expand              *[]InvoiceExpand `form:"expand,omitempty" json:"expand,omitempty"`
	IncludeDeletedLines *bool            `form:"includeDeletedLines,omitempty" json:"includeDeletedLines,omitempty"`
}

// ListBillingProfilesParams defines parameters for ListBillingProfiles.
type ListBillingProfilesParams struct {
	IncludeArchived *bool                   `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
	Expand          *[]BillingProfileExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *BillingProfileOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *BillingProfileOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetBillingProfileParams defines parameters for GetBillingProfile.
type GetBillingProfileParams struct {
	Expand *[]BillingProfileExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// ListCustomersParams defines parameters for ListCustomers.
type ListCustomersParams struct {
	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *CustomerOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *CustomerOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted customers.
	IncludeDeleted *QueryCustomerListIncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Key Filter customers by key.
	// Case-sensitive exact match.
	Key *QueryCustomerListKey `form:"key,omitempty" json:"key,omitempty"`

	// Name Filter customers by name.
	// Case-insensitive partial match.
	Name *QueryCustomerListName `form:"name,omitempty" json:"name,omitempty"`

	// PrimaryEmail Filter customers by primary email.
	// Case-insensitive partial match.
	PrimaryEmail *QueryCustomerListPrimaryEmail `form:"primaryEmail,omitempty" json:"primaryEmail,omitempty"`

	// Subject Filter customers by usage attribution subject.
	// Case-insensitive partial match.
	Subject *QueryCustomerListSubject `form:"subject,omitempty" json:"subject,omitempty"`

	// PlanKey Filter customers by the plan key of their susbcription.
	PlanKey *QueryCustomerListPlanKey `form:"planKey,omitempty" json:"planKey,omitempty"`

	// Expand What parts of the list output to expand in listings
	Expand *QueryCustomerListExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetCustomerParams defines parameters for GetCustomer.
type GetCustomerParams struct {
	// Expand What parts of the customer output to expand
	Expand *QueryCustomerGet `form:"expand,omitempty" json:"expand,omitempty"`
}

// ListCustomerAppDataParams defines parameters for ListCustomerAppData.
type ListCustomerAppDataParams struct {
	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Type Filter customer data by app type.
	Type *QueryCustomerListType `form:"type,omitempty" json:"type,omitempty"`
}

// UpsertCustomerAppDataJSONBody defines parameters for UpsertCustomerAppData.
type UpsertCustomerAppDataJSONBody = []CustomerAppDataCreateOrUpdateItem

// GetCustomerEntitlementValueParams defines parameters for GetCustomerEntitlementValue.
type GetCustomerEntitlementValueParams struct {
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCustomerSubscriptionsParams defines parameters for ListCustomerSubscriptions.
type ListCustomerSubscriptionsParams struct {
	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// EntitlementType Filtering by multiple entitlement types.
	//
	// Usage: `?entitlementType=metered&entitlementType=boolean`
	EntitlementType *[]EntitlementType `form:"entitlementType,omitempty" json:"entitlementType,omitempty"`

	// ExcludeInactive Exclude inactive entitlements in the response (those scheduled for later or earlier)
	ExcludeInactive *bool `form:"excludeInactive,omitempty" json:"excludeInactive,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *EntitlementOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *EntitlementOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// ClientId Client ID
	// Useful to track progress of a query.
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`

	// IngestedAtFrom Start date-time in RFC 3339 format.
	//
	// Inclusive.
	IngestedAtFrom *time.Time `form:"ingestedAtFrom,omitempty" json:"ingestedAtFrom,omitempty"`

	// IngestedAtTo End date-time in RFC 3339 format.
	//
	// Inclusive.
	IngestedAtTo *time.Time `form:"ingestedAtTo,omitempty" json:"ingestedAtTo,omitempty"`

	// Id The event ID.
	//
	// Accepts partial ID.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Subject The event subject.
	//
	// Accepts partial subject.
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// MeterSlug Filter by meterSlug
	MeterSlug *[]string `form:"meterSlug,omitempty" json:"meterSlug,omitempty"`

	// IncludeArchived Filter by meterGroupByFilters
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *FeatureOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *FeatureOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// IncludeDeleted Include deleted
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *GrantOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *GrantOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListMarketplaceListingsParams defines parameters for ListMarketplaceListings.
type ListMarketplaceListingsParams struct {
	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// MarketplaceAppInstallJSONBody defines parameters for MarketplaceAppInstall.
type MarketplaceAppInstallJSONBody struct {
	// Name Name of the application to install.
	//
	// If not set defaults to the marketplace item's description.
	Name *string `json:"name,omitempty"`
}

// MarketplaceAppAPIKeyInstallJSONBody defines parameters for MarketplaceAppAPIKeyInstall.
type MarketplaceAppAPIKeyInstallJSONBody struct {
	// ApiKey The API key for the provider.
	// For example, the Stripe API key.
	ApiKey string `json:"apiKey"`

	// Name Name of the application to install.
	//
	// If not set defaults to the marketplace item's description.
	Name *string `json:"name,omitempty"`
}

// MarketplaceOAuth2InstallAuthorizeParams defines parameters for MarketplaceOAuth2InstallAuthorize.
type MarketplaceOAuth2InstallAuthorizeParams struct {
	// State Required if the "state" parameter was present in the client authorization request.
	// The exact value received from the client:
	//
	// Unique, randomly generated, opaque, and non-guessable string that is sent
	// when starting an authentication request and validated when processing the response.
	State *OAuth2AuthorizationCodeGrantSuccessParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Code Authorization code which the client will later exchange for an access token.
	// Required with the success response.
	Code *OAuth2AuthorizationCodeGrantSuccessParamsCode `form:"code,omitempty" json:"code,omitempty"`

	// Error Error code.
	// Required with the error response.
	Error *OAuth2AuthorizationCodeGrantErrorParamsError `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription Optional human-readable text providing additional information,
	// used to assist the client developer in understanding the error that occurred.
	ErrorDescription *OAuth2AuthorizationCodeGrantErrorParamsErrorDescription `form:"error_description,omitempty" json:"error_description,omitempty"`

	// ErrorUri Optional uri identifying a human-readable web page with
	// information about the error, used to provide the client
	// developer with additional information about the error
	ErrorUri *OAuth2AuthorizationCodeGrantErrorParamsErrorUri `form:"error_uri,omitempty" json:"error_uri,omitempty"`
}

// ListMetersParams defines parameters for ListMeters.
type ListMetersParams struct {
	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *MeterOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *MeterOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted meters.
	IncludeDeleted *QueryMeterListIncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// ClientId Client ID
	// Useful to track progress of a query.
	ClientId *MeterQueryClientId `form:"clientId,omitempty" json:"clientId,omitempty"`

	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	//
	// For example: ?from=2025-01-01T00%3A00%3A00.000Z
	From *MeterQueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	//
	// For example: ?to=2025-02-01T00%3A00%3A00.000Z
	To *MeterQueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	//
	// For example: ?windowSize=DAY
	WindowSize *MeterQueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	//
	// For example: ?windowTimeZone=UTC
	WindowTimeZone *MeterQueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// For example: ?subject=customer-1&subject=customer-2
	Subject *MeterQuerySubject `form:"subject,omitempty" json:"subject,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	//
	// For example: ?filterGroupBy[vendor]=openai&filterGroupBy[model]=gpt-4-turbo
	FilterGroupBy *MeterQueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	//
	// For example: ?groupBy=subject&groupBy=model
	GroupBy *MeterQueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListNotificationChannelsParams defines parameters for ListNotificationChannels.
type ListNotificationChannelsParams struct {
	// IncludeDeleted Include deleted notification channels in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// IncludeDisabled Include disabled notification channels in response.
	//
	// Usage: `?includeDisabled=false`
	IncludeDisabled *bool `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationChannelOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationChannelOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListNotificationEventsParams defines parameters for ListNotificationEvents.
type ListNotificationEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Feature Filtering by multiple feature ids or keys.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subject ids or keys.
	//
	// Usage: `?subject=subject-1&subject=subject-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Rule Filtering by multiple rule ids.
	//
	// Usage: `?rule=01J8J2XYZ2N5WBYK09EDZFBSZM&rule=01J8J4R4VZH180KRKQ63NB2VA5`
	Rule *[]string `form:"rule,omitempty" json:"rule,omitempty"`

	// Channel Filtering by multiple channel ids.
	//
	// Usage: `?channel=01J8J4RXH778XB056JS088PCYT&channel=01J8J4S1R1G9EVN62RG23A9M6J`
	Channel *[]string `form:"channel,omitempty" json:"channel,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationEventOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationEventOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListNotificationRulesParams defines parameters for ListNotificationRules.
type ListNotificationRulesParams struct {
	// IncludeDeleted Include deleted notification rules in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// IncludeDisabled Include disabled notification rules in response.
	//
	// Usage: `?includeDisabled=false`
	IncludeDisabled *bool `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// Feature Filtering by multiple feature ids/keys.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Channel Filtering by multiple notifiaction channel ids.
	//
	// Usage: `?channel=01ARZ3NDEKTSV4RRFFQ69G5FAV&channel=01J8J2Y5X4NNGQS32CF81W95E3`
	Channel *[]string `form:"channel,omitempty" json:"channel,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationRuleOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationRuleOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListPlansParams defines parameters for ListPlans.
type ListPlansParams struct {
	// IncludeDeleted Include deleted plans in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Id Filter by plan.id attribute
	Id *[]string `form:"id,omitempty" json:"id,omitempty"`

	// Key Filter by plan.key attribute
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// KeyVersion Filter by plan.key and plan.version attributes
	KeyVersion *map[string][]int `json:"keyVersion,omitempty"`

	// Status Only return plans with the given status.
	//
	// Usage:
	// - `?status=active`: return only the currently active plan
	// - `?status=draft`: return only the draft plan
	// - `?status=archived`: return only the archived plans
	Status *[]PlanStatus `form:"status,omitempty" json:"status,omitempty"`

	// Currency Filter by plan.currency attribute
	Currency *[]CurrencyCode `form:"currency,omitempty" json:"currency,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *PlanOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *PlanOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetPlanParams defines parameters for GetPlan.
type GetPlanParams struct {
	// IncludeLatest Include latest version of the Plan instead of the version in active state.
	//
	// Usage: `?includeLatest=true`
	IncludeLatest *bool `form:"includeLatest,omitempty" json:"includeLatest,omitempty"`
}

// ListPlanAddonsParams defines parameters for ListPlanAddons.
type ListPlanAddonsParams struct {
	// IncludeDeleted Include deleted plan add-on assignments.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Id Filter by addon.id attribute.
	Id *[]string `form:"id,omitempty" json:"id,omitempty"`

	// Key Filter by addon.key attribute.
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// KeyVersion Filter by addon.key and addon.version attributes.
	KeyVersion *map[string][]int `json:"keyVersion,omitempty"`

	// Page Page index.
	//
	// Default is 1.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *PlanAddonOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *PlanAddonOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// ClientId Client ID
	// Useful to track progress of a query.
	ClientId *MeterQueryClientId `form:"clientId,omitempty" json:"clientId,omitempty"`

	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	//
	// For example: ?from=2025-01-01T00%3A00%3A00.000Z
	From *MeterQueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	//
	// For example: ?to=2025-02-01T00%3A00%3A00.000Z
	To *MeterQueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	//
	// For example: ?windowSize=DAY
	WindowSize *MeterQueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	//
	// For example: ?windowTimeZone=UTC
	WindowTimeZone *MeterQueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	//
	// For example: ?filterGroupBy[vendor]=openai&filterGroupBy[model]=gpt-4-turbo
	FilterGroupBy *MeterQueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	//
	// For example: ?groupBy=subject&groupBy=model
	GroupBy *MeterQueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []SubjectUpsert

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	IncludeDeleted *bool         `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
	OrderBy        *GrantOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetEntitlementValueParams defines parameters for GetEntitlementValue.
type GetEntitlementValueParams struct {
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to the last reset. Gets truncated to the granularity of the underlying meter.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Windowsize
	WindowSize WindowSize `form:"windowSize" json:"windowSize"`

	// WindowTimeZone The timezone used when calculating the windows.
	WindowTimeZone *string `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
}

// GetSubscriptionParams defines parameters for GetSubscription.
type GetSubscriptionParams struct {
	// At The time at which the subscription should be queried. If not provided the current time is used.
	At *time.Time `form:"at,omitempty" json:"at,omitempty"`
}

// CancelSubscriptionJSONBody defines parameters for CancelSubscription.
type CancelSubscriptionJSONBody struct {
	// Timing If not provided the subscription is canceled immediately.
	Timing *SubscriptionTiming `json:"timing,omitempty"`
}

// MigrateSubscriptionJSONBody defines parameters for MigrateSubscription.
type MigrateSubscriptionJSONBody struct {
	// StartingPhase The key of the phase to start the subscription in.
	// If not provided, the subscription will start in the first phase of the plan.
	StartingPhase *string `json:"startingPhase,omitempty"`

	// TargetVersion The version of the plan to migrate to.
	// If not provided, the subscription will migrate to the latest version of the current plan.
	TargetVersion *int `json:"targetVersion,omitempty"`

	// Timing Timing configuration for the migration, when the migration should take effect.
	// If not supported by the subscription, 400 will be returned.
	Timing *SubscriptionTiming `json:"timing,omitempty"`
}

// ListEventsV2Params defines parameters for ListEventsV2.
type ListEventsV2Params struct {
	// Cursor The cursor after which to start the pagination.
	Cursor *CursorPaginationCursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit The limit of the pagination.
	Limit *CursorPaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// ClientId Client ID
	// Useful to track progress of a query.
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`

	// Filter The filter for the events encoded as JSON string.
	Filter *struct {
		// Id A filter for a string field.
		Id *FilterString `json:"id,omitempty"`

		// IngestedAt A filter for a time field.
		IngestedAt *FilterTime `json:"ingestedAt,omitempty"`

		// Source A filter for a string field.
		Source *FilterString `json:"source,omitempty"`

		// Subject A filter for a string field.
		Subject *FilterString `json:"subject,omitempty"`

		// Time A filter for a time field.
		Time *FilterTime `json:"time,omitempty"`

		// Type A filter for a string field.
		Type *FilterString `json:"type,omitempty"`
	} `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateAddonJSONRequestBody defines body for CreateAddon for application/json ContentType.
type CreateAddonJSONRequestBody = AddonCreate

// UpdateAddonJSONRequestBody defines body for UpdateAddon for application/json ContentType.
type UpdateAddonJSONRequestBody = AddonReplaceUpdate

// AppCustomInvoicingDraftSynchronizedJSONRequestBody defines body for AppCustomInvoicingDraftSynchronized for application/json ContentType.
type AppCustomInvoicingDraftSynchronizedJSONRequestBody = CustomInvoicingDraftSynchronizedRequest

// AppCustomInvoicingIssuingSynchronizedJSONRequestBody defines body for AppCustomInvoicingIssuingSynchronized for application/json ContentType.
type AppCustomInvoicingIssuingSynchronizedJSONRequestBody = CustomInvoicingFinalizedRequest

// AppCustomInvoicingUpdatePaymentStatusJSONRequestBody defines body for AppCustomInvoicingUpdatePaymentStatus for application/json ContentType.
type AppCustomInvoicingUpdatePaymentStatusJSONRequestBody = CustomInvoicingUpdatePaymentStatusRequest

// UpdateAppJSONRequestBody defines body for UpdateApp for application/json ContentType.
type UpdateAppJSONRequestBody = AppReplaceUpdate

// UpdateStripeAPIKeyJSONRequestBody defines body for UpdateStripeAPIKey for application/json ContentType.
type UpdateStripeAPIKeyJSONRequestBody = StripeAPIKeyInput

// AppStripeWebhookJSONRequestBody defines body for AppStripeWebhook for application/json ContentType.
type AppStripeWebhookJSONRequestBody = StripeWebhookEvent

// UpsertBillingProfileCustomerOverrideJSONRequestBody defines body for UpsertBillingProfileCustomerOverride for application/json ContentType.
type UpsertBillingProfileCustomerOverrideJSONRequestBody = BillingProfileCustomerOverrideCreate

// CreatePendingInvoiceLineJSONRequestBody defines body for CreatePendingInvoiceLine for application/json ContentType.
type CreatePendingInvoiceLineJSONRequestBody = InvoicePendingLineCreateInput

// SimulateInvoiceJSONRequestBody defines body for SimulateInvoice for application/json ContentType.
type SimulateInvoiceJSONRequestBody = InvoiceSimulationInput

// InvoicePendingLinesActionJSONRequestBody defines body for InvoicePendingLinesAction for application/json ContentType.
type InvoicePendingLinesActionJSONRequestBody = InvoicePendingLinesActionInput

// UpdateInvoiceJSONRequestBody defines body for UpdateInvoice for application/json ContentType.
type UpdateInvoiceJSONRequestBody = InvoiceReplaceUpdate

// VoidInvoiceActionJSONRequestBody defines body for VoidInvoiceAction for application/json ContentType.
type VoidInvoiceActionJSONRequestBody = VoidInvoiceActionInput

// CreateBillingProfileJSONRequestBody defines body for CreateBillingProfile for application/json ContentType.
type CreateBillingProfileJSONRequestBody = BillingProfileCreate

// UpdateBillingProfileJSONRequestBody defines body for UpdateBillingProfile for application/json ContentType.
type UpdateBillingProfileJSONRequestBody = BillingProfileReplaceUpdateWithWorkflow

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = CustomerCreate

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = CustomerReplaceUpdate

// UpsertCustomerAppDataJSONRequestBody defines body for UpsertCustomerAppData for application/json ContentType.
type UpsertCustomerAppDataJSONRequestBody = UpsertCustomerAppDataJSONBody

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// IngestEventsJSONRequestBody defines body for IngestEvents for application/json ContentType.
type IngestEventsJSONRequestBody = IngestEventsBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// MarketplaceAppInstallJSONRequestBody defines body for MarketplaceAppInstall for application/json ContentType.
type MarketplaceAppInstallJSONRequestBody MarketplaceAppInstallJSONBody

// MarketplaceAppAPIKeyInstallJSONRequestBody defines body for MarketplaceAppAPIKeyInstall for application/json ContentType.
type MarketplaceAppAPIKeyInstallJSONRequestBody MarketplaceAppAPIKeyInstallJSONBody

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = MeterCreate

// UpdateMeterJSONRequestBody defines body for UpdateMeter for application/json ContentType.
type UpdateMeterJSONRequestBody = MeterUpdate

// QueryMeterPostJSONRequestBody defines body for QueryMeterPost for application/json ContentType.
type QueryMeterPostJSONRequestBody = MeterQueryRequest

// CreateNotificationChannelJSONRequestBody defines body for CreateNotificationChannel for application/json ContentType.
type CreateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// UpdateNotificationChannelJSONRequestBody defines body for UpdateNotificationChannel for application/json ContentType.
type UpdateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// CreateNotificationRuleJSONRequestBody defines body for CreateNotificationRule for application/json ContentType.
type CreateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// UpdateNotificationRuleJSONRequestBody defines body for UpdateNotificationRule for application/json ContentType.
type UpdateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// CreatePlanJSONRequestBody defines body for CreatePlan for application/json ContentType.
type CreatePlanJSONRequestBody = PlanCreate

// UpdatePlanJSONRequestBody defines body for UpdatePlan for application/json ContentType.
type UpdatePlanJSONRequestBody = PlanReplaceUpdate

// CreatePlanAddonJSONRequestBody defines body for CreatePlanAddon for application/json ContentType.
type CreatePlanAddonJSONRequestBody = PlanAddonCreate

// UpdatePlanAddonJSONRequestBody defines body for UpdatePlanAddon for application/json ContentType.
type UpdatePlanAddonJSONRequestBody = PlanAddonReplaceUpdate

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// CreateStripeCheckoutSessionJSONRequestBody defines body for CreateStripeCheckoutSession for application/json ContentType.
type CreateStripeCheckoutSessionJSONRequestBody = CreateStripeCheckoutSessionRequest

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody = EntitlementCreateInputs

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// OverrideEntitlementJSONRequestBody defines body for OverrideEntitlement for application/json ContentType.
type OverrideEntitlementJSONRequestBody = EntitlementCreateInputs

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody = ResetEntitlementUsageInput

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = SubscriptionCreate

// EditSubscriptionJSONRequestBody defines body for EditSubscription for application/json ContentType.
type EditSubscriptionJSONRequestBody = SubscriptionEdit

// CreateSubscriptionAddonJSONRequestBody defines body for CreateSubscriptionAddon for application/json ContentType.
type CreateSubscriptionAddonJSONRequestBody = SubscriptionAddonCreate

// UpdateSubscriptionAddonJSONRequestBody defines body for UpdateSubscriptionAddon for application/json ContentType.
type UpdateSubscriptionAddonJSONRequestBody = SubscriptionAddonUpdate

// CancelSubscriptionJSONRequestBody defines body for CancelSubscription for application/json ContentType.
type CancelSubscriptionJSONRequestBody CancelSubscriptionJSONBody

// ChangeSubscriptionJSONRequestBody defines body for ChangeSubscription for application/json ContentType.
type ChangeSubscriptionJSONRequestBody = SubscriptionChange

// MigrateSubscriptionJSONRequestBody defines body for MigrateSubscription for application/json ContentType.
type MigrateSubscriptionJSONRequestBody MigrateSubscriptionJSONBody

// AsStripeApp returns the union data inside the App as a StripeApp
func (t App) AsStripeApp() (StripeApp, error) {
	var body StripeApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeApp overwrites any union data inside the App as the provided StripeApp
func (t *App) FromStripeApp(v StripeApp) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeApp performs a merge with any union data inside the App, using the provided StripeApp
func (t *App) MergeStripeApp(v StripeApp) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxApp returns the union data inside the App as a SandboxApp
func (t App) AsSandboxApp() (SandboxApp, error) {
	var body SandboxApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxApp overwrites any union data inside the App as the provided SandboxApp
func (t *App) FromSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxApp performs a merge with any union data inside the App, using the provided SandboxApp
func (t *App) MergeSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomInvoicingApp returns the union data inside the App as a CustomInvoicingApp
func (t App) AsCustomInvoicingApp() (CustomInvoicingApp, error) {
	var body CustomInvoicingApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomInvoicingApp overwrites any union data inside the App as the provided CustomInvoicingApp
func (t *App) FromCustomInvoicingApp(v CustomInvoicingApp) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomInvoicingApp performs a merge with any union data inside the App, using the provided CustomInvoicingApp
func (t *App) MergeCustomInvoicingApp(v CustomInvoicingApp) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t App) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t App) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "custom_invoicing":
		return t.AsCustomInvoicingApp()
	case "sandbox":
		return t.AsSandboxApp()
	case "stripe":
		return t.AsStripeApp()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t App) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *App) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStripeAppReadOrCreateOrUpdateOrDeleteOrQuery returns the union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery as a StripeAppReadOrCreateOrUpdateOrDeleteOrQuery
func (t AppReadOrCreateOrUpdateOrDeleteOrQuery) AsStripeAppReadOrCreateOrUpdateOrDeleteOrQuery() (StripeAppReadOrCreateOrUpdateOrDeleteOrQuery, error) {
	var body StripeAppReadOrCreateOrUpdateOrDeleteOrQuery
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeAppReadOrCreateOrUpdateOrDeleteOrQuery overwrites any union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery as the provided StripeAppReadOrCreateOrUpdateOrDeleteOrQuery
func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) FromStripeAppReadOrCreateOrUpdateOrDeleteOrQuery(v StripeAppReadOrCreateOrUpdateOrDeleteOrQuery) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeAppReadOrCreateOrUpdateOrDeleteOrQuery performs a merge with any union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery, using the provided StripeAppReadOrCreateOrUpdateOrDeleteOrQuery
func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) MergeStripeAppReadOrCreateOrUpdateOrDeleteOrQuery(v StripeAppReadOrCreateOrUpdateOrDeleteOrQuery) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxApp returns the union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery as a SandboxApp
func (t AppReadOrCreateOrUpdateOrDeleteOrQuery) AsSandboxApp() (SandboxApp, error) {
	var body SandboxApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxApp overwrites any union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery as the provided SandboxApp
func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) FromSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxApp performs a merge with any union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery, using the provided SandboxApp
func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) MergeSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomInvoicingApp returns the union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery as a CustomInvoicingApp
func (t AppReadOrCreateOrUpdateOrDeleteOrQuery) AsCustomInvoicingApp() (CustomInvoicingApp, error) {
	var body CustomInvoicingApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomInvoicingApp overwrites any union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery as the provided CustomInvoicingApp
func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) FromCustomInvoicingApp(v CustomInvoicingApp) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomInvoicingApp performs a merge with any union data inside the AppReadOrCreateOrUpdateOrDeleteOrQuery, using the provided CustomInvoicingApp
func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) MergeCustomInvoicingApp(v CustomInvoicingApp) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AppReadOrCreateOrUpdateOrDeleteOrQuery) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AppReadOrCreateOrUpdateOrDeleteOrQuery) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "custom_invoicing":
		return t.AsCustomInvoicingApp()
	case "sandbox":
		return t.AsSandboxApp()
	case "stripe":
		return t.AsStripeAppReadOrCreateOrUpdateOrDeleteOrQuery()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AppReadOrCreateOrUpdateOrDeleteOrQuery) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AppReadOrCreateOrUpdateOrDeleteOrQuery) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStripeAppReplaceUpdate returns the union data inside the AppReplaceUpdate as a StripeAppReplaceUpdate
func (t AppReplaceUpdate) AsStripeAppReplaceUpdate() (StripeAppReplaceUpdate, error) {
	var body StripeAppReplaceUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeAppReplaceUpdate overwrites any union data inside the AppReplaceUpdate as the provided StripeAppReplaceUpdate
func (t *AppReplaceUpdate) FromStripeAppReplaceUpdate(v StripeAppReplaceUpdate) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeAppReplaceUpdate performs a merge with any union data inside the AppReplaceUpdate, using the provided StripeAppReplaceUpdate
func (t *AppReplaceUpdate) MergeStripeAppReplaceUpdate(v StripeAppReplaceUpdate) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxAppReplaceUpdate returns the union data inside the AppReplaceUpdate as a SandboxAppReplaceUpdate
func (t AppReplaceUpdate) AsSandboxAppReplaceUpdate() (SandboxAppReplaceUpdate, error) {
	var body SandboxAppReplaceUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxAppReplaceUpdate overwrites any union data inside the AppReplaceUpdate as the provided SandboxAppReplaceUpdate
func (t *AppReplaceUpdate) FromSandboxAppReplaceUpdate(v SandboxAppReplaceUpdate) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxAppReplaceUpdate performs a merge with any union data inside the AppReplaceUpdate, using the provided SandboxAppReplaceUpdate
func (t *AppReplaceUpdate) MergeSandboxAppReplaceUpdate(v SandboxAppReplaceUpdate) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomInvoicingAppReplaceUpdate returns the union data inside the AppReplaceUpdate as a CustomInvoicingAppReplaceUpdate
func (t AppReplaceUpdate) AsCustomInvoicingAppReplaceUpdate() (CustomInvoicingAppReplaceUpdate, error) {
	var body CustomInvoicingAppReplaceUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomInvoicingAppReplaceUpdate overwrites any union data inside the AppReplaceUpdate as the provided CustomInvoicingAppReplaceUpdate
func (t *AppReplaceUpdate) FromCustomInvoicingAppReplaceUpdate(v CustomInvoicingAppReplaceUpdate) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomInvoicingAppReplaceUpdate performs a merge with any union data inside the AppReplaceUpdate, using the provided CustomInvoicingAppReplaceUpdate
func (t *AppReplaceUpdate) MergeCustomInvoicingAppReplaceUpdate(v CustomInvoicingAppReplaceUpdate) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AppReplaceUpdate) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AppReplaceUpdate) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "custom_invoicing":
		return t.AsCustomInvoicingAppReplaceUpdate()
	case "sandbox":
		return t.AsSandboxAppReplaceUpdate()
	case "stripe":
		return t.AsStripeAppReplaceUpdate()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AppReplaceUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AppReplaceUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDiscountReasonMaximumSpend returns the union data inside the BillingDiscountReason as a DiscountReasonMaximumSpend
func (t BillingDiscountReason) AsDiscountReasonMaximumSpend() (DiscountReasonMaximumSpend, error) {
	var body DiscountReasonMaximumSpend
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscountReasonMaximumSpend overwrites any union data inside the BillingDiscountReason as the provided DiscountReasonMaximumSpend
func (t *BillingDiscountReason) FromDiscountReasonMaximumSpend(v DiscountReasonMaximumSpend) error {
	v.Type = "maximum_spend"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscountReasonMaximumSpend performs a merge with any union data inside the BillingDiscountReason, using the provided DiscountReasonMaximumSpend
func (t *BillingDiscountReason) MergeDiscountReasonMaximumSpend(v DiscountReasonMaximumSpend) error {
	v.Type = "maximum_spend"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscountReasonRatecardPercentage returns the union data inside the BillingDiscountReason as a DiscountReasonRatecardPercentage
func (t BillingDiscountReason) AsDiscountReasonRatecardPercentage() (DiscountReasonRatecardPercentage, error) {
	var body DiscountReasonRatecardPercentage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscountReasonRatecardPercentage overwrites any union data inside the BillingDiscountReason as the provided DiscountReasonRatecardPercentage
func (t *BillingDiscountReason) FromDiscountReasonRatecardPercentage(v DiscountReasonRatecardPercentage) error {
	v.Type = "ratecard_percentage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscountReasonRatecardPercentage performs a merge with any union data inside the BillingDiscountReason, using the provided DiscountReasonRatecardPercentage
func (t *BillingDiscountReason) MergeDiscountReasonRatecardPercentage(v DiscountReasonRatecardPercentage) error {
	v.Type = "ratecard_percentage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscountReasonRatecardUsage returns the union data inside the BillingDiscountReason as a DiscountReasonRatecardUsage
func (t BillingDiscountReason) AsDiscountReasonRatecardUsage() (DiscountReasonRatecardUsage, error) {
	var body DiscountReasonRatecardUsage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscountReasonRatecardUsage overwrites any union data inside the BillingDiscountReason as the provided DiscountReasonRatecardUsage
func (t *BillingDiscountReason) FromDiscountReasonRatecardUsage(v DiscountReasonRatecardUsage) error {
	v.Type = "ratecard_usage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscountReasonRatecardUsage performs a merge with any union data inside the BillingDiscountReason, using the provided DiscountReasonRatecardUsage
func (t *BillingDiscountReason) MergeDiscountReasonRatecardUsage(v DiscountReasonRatecardUsage) error {
	v.Type = "ratecard_usage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingDiscountReason) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingDiscountReason) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "maximum_spend":
		return t.AsDiscountReasonMaximumSpend()
	case "ratecard_percentage":
		return t.AsDiscountReasonRatecardPercentage()
	case "ratecard_usage":
		return t.AsDiscountReasonRatecardUsage()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingDiscountReason) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingDiscountReason) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingProfileApps returns the union data inside the BillingProfileAppsOrReference as a BillingProfileApps
func (t BillingProfileAppsOrReference) AsBillingProfileApps() (BillingProfileApps, error) {
	var body BillingProfileApps
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingProfileApps overwrites any union data inside the BillingProfileAppsOrReference as the provided BillingProfileApps
func (t *BillingProfileAppsOrReference) FromBillingProfileApps(v BillingProfileApps) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingProfileApps performs a merge with any union data inside the BillingProfileAppsOrReference, using the provided BillingProfileApps
func (t *BillingProfileAppsOrReference) MergeBillingProfileApps(v BillingProfileApps) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingProfileAppReferences returns the union data inside the BillingProfileAppsOrReference as a BillingProfileAppReferences
func (t BillingProfileAppsOrReference) AsBillingProfileAppReferences() (BillingProfileAppReferences, error) {
	var body BillingProfileAppReferences
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingProfileAppReferences overwrites any union data inside the BillingProfileAppsOrReference as the provided BillingProfileAppReferences
func (t *BillingProfileAppsOrReference) FromBillingProfileAppReferences(v BillingProfileAppReferences) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingProfileAppReferences performs a merge with any union data inside the BillingProfileAppsOrReference, using the provided BillingProfileAppReferences
func (t *BillingProfileAppsOrReference) MergeBillingProfileAppReferences(v BillingProfileAppReferences) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingProfileAppsOrReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingProfileAppsOrReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerId returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a CustomerId
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomerId() (CustomerId, error) {
	var body CustomerId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerId overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided CustomerId
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomerId(v CustomerId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerId performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided CustomerId
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomerId(v CustomerId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerKey returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a CustomerKey
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomerKey() (CustomerKey, error) {
	var body CustomerKey
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerKey overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided CustomerKey
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomerKey(v CustomerKey) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerKey performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided CustomerKey
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomerKey(v CustomerKey) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerCreate returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a CustomerCreate
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomerCreate() (CustomerCreate, error) {
	var body CustomerCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerCreate overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided CustomerCreate
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomerCreate(v CustomerCreate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerCreate performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided CustomerCreate
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomerCreate(v CustomerCreate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateStripeCheckoutSessionRequest_Customer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateStripeCheckoutSessionRequest_Customer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStripeCustomerAppData returns the union data inside the CustomerAppData as a StripeCustomerAppData
func (t CustomerAppData) AsStripeCustomerAppData() (StripeCustomerAppData, error) {
	var body StripeCustomerAppData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeCustomerAppData overwrites any union data inside the CustomerAppData as the provided StripeCustomerAppData
func (t *CustomerAppData) FromStripeCustomerAppData(v StripeCustomerAppData) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeCustomerAppData performs a merge with any union data inside the CustomerAppData, using the provided StripeCustomerAppData
func (t *CustomerAppData) MergeStripeCustomerAppData(v StripeCustomerAppData) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxCustomerAppData returns the union data inside the CustomerAppData as a SandboxCustomerAppData
func (t CustomerAppData) AsSandboxCustomerAppData() (SandboxCustomerAppData, error) {
	var body SandboxCustomerAppData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxCustomerAppData overwrites any union data inside the CustomerAppData as the provided SandboxCustomerAppData
func (t *CustomerAppData) FromSandboxCustomerAppData(v SandboxCustomerAppData) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxCustomerAppData performs a merge with any union data inside the CustomerAppData, using the provided SandboxCustomerAppData
func (t *CustomerAppData) MergeSandboxCustomerAppData(v SandboxCustomerAppData) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomInvoicingCustomerAppData returns the union data inside the CustomerAppData as a CustomInvoicingCustomerAppData
func (t CustomerAppData) AsCustomInvoicingCustomerAppData() (CustomInvoicingCustomerAppData, error) {
	var body CustomInvoicingCustomerAppData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomInvoicingCustomerAppData overwrites any union data inside the CustomerAppData as the provided CustomInvoicingCustomerAppData
func (t *CustomerAppData) FromCustomInvoicingCustomerAppData(v CustomInvoicingCustomerAppData) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomInvoicingCustomerAppData performs a merge with any union data inside the CustomerAppData, using the provided CustomInvoicingCustomerAppData
func (t *CustomerAppData) MergeCustomInvoicingCustomerAppData(v CustomInvoicingCustomerAppData) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomerAppData) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CustomerAppData) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "custom_invoicing":
		return t.AsCustomInvoicingCustomerAppData()
	case "sandbox":
		return t.AsSandboxCustomerAppData()
	case "stripe":
		return t.AsStripeCustomerAppData()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CustomerAppData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomerAppData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStripeCustomerAppDataCreateOrUpdateItem returns the union data inside the CustomerAppDataCreateOrUpdateItem as a StripeCustomerAppDataCreateOrUpdateItem
func (t CustomerAppDataCreateOrUpdateItem) AsStripeCustomerAppDataCreateOrUpdateItem() (StripeCustomerAppDataCreateOrUpdateItem, error) {
	var body StripeCustomerAppDataCreateOrUpdateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeCustomerAppDataCreateOrUpdateItem overwrites any union data inside the CustomerAppDataCreateOrUpdateItem as the provided StripeCustomerAppDataCreateOrUpdateItem
func (t *CustomerAppDataCreateOrUpdateItem) FromStripeCustomerAppDataCreateOrUpdateItem(v StripeCustomerAppDataCreateOrUpdateItem) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeCustomerAppDataCreateOrUpdateItem performs a merge with any union data inside the CustomerAppDataCreateOrUpdateItem, using the provided StripeCustomerAppDataCreateOrUpdateItem
func (t *CustomerAppDataCreateOrUpdateItem) MergeStripeCustomerAppDataCreateOrUpdateItem(v StripeCustomerAppDataCreateOrUpdateItem) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxCustomerAppData returns the union data inside the CustomerAppDataCreateOrUpdateItem as a SandboxCustomerAppData
func (t CustomerAppDataCreateOrUpdateItem) AsSandboxCustomerAppData() (SandboxCustomerAppData, error) {
	var body SandboxCustomerAppData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxCustomerAppData overwrites any union data inside the CustomerAppDataCreateOrUpdateItem as the provided SandboxCustomerAppData
func (t *CustomerAppDataCreateOrUpdateItem) FromSandboxCustomerAppData(v SandboxCustomerAppData) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxCustomerAppData performs a merge with any union data inside the CustomerAppDataCreateOrUpdateItem, using the provided SandboxCustomerAppData
func (t *CustomerAppDataCreateOrUpdateItem) MergeSandboxCustomerAppData(v SandboxCustomerAppData) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomInvoicingCustomerAppData returns the union data inside the CustomerAppDataCreateOrUpdateItem as a CustomInvoicingCustomerAppData
func (t CustomerAppDataCreateOrUpdateItem) AsCustomInvoicingCustomerAppData() (CustomInvoicingCustomerAppData, error) {
	var body CustomInvoicingCustomerAppData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomInvoicingCustomerAppData overwrites any union data inside the CustomerAppDataCreateOrUpdateItem as the provided CustomInvoicingCustomerAppData
func (t *CustomerAppDataCreateOrUpdateItem) FromCustomInvoicingCustomerAppData(v CustomInvoicingCustomerAppData) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomInvoicingCustomerAppData performs a merge with any union data inside the CustomerAppDataCreateOrUpdateItem, using the provided CustomInvoicingCustomerAppData
func (t *CustomerAppDataCreateOrUpdateItem) MergeCustomInvoicingCustomerAppData(v CustomInvoicingCustomerAppData) error {
	v.Type = "custom_invoicing"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomerAppDataCreateOrUpdateItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CustomerAppDataCreateOrUpdateItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "custom_invoicing":
		return t.AsCustomInvoicingCustomerAppData()
	case "sandbox":
		return t.AsSandboxCustomerAppData()
	case "stripe":
		return t.AsStripeCustomerAppDataCreateOrUpdateItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CustomerAppDataCreateOrUpdateItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomerAppDataCreateOrUpdateItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMetered returns the union data inside the Entitlement as a EntitlementMetered
func (t Entitlement) AsEntitlementMetered() (EntitlementMetered, error) {
	var body EntitlementMetered
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMetered overwrites any union data inside the Entitlement as the provided EntitlementMetered
func (t *Entitlement) FromEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMetered performs a merge with any union data inside the Entitlement, using the provided EntitlementMetered
func (t *Entitlement) MergeEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStatic returns the union data inside the Entitlement as a EntitlementStatic
func (t Entitlement) AsEntitlementStatic() (EntitlementStatic, error) {
	var body EntitlementStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStatic overwrites any union data inside the Entitlement as the provided EntitlementStatic
func (t *Entitlement) FromEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStatic performs a merge with any union data inside the Entitlement, using the provided EntitlementStatic
func (t *Entitlement) MergeEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBoolean returns the union data inside the Entitlement as a EntitlementBoolean
func (t Entitlement) AsEntitlementBoolean() (EntitlementBoolean, error) {
	var body EntitlementBoolean
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBoolean overwrites any union data inside the Entitlement as the provided EntitlementBoolean
func (t *Entitlement) FromEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBoolean performs a merge with any union data inside the Entitlement, using the provided EntitlementBoolean
func (t *Entitlement) MergeEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBoolean()
	case "metered":
		return t.AsEntitlementMetered()
	case "static":
		return t.AsEntitlementStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMeteredCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementMeteredCreateInputs
func (t EntitlementCreateInputs) AsEntitlementMeteredCreateInputs() (EntitlementMeteredCreateInputs, error) {
	var body EntitlementMeteredCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStaticCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementStaticCreateInputs
func (t EntitlementCreateInputs) AsEntitlementStaticCreateInputs() (EntitlementStaticCreateInputs, error) {
	var body EntitlementStaticCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStaticCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStaticCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBooleanCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementBooleanCreateInputs
func (t EntitlementCreateInputs) AsEntitlementBooleanCreateInputs() (EntitlementBooleanCreateInputs, error) {
	var body EntitlementBooleanCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBooleanCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBooleanCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntitlementCreateInputs) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EntitlementCreateInputs) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBooleanCreateInputs()
	case "metered":
		return t.AsEntitlementMeteredCreateInputs()
	case "static":
		return t.AsEntitlementStaticCreateInputs()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EntitlementCreateInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EntitlementCreateInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEvent returns the union data inside the IngestEventsBody as a Event
func (t IngestEventsBody) AsEvent() (Event, error) {
	var body Event
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvent overwrites any union data inside the IngestEventsBody as the provided Event
func (t *IngestEventsBody) FromEvent(v Event) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvent performs a merge with any union data inside the IngestEventsBody, using the provided Event
func (t *IngestEventsBody) MergeEvent(v Event) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestEventsBody1 returns the union data inside the IngestEventsBody as a IngestEventsBody1
func (t IngestEventsBody) AsIngestEventsBody1() (IngestEventsBody1, error) {
	var body IngestEventsBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestEventsBody1 overwrites any union data inside the IngestEventsBody as the provided IngestEventsBody1
func (t *IngestEventsBody) FromIngestEventsBody1(v IngestEventsBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestEventsBody1 performs a merge with any union data inside the IngestEventsBody, using the provided IngestEventsBody1
func (t *IngestEventsBody) MergeIngestEventsBody1(v IngestEventsBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestEventsBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestEventsBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListEntitlementsResult0 returns the union data inside the ListEntitlementsResult as a ListEntitlementsResult0
func (t ListEntitlementsResult) AsListEntitlementsResult0() (ListEntitlementsResult0, error) {
	var body ListEntitlementsResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementsResult0 overwrites any union data inside the ListEntitlementsResult as the provided ListEntitlementsResult0
func (t *ListEntitlementsResult) FromListEntitlementsResult0(v ListEntitlementsResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementsResult0 performs a merge with any union data inside the ListEntitlementsResult, using the provided ListEntitlementsResult0
func (t *ListEntitlementsResult) MergeListEntitlementsResult0(v ListEntitlementsResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementPaginatedResponse returns the union data inside the ListEntitlementsResult as a EntitlementPaginatedResponse
func (t ListEntitlementsResult) AsEntitlementPaginatedResponse() (EntitlementPaginatedResponse, error) {
	var body EntitlementPaginatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementPaginatedResponse overwrites any union data inside the ListEntitlementsResult as the provided EntitlementPaginatedResponse
func (t *ListEntitlementsResult) FromEntitlementPaginatedResponse(v EntitlementPaginatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementPaginatedResponse performs a merge with any union data inside the ListEntitlementsResult, using the provided EntitlementPaginatedResponse
func (t *ListEntitlementsResult) MergeEntitlementPaginatedResponse(v EntitlementPaginatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListEntitlementsResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListEntitlementsResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListFeaturesResult0 returns the union data inside the ListFeaturesResult as a ListFeaturesResult0
func (t ListFeaturesResult) AsListFeaturesResult0() (ListFeaturesResult0, error) {
	var body ListFeaturesResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListFeaturesResult0 overwrites any union data inside the ListFeaturesResult as the provided ListFeaturesResult0
func (t *ListFeaturesResult) FromListFeaturesResult0(v ListFeaturesResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListFeaturesResult0 performs a merge with any union data inside the ListFeaturesResult, using the provided ListFeaturesResult0
func (t *ListFeaturesResult) MergeListFeaturesResult0(v ListFeaturesResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFeaturePaginatedResponse returns the union data inside the ListFeaturesResult as a FeaturePaginatedResponse
func (t ListFeaturesResult) AsFeaturePaginatedResponse() (FeaturePaginatedResponse, error) {
	var body FeaturePaginatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFeaturePaginatedResponse overwrites any union data inside the ListFeaturesResult as the provided FeaturePaginatedResponse
func (t *ListFeaturesResult) FromFeaturePaginatedResponse(v FeaturePaginatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFeaturePaginatedResponse performs a merge with any union data inside the ListFeaturesResult, using the provided FeaturePaginatedResponse
func (t *ListFeaturesResult) MergeFeaturePaginatedResponse(v FeaturePaginatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListFeaturesResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListFeaturesResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMeasureUsageFromPreset returns the union data inside the MeasureUsageFrom as a MeasureUsageFromPreset
func (t MeasureUsageFrom) AsMeasureUsageFromPreset() (MeasureUsageFromPreset, error) {
	var body MeasureUsageFromPreset
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromPreset overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromPreset
func (t *MeasureUsageFrom) FromMeasureUsageFromPreset(v MeasureUsageFromPreset) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromPreset performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromPreset
func (t *MeasureUsageFrom) MergeMeasureUsageFromPreset(v MeasureUsageFromPreset) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMeasureUsageFromTime returns the union data inside the MeasureUsageFrom as a MeasureUsageFromTime
func (t MeasureUsageFrom) AsMeasureUsageFromTime() (MeasureUsageFromTime, error) {
	var body MeasureUsageFromTime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromTime overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) FromMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromTime performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) MergeMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MeasureUsageFrom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MeasureUsageFrom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationEventResetPayload returns the union data inside the NotificationEventPayload as a NotificationEventResetPayload
func (t NotificationEventPayload) AsNotificationEventResetPayload() (NotificationEventResetPayload, error) {
	var body NotificationEventResetPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationEventResetPayload overwrites any union data inside the NotificationEventPayload as the provided NotificationEventResetPayload
func (t *NotificationEventPayload) FromNotificationEventResetPayload(v NotificationEventResetPayload) error {
	v.Type = "entitlements.reset"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationEventResetPayload performs a merge with any union data inside the NotificationEventPayload, using the provided NotificationEventResetPayload
func (t *NotificationEventPayload) MergeNotificationEventResetPayload(v NotificationEventResetPayload) error {
	v.Type = "entitlements.reset"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationEventBalanceThresholdPayload returns the union data inside the NotificationEventPayload as a NotificationEventBalanceThresholdPayload
func (t NotificationEventPayload) AsNotificationEventBalanceThresholdPayload() (NotificationEventBalanceThresholdPayload, error) {
	var body NotificationEventBalanceThresholdPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationEventBalanceThresholdPayload overwrites any union data inside the NotificationEventPayload as the provided NotificationEventBalanceThresholdPayload
func (t *NotificationEventPayload) FromNotificationEventBalanceThresholdPayload(v NotificationEventBalanceThresholdPayload) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationEventBalanceThresholdPayload performs a merge with any union data inside the NotificationEventPayload, using the provided NotificationEventBalanceThresholdPayload
func (t *NotificationEventPayload) MergeNotificationEventBalanceThresholdPayload(v NotificationEventBalanceThresholdPayload) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationEventInvoiceCreatedPayload returns the union data inside the NotificationEventPayload as a NotificationEventInvoiceCreatedPayload
func (t NotificationEventPayload) AsNotificationEventInvoiceCreatedPayload() (NotificationEventInvoiceCreatedPayload, error) {
	var body NotificationEventInvoiceCreatedPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationEventInvoiceCreatedPayload overwrites any union data inside the NotificationEventPayload as the provided NotificationEventInvoiceCreatedPayload
func (t *NotificationEventPayload) FromNotificationEventInvoiceCreatedPayload(v NotificationEventInvoiceCreatedPayload) error {
	v.Type = "invoice.created"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationEventInvoiceCreatedPayload performs a merge with any union data inside the NotificationEventPayload, using the provided NotificationEventInvoiceCreatedPayload
func (t *NotificationEventPayload) MergeNotificationEventInvoiceCreatedPayload(v NotificationEventInvoiceCreatedPayload) error {
	v.Type = "invoice.created"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationEventInvoiceUpdatedPayload returns the union data inside the NotificationEventPayload as a NotificationEventInvoiceUpdatedPayload
func (t NotificationEventPayload) AsNotificationEventInvoiceUpdatedPayload() (NotificationEventInvoiceUpdatedPayload, error) {
	var body NotificationEventInvoiceUpdatedPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationEventInvoiceUpdatedPayload overwrites any union data inside the NotificationEventPayload as the provided NotificationEventInvoiceUpdatedPayload
func (t *NotificationEventPayload) FromNotificationEventInvoiceUpdatedPayload(v NotificationEventInvoiceUpdatedPayload) error {
	v.Type = "invoice.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationEventInvoiceUpdatedPayload performs a merge with any union data inside the NotificationEventPayload, using the provided NotificationEventInvoiceUpdatedPayload
func (t *NotificationEventPayload) MergeNotificationEventInvoiceUpdatedPayload(v NotificationEventInvoiceUpdatedPayload) error {
	v.Type = "invoice.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationEventPayload) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationEventPayload) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "entitlements.balance.threshold":
		return t.AsNotificationEventBalanceThresholdPayload()
	case "entitlements.reset":
		return t.AsNotificationEventResetPayload()
	case "invoice.created":
		return t.AsNotificationEventInvoiceCreatedPayload()
	case "invoice.updated":
		return t.AsNotificationEventInvoiceUpdatedPayload()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationEventPayload) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationEventPayload) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationRuleBalanceThreshold returns the union data inside the NotificationRule as a NotificationRuleBalanceThreshold
func (t NotificationRule) AsNotificationRuleBalanceThreshold() (NotificationRuleBalanceThreshold, error) {
	var body NotificationRuleBalanceThreshold
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleBalanceThreshold overwrites any union data inside the NotificationRule as the provided NotificationRuleBalanceThreshold
func (t *NotificationRule) FromNotificationRuleBalanceThreshold(v NotificationRuleBalanceThreshold) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleBalanceThreshold performs a merge with any union data inside the NotificationRule, using the provided NotificationRuleBalanceThreshold
func (t *NotificationRule) MergeNotificationRuleBalanceThreshold(v NotificationRuleBalanceThreshold) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationRuleEntitlementReset returns the union data inside the NotificationRule as a NotificationRuleEntitlementReset
func (t NotificationRule) AsNotificationRuleEntitlementReset() (NotificationRuleEntitlementReset, error) {
	var body NotificationRuleEntitlementReset
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleEntitlementReset overwrites any union data inside the NotificationRule as the provided NotificationRuleEntitlementReset
func (t *NotificationRule) FromNotificationRuleEntitlementReset(v NotificationRuleEntitlementReset) error {
	v.Type = "entitlements.reset"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleEntitlementReset performs a merge with any union data inside the NotificationRule, using the provided NotificationRuleEntitlementReset
func (t *NotificationRule) MergeNotificationRuleEntitlementReset(v NotificationRuleEntitlementReset) error {
	v.Type = "entitlements.reset"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationRuleInvoiceCreated returns the union data inside the NotificationRule as a NotificationRuleInvoiceCreated
func (t NotificationRule) AsNotificationRuleInvoiceCreated() (NotificationRuleInvoiceCreated, error) {
	var body NotificationRuleInvoiceCreated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleInvoiceCreated overwrites any union data inside the NotificationRule as the provided NotificationRuleInvoiceCreated
func (t *NotificationRule) FromNotificationRuleInvoiceCreated(v NotificationRuleInvoiceCreated) error {
	v.Type = "invoice.created"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleInvoiceCreated performs a merge with any union data inside the NotificationRule, using the provided NotificationRuleInvoiceCreated
func (t *NotificationRule) MergeNotificationRuleInvoiceCreated(v NotificationRuleInvoiceCreated) error {
	v.Type = "invoice.created"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationRuleInvoiceUpdated returns the union data inside the NotificationRule as a NotificationRuleInvoiceUpdated
func (t NotificationRule) AsNotificationRuleInvoiceUpdated() (NotificationRuleInvoiceUpdated, error) {
	var body NotificationRuleInvoiceUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleInvoiceUpdated overwrites any union data inside the NotificationRule as the provided NotificationRuleInvoiceUpdated
func (t *NotificationRule) FromNotificationRuleInvoiceUpdated(v NotificationRuleInvoiceUpdated) error {
	v.Type = "invoice.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleInvoiceUpdated performs a merge with any union data inside the NotificationRule, using the provided NotificationRuleInvoiceUpdated
func (t *NotificationRule) MergeNotificationRuleInvoiceUpdated(v NotificationRuleInvoiceUpdated) error {
	v.Type = "invoice.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationRule) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationRule) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "entitlements.balance.threshold":
		return t.AsNotificationRuleBalanceThreshold()
	case "entitlements.reset":
		return t.AsNotificationRuleEntitlementReset()
	case "invoice.created":
		return t.AsNotificationRuleInvoiceCreated()
	case "invoice.updated":
		return t.AsNotificationRuleInvoiceUpdated()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationRuleBalanceThresholdCreateRequest returns the union data inside the NotificationRuleCreateRequest as a NotificationRuleBalanceThresholdCreateRequest
func (t NotificationRuleCreateRequest) AsNotificationRuleBalanceThresholdCreateRequest() (NotificationRuleBalanceThresholdCreateRequest, error) {
	var body NotificationRuleBalanceThresholdCreateRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleBalanceThresholdCreateRequest overwrites any union data inside the NotificationRuleCreateRequest as the provided NotificationRuleBalanceThresholdCreateRequest
func (t *NotificationRuleCreateRequest) FromNotificationRuleBalanceThresholdCreateRequest(v NotificationRuleBalanceThresholdCreateRequest) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleBalanceThresholdCreateRequest performs a merge with any union data inside the NotificationRuleCreateRequest, using the provided NotificationRuleBalanceThresholdCreateRequest
func (t *NotificationRuleCreateRequest) MergeNotificationRuleBalanceThresholdCreateRequest(v NotificationRuleBalanceThresholdCreateRequest) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationRuleEntitlementResetCreateRequest returns the union data inside the NotificationRuleCreateRequest as a NotificationRuleEntitlementResetCreateRequest
func (t NotificationRuleCreateRequest) AsNotificationRuleEntitlementResetCreateRequest() (NotificationRuleEntitlementResetCreateRequest, error) {
	var body NotificationRuleEntitlementResetCreateRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleEntitlementResetCreateRequest overwrites any union data inside the NotificationRuleCreateRequest as the provided NotificationRuleEntitlementResetCreateRequest
func (t *NotificationRuleCreateRequest) FromNotificationRuleEntitlementResetCreateRequest(v NotificationRuleEntitlementResetCreateRequest) error {
	v.Type = "entitlements.reset"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleEntitlementResetCreateRequest performs a merge with any union data inside the NotificationRuleCreateRequest, using the provided NotificationRuleEntitlementResetCreateRequest
func (t *NotificationRuleCreateRequest) MergeNotificationRuleEntitlementResetCreateRequest(v NotificationRuleEntitlementResetCreateRequest) error {
	v.Type = "entitlements.reset"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationRuleInvoiceCreatedCreateRequest returns the union data inside the NotificationRuleCreateRequest as a NotificationRuleInvoiceCreatedCreateRequest
func (t NotificationRuleCreateRequest) AsNotificationRuleInvoiceCreatedCreateRequest() (NotificationRuleInvoiceCreatedCreateRequest, error) {
	var body NotificationRuleInvoiceCreatedCreateRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleInvoiceCreatedCreateRequest overwrites any union data inside the NotificationRuleCreateRequest as the provided NotificationRuleInvoiceCreatedCreateRequest
func (t *NotificationRuleCreateRequest) FromNotificationRuleInvoiceCreatedCreateRequest(v NotificationRuleInvoiceCreatedCreateRequest) error {
	v.Type = "invoice.created"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleInvoiceCreatedCreateRequest performs a merge with any union data inside the NotificationRuleCreateRequest, using the provided NotificationRuleInvoiceCreatedCreateRequest
func (t *NotificationRuleCreateRequest) MergeNotificationRuleInvoiceCreatedCreateRequest(v NotificationRuleInvoiceCreatedCreateRequest) error {
	v.Type = "invoice.created"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationRuleInvoiceUpdatedCreateRequest returns the union data inside the NotificationRuleCreateRequest as a NotificationRuleInvoiceUpdatedCreateRequest
func (t NotificationRuleCreateRequest) AsNotificationRuleInvoiceUpdatedCreateRequest() (NotificationRuleInvoiceUpdatedCreateRequest, error) {
	var body NotificationRuleInvoiceUpdatedCreateRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleInvoiceUpdatedCreateRequest overwrites any union data inside the NotificationRuleCreateRequest as the provided NotificationRuleInvoiceUpdatedCreateRequest
func (t *NotificationRuleCreateRequest) FromNotificationRuleInvoiceUpdatedCreateRequest(v NotificationRuleInvoiceUpdatedCreateRequest) error {
	v.Type = "invoice.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleInvoiceUpdatedCreateRequest performs a merge with any union data inside the NotificationRuleCreateRequest, using the provided NotificationRuleInvoiceUpdatedCreateRequest
func (t *NotificationRuleCreateRequest) MergeNotificationRuleInvoiceUpdatedCreateRequest(v NotificationRuleInvoiceUpdatedCreateRequest) error {
	v.Type = "invoice.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationRuleCreateRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationRuleCreateRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "entitlements.balance.threshold":
		return t.AsNotificationRuleBalanceThresholdCreateRequest()
	case "entitlements.reset":
		return t.AsNotificationRuleEntitlementResetCreateRequest()
	case "invoice.created":
		return t.AsNotificationRuleInvoiceCreatedCreateRequest()
	case "invoice.updated":
		return t.AsNotificationRuleInvoiceUpdatedCreateRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationRuleCreateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationRuleCreateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaymentTermInstant returns the union data inside the PaymentTerms as a PaymentTermInstant
func (t PaymentTerms) AsPaymentTermInstant() (PaymentTermInstant, error) {
	var body PaymentTermInstant
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentTermInstant overwrites any union data inside the PaymentTerms as the provided PaymentTermInstant
func (t *PaymentTerms) FromPaymentTermInstant(v PaymentTermInstant) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentTermInstant performs a merge with any union data inside the PaymentTerms, using the provided PaymentTermInstant
func (t *PaymentTerms) MergePaymentTermInstant(v PaymentTermInstant) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentTermDueDate returns the union data inside the PaymentTerms as a PaymentTermDueDate
func (t PaymentTerms) AsPaymentTermDueDate() (PaymentTermDueDate, error) {
	var body PaymentTermDueDate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentTermDueDate overwrites any union data inside the PaymentTerms as the provided PaymentTermDueDate
func (t *PaymentTerms) FromPaymentTermDueDate(v PaymentTermDueDate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentTermDueDate performs a merge with any union data inside the PaymentTerms, using the provided PaymentTermDueDate
func (t *PaymentTerms) MergePaymentTermDueDate(v PaymentTermDueDate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentTerms) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentTerms) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlatPrice returns the union data inside the Price as a FlatPrice
func (t Price) AsFlatPrice() (FlatPrice, error) {
	var body FlatPrice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlatPrice overwrites any union data inside the Price as the provided FlatPrice
func (t *Price) FromFlatPrice(v FlatPrice) error {
	v.Type = "flat"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlatPrice performs a merge with any union data inside the Price, using the provided FlatPrice
func (t *Price) MergeFlatPrice(v FlatPrice) error {
	v.Type = "flat"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnitPrice returns the union data inside the Price as a UnitPrice
func (t Price) AsUnitPrice() (UnitPrice, error) {
	var body UnitPrice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnitPrice overwrites any union data inside the Price as the provided UnitPrice
func (t *Price) FromUnitPrice(v UnitPrice) error {
	v.Type = "unit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnitPrice performs a merge with any union data inside the Price, using the provided UnitPrice
func (t *Price) MergeUnitPrice(v UnitPrice) error {
	v.Type = "unit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTieredPrice returns the union data inside the Price as a TieredPrice
func (t Price) AsTieredPrice() (TieredPrice, error) {
	var body TieredPrice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTieredPrice overwrites any union data inside the Price as the provided TieredPrice
func (t *Price) FromTieredPrice(v TieredPrice) error {
	v.Type = "tiered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTieredPrice performs a merge with any union data inside the Price, using the provided TieredPrice
func (t *Price) MergeTieredPrice(v TieredPrice) error {
	v.Type = "tiered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicPrice returns the union data inside the Price as a DynamicPrice
func (t Price) AsDynamicPrice() (DynamicPrice, error) {
	var body DynamicPrice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicPrice overwrites any union data inside the Price as the provided DynamicPrice
func (t *Price) FromDynamicPrice(v DynamicPrice) error {
	v.Type = "dynamic"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicPrice performs a merge with any union data inside the Price, using the provided DynamicPrice
func (t *Price) MergeDynamicPrice(v DynamicPrice) error {
	v.Type = "dynamic"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackagePrice returns the union data inside the Price as a PackagePrice
func (t Price) AsPackagePrice() (PackagePrice, error) {
	var body PackagePrice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackagePrice overwrites any union data inside the Price as the provided PackagePrice
func (t *Price) FromPackagePrice(v PackagePrice) error {
	v.Type = "package"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackagePrice performs a merge with any union data inside the Price, using the provided PackagePrice
func (t *Price) MergePackagePrice(v PackagePrice) error {
	v.Type = "package"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Price) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Price) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "dynamic":
		return t.AsDynamicPrice()
	case "flat":
		return t.AsFlatPrice()
	case "package":
		return t.AsPackagePrice()
	case "tiered":
		return t.AsTieredPrice()
	case "unit":
		return t.AsUnitPrice()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Price) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Price) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardFlatFee returns the union data inside the RateCard as a RateCardFlatFee
func (t RateCard) AsRateCardFlatFee() (RateCardFlatFee, error) {
	var body RateCardFlatFee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardFlatFee overwrites any union data inside the RateCard as the provided RateCardFlatFee
func (t *RateCard) FromRateCardFlatFee(v RateCardFlatFee) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardFlatFee performs a merge with any union data inside the RateCard, using the provided RateCardFlatFee
func (t *RateCard) MergeRateCardFlatFee(v RateCardFlatFee) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBased returns the union data inside the RateCard as a RateCardUsageBased
func (t RateCard) AsRateCardUsageBased() (RateCardUsageBased, error) {
	var body RateCardUsageBased
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBased overwrites any union data inside the RateCard as the provided RateCardUsageBased
func (t *RateCard) FromRateCardUsageBased(v RateCardUsageBased) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBased performs a merge with any union data inside the RateCard, using the provided RateCardUsageBased
func (t *RateCard) MergeRateCardUsageBased(v RateCardUsageBased) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCard) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCard) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsRateCardFlatFee()
	case "usage_based":
		return t.AsRateCardUsageBased()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCard) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCard) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardMeteredEntitlement returns the union data inside the RateCardEntitlement as a RateCardMeteredEntitlement
func (t RateCardEntitlement) AsRateCardMeteredEntitlement() (RateCardMeteredEntitlement, error) {
	var body RateCardMeteredEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardMeteredEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardMeteredEntitlement
func (t *RateCardEntitlement) FromRateCardMeteredEntitlement(v RateCardMeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardMeteredEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardMeteredEntitlement
func (t *RateCardEntitlement) MergeRateCardMeteredEntitlement(v RateCardMeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardStaticEntitlement returns the union data inside the RateCardEntitlement as a RateCardStaticEntitlement
func (t RateCardEntitlement) AsRateCardStaticEntitlement() (RateCardStaticEntitlement, error) {
	var body RateCardStaticEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardStaticEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardStaticEntitlement
func (t *RateCardEntitlement) FromRateCardStaticEntitlement(v RateCardStaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardStaticEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardStaticEntitlement
func (t *RateCardEntitlement) MergeRateCardStaticEntitlement(v RateCardStaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardBooleanEntitlement returns the union data inside the RateCardEntitlement as a RateCardBooleanEntitlement
func (t RateCardEntitlement) AsRateCardBooleanEntitlement() (RateCardBooleanEntitlement, error) {
	var body RateCardBooleanEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardBooleanEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardBooleanEntitlement
func (t *RateCardEntitlement) FromRateCardBooleanEntitlement(v RateCardBooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardBooleanEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardBooleanEntitlement
func (t *RateCardEntitlement) MergeRateCardBooleanEntitlement(v RateCardBooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardEntitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardEntitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsRateCardBooleanEntitlement()
	case "metered":
		return t.AsRateCardMeteredEntitlement()
	case "static":
		return t.AsRateCardStaticEntitlement()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardEntitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardEntitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlatPriceWithPaymentTerm returns the union data inside the RateCardUsageBasedPrice as a FlatPriceWithPaymentTerm
func (t RateCardUsageBasedPrice) AsFlatPriceWithPaymentTerm() (FlatPriceWithPaymentTerm, error) {
	var body FlatPriceWithPaymentTerm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlatPriceWithPaymentTerm overwrites any union data inside the RateCardUsageBasedPrice as the provided FlatPriceWithPaymentTerm
func (t *RateCardUsageBasedPrice) FromFlatPriceWithPaymentTerm(v FlatPriceWithPaymentTerm) error {
	v.Type = "flat"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlatPriceWithPaymentTerm performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided FlatPriceWithPaymentTerm
func (t *RateCardUsageBasedPrice) MergeFlatPriceWithPaymentTerm(v FlatPriceWithPaymentTerm) error {
	v.Type = "flat"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnitPriceWithCommitments returns the union data inside the RateCardUsageBasedPrice as a UnitPriceWithCommitments
func (t RateCardUsageBasedPrice) AsUnitPriceWithCommitments() (UnitPriceWithCommitments, error) {
	var body UnitPriceWithCommitments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnitPriceWithCommitments overwrites any union data inside the RateCardUsageBasedPrice as the provided UnitPriceWithCommitments
func (t *RateCardUsageBasedPrice) FromUnitPriceWithCommitments(v UnitPriceWithCommitments) error {
	v.Type = "unit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnitPriceWithCommitments performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided UnitPriceWithCommitments
func (t *RateCardUsageBasedPrice) MergeUnitPriceWithCommitments(v UnitPriceWithCommitments) error {
	v.Type = "unit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTieredPriceWithCommitments returns the union data inside the RateCardUsageBasedPrice as a TieredPriceWithCommitments
func (t RateCardUsageBasedPrice) AsTieredPriceWithCommitments() (TieredPriceWithCommitments, error) {
	var body TieredPriceWithCommitments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTieredPriceWithCommitments overwrites any union data inside the RateCardUsageBasedPrice as the provided TieredPriceWithCommitments
func (t *RateCardUsageBasedPrice) FromTieredPriceWithCommitments(v TieredPriceWithCommitments) error {
	v.Type = "tiered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTieredPriceWithCommitments performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided TieredPriceWithCommitments
func (t *RateCardUsageBasedPrice) MergeTieredPriceWithCommitments(v TieredPriceWithCommitments) error {
	v.Type = "tiered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicPriceWithCommitments returns the union data inside the RateCardUsageBasedPrice as a DynamicPriceWithCommitments
func (t RateCardUsageBasedPrice) AsDynamicPriceWithCommitments() (DynamicPriceWithCommitments, error) {
	var body DynamicPriceWithCommitments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicPriceWithCommitments overwrites any union data inside the RateCardUsageBasedPrice as the provided DynamicPriceWithCommitments
func (t *RateCardUsageBasedPrice) FromDynamicPriceWithCommitments(v DynamicPriceWithCommitments) error {
	v.Type = "dynamic"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicPriceWithCommitments performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided DynamicPriceWithCommitments
func (t *RateCardUsageBasedPrice) MergeDynamicPriceWithCommitments(v DynamicPriceWithCommitments) error {
	v.Type = "dynamic"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackagePriceWithCommitments returns the union data inside the RateCardUsageBasedPrice as a PackagePriceWithCommitments
func (t RateCardUsageBasedPrice) AsPackagePriceWithCommitments() (PackagePriceWithCommitments, error) {
	var body PackagePriceWithCommitments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackagePriceWithCommitments overwrites any union data inside the RateCardUsageBasedPrice as the provided PackagePriceWithCommitments
func (t *RateCardUsageBasedPrice) FromPackagePriceWithCommitments(v PackagePriceWithCommitments) error {
	v.Type = "package"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackagePriceWithCommitments performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided PackagePriceWithCommitments
func (t *RateCardUsageBasedPrice) MergePackagePriceWithCommitments(v PackagePriceWithCommitments) error {
	v.Type = "package"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardUsageBasedPrice) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardUsageBasedPrice) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "dynamic":
		return t.AsDynamicPriceWithCommitments()
	case "flat":
		return t.AsFlatPriceWithPaymentTerm()
	case "package":
		return t.AsPackagePriceWithCommitments()
	case "tiered":
		return t.AsTieredPriceWithCommitments()
	case "unit":
		return t.AsUnitPriceWithCommitments()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardUsageBasedPrice) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardUsageBasedPrice) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRecurringPeriodInterval0 returns the union data inside the RecurringPeriodInterval as a RecurringPeriodInterval0
func (t RecurringPeriodInterval) AsRecurringPeriodInterval0() (RecurringPeriodInterval0, error) {
	var body RecurringPeriodInterval0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecurringPeriodInterval0 overwrites any union data inside the RecurringPeriodInterval as the provided RecurringPeriodInterval0
func (t *RecurringPeriodInterval) FromRecurringPeriodInterval0(v RecurringPeriodInterval0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecurringPeriodInterval0 performs a merge with any union data inside the RecurringPeriodInterval, using the provided RecurringPeriodInterval0
func (t *RecurringPeriodInterval) MergeRecurringPeriodInterval0(v RecurringPeriodInterval0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRecurringPeriodIntervalEnum returns the union data inside the RecurringPeriodInterval as a RecurringPeriodIntervalEnum
func (t RecurringPeriodInterval) AsRecurringPeriodIntervalEnum() (RecurringPeriodIntervalEnum, error) {
	var body RecurringPeriodIntervalEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecurringPeriodIntervalEnum overwrites any union data inside the RecurringPeriodInterval as the provided RecurringPeriodIntervalEnum
func (t *RecurringPeriodInterval) FromRecurringPeriodIntervalEnum(v RecurringPeriodIntervalEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecurringPeriodIntervalEnum performs a merge with any union data inside the RecurringPeriodInterval, using the provided RecurringPeriodIntervalEnum
func (t *RecurringPeriodInterval) MergeRecurringPeriodIntervalEnum(v RecurringPeriodIntervalEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecurringPeriodInterval) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecurringPeriodInterval) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlanSubscriptionChange returns the union data inside the SubscriptionChange as a PlanSubscriptionChange
func (t SubscriptionChange) AsPlanSubscriptionChange() (PlanSubscriptionChange, error) {
	var body PlanSubscriptionChange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanSubscriptionChange overwrites any union data inside the SubscriptionChange as the provided PlanSubscriptionChange
func (t *SubscriptionChange) FromPlanSubscriptionChange(v PlanSubscriptionChange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanSubscriptionChange performs a merge with any union data inside the SubscriptionChange, using the provided PlanSubscriptionChange
func (t *SubscriptionChange) MergePlanSubscriptionChange(v PlanSubscriptionChange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomSubscriptionChange returns the union data inside the SubscriptionChange as a CustomSubscriptionChange
func (t SubscriptionChange) AsCustomSubscriptionChange() (CustomSubscriptionChange, error) {
	var body CustomSubscriptionChange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomSubscriptionChange overwrites any union data inside the SubscriptionChange as the provided CustomSubscriptionChange
func (t *SubscriptionChange) FromCustomSubscriptionChange(v CustomSubscriptionChange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomSubscriptionChange performs a merge with any union data inside the SubscriptionChange, using the provided CustomSubscriptionChange
func (t *SubscriptionChange) MergeCustomSubscriptionChange(v CustomSubscriptionChange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionChange) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionChange) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlanSubscriptionCreate returns the union data inside the SubscriptionCreate as a PlanSubscriptionCreate
func (t SubscriptionCreate) AsPlanSubscriptionCreate() (PlanSubscriptionCreate, error) {
	var body PlanSubscriptionCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanSubscriptionCreate overwrites any union data inside the SubscriptionCreate as the provided PlanSubscriptionCreate
func (t *SubscriptionCreate) FromPlanSubscriptionCreate(v PlanSubscriptionCreate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanSubscriptionCreate performs a merge with any union data inside the SubscriptionCreate, using the provided PlanSubscriptionCreate
func (t *SubscriptionCreate) MergePlanSubscriptionCreate(v PlanSubscriptionCreate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomSubscriptionCreate returns the union data inside the SubscriptionCreate as a CustomSubscriptionCreate
func (t SubscriptionCreate) AsCustomSubscriptionCreate() (CustomSubscriptionCreate, error) {
	var body CustomSubscriptionCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomSubscriptionCreate overwrites any union data inside the SubscriptionCreate as the provided CustomSubscriptionCreate
func (t *SubscriptionCreate) FromCustomSubscriptionCreate(v CustomSubscriptionCreate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomSubscriptionCreate performs a merge with any union data inside the SubscriptionCreate, using the provided CustomSubscriptionCreate
func (t *SubscriptionCreate) MergeCustomSubscriptionCreate(v CustomSubscriptionCreate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionCreate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionCreate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEditSubscriptionAddItem returns the union data inside the SubscriptionEditOperation as a EditSubscriptionAddItem
func (t SubscriptionEditOperation) AsEditSubscriptionAddItem() (EditSubscriptionAddItem, error) {
	var body EditSubscriptionAddItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditSubscriptionAddItem overwrites any union data inside the SubscriptionEditOperation as the provided EditSubscriptionAddItem
func (t *SubscriptionEditOperation) FromEditSubscriptionAddItem(v EditSubscriptionAddItem) error {
	v.Op = "add_item"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditSubscriptionAddItem performs a merge with any union data inside the SubscriptionEditOperation, using the provided EditSubscriptionAddItem
func (t *SubscriptionEditOperation) MergeEditSubscriptionAddItem(v EditSubscriptionAddItem) error {
	v.Op = "add_item"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEditSubscriptionRemoveItem returns the union data inside the SubscriptionEditOperation as a EditSubscriptionRemoveItem
func (t SubscriptionEditOperation) AsEditSubscriptionRemoveItem() (EditSubscriptionRemoveItem, error) {
	var body EditSubscriptionRemoveItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditSubscriptionRemoveItem overwrites any union data inside the SubscriptionEditOperation as the provided EditSubscriptionRemoveItem
func (t *SubscriptionEditOperation) FromEditSubscriptionRemoveItem(v EditSubscriptionRemoveItem) error {
	v.Op = "remove_item"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditSubscriptionRemoveItem performs a merge with any union data inside the SubscriptionEditOperation, using the provided EditSubscriptionRemoveItem
func (t *SubscriptionEditOperation) MergeEditSubscriptionRemoveItem(v EditSubscriptionRemoveItem) error {
	v.Op = "remove_item"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEditSubscriptionAddPhase returns the union data inside the SubscriptionEditOperation as a EditSubscriptionAddPhase
func (t SubscriptionEditOperation) AsEditSubscriptionAddPhase() (EditSubscriptionAddPhase, error) {
	var body EditSubscriptionAddPhase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditSubscriptionAddPhase overwrites any union data inside the SubscriptionEditOperation as the provided EditSubscriptionAddPhase
func (t *SubscriptionEditOperation) FromEditSubscriptionAddPhase(v EditSubscriptionAddPhase) error {
	v.Op = "add_phase"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditSubscriptionAddPhase performs a merge with any union data inside the SubscriptionEditOperation, using the provided EditSubscriptionAddPhase
func (t *SubscriptionEditOperation) MergeEditSubscriptionAddPhase(v EditSubscriptionAddPhase) error {
	v.Op = "add_phase"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEditSubscriptionRemovePhase returns the union data inside the SubscriptionEditOperation as a EditSubscriptionRemovePhase
func (t SubscriptionEditOperation) AsEditSubscriptionRemovePhase() (EditSubscriptionRemovePhase, error) {
	var body EditSubscriptionRemovePhase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditSubscriptionRemovePhase overwrites any union data inside the SubscriptionEditOperation as the provided EditSubscriptionRemovePhase
func (t *SubscriptionEditOperation) FromEditSubscriptionRemovePhase(v EditSubscriptionRemovePhase) error {
	v.Op = "remove_phase"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditSubscriptionRemovePhase performs a merge with any union data inside the SubscriptionEditOperation, using the provided EditSubscriptionRemovePhase
func (t *SubscriptionEditOperation) MergeEditSubscriptionRemovePhase(v EditSubscriptionRemovePhase) error {
	v.Op = "remove_phase"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEditSubscriptionStretchPhase returns the union data inside the SubscriptionEditOperation as a EditSubscriptionStretchPhase
func (t SubscriptionEditOperation) AsEditSubscriptionStretchPhase() (EditSubscriptionStretchPhase, error) {
	var body EditSubscriptionStretchPhase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditSubscriptionStretchPhase overwrites any union data inside the SubscriptionEditOperation as the provided EditSubscriptionStretchPhase
func (t *SubscriptionEditOperation) FromEditSubscriptionStretchPhase(v EditSubscriptionStretchPhase) error {
	v.Op = "stretch_phase"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditSubscriptionStretchPhase performs a merge with any union data inside the SubscriptionEditOperation, using the provided EditSubscriptionStretchPhase
func (t *SubscriptionEditOperation) MergeEditSubscriptionStretchPhase(v EditSubscriptionStretchPhase) error {
	v.Op = "stretch_phase"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEditSubscriptionUnscheduleEdit returns the union data inside the SubscriptionEditOperation as a EditSubscriptionUnscheduleEdit
func (t SubscriptionEditOperation) AsEditSubscriptionUnscheduleEdit() (EditSubscriptionUnscheduleEdit, error) {
	var body EditSubscriptionUnscheduleEdit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEditSubscriptionUnscheduleEdit overwrites any union data inside the SubscriptionEditOperation as the provided EditSubscriptionUnscheduleEdit
func (t *SubscriptionEditOperation) FromEditSubscriptionUnscheduleEdit(v EditSubscriptionUnscheduleEdit) error {
	v.Op = "unschedule_edit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEditSubscriptionUnscheduleEdit performs a merge with any union data inside the SubscriptionEditOperation, using the provided EditSubscriptionUnscheduleEdit
func (t *SubscriptionEditOperation) MergeEditSubscriptionUnscheduleEdit(v EditSubscriptionUnscheduleEdit) error {
	v.Op = "unschedule_edit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionEditOperation) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"op"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SubscriptionEditOperation) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "add_item":
		return t.AsEditSubscriptionAddItem()
	case "add_phase":
		return t.AsEditSubscriptionAddPhase()
	case "remove_item":
		return t.AsEditSubscriptionRemoveItem()
	case "remove_phase":
		return t.AsEditSubscriptionRemovePhase()
	case "stretch_phase":
		return t.AsEditSubscriptionStretchPhase()
	case "unschedule_edit":
		return t.AsEditSubscriptionUnscheduleEdit()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SubscriptionEditOperation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionEditOperation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSubscriptionTimingEnum returns the union data inside the SubscriptionTiming as a SubscriptionTimingEnum
func (t SubscriptionTiming) AsSubscriptionTimingEnum() (SubscriptionTimingEnum, error) {
	var body SubscriptionTimingEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionTimingEnum overwrites any union data inside the SubscriptionTiming as the provided SubscriptionTimingEnum
func (t *SubscriptionTiming) FromSubscriptionTimingEnum(v SubscriptionTimingEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionTimingEnum performs a merge with any union data inside the SubscriptionTiming, using the provided SubscriptionTimingEnum
func (t *SubscriptionTiming) MergeSubscriptionTimingEnum(v SubscriptionTimingEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionTiming1 returns the union data inside the SubscriptionTiming as a SubscriptionTiming1
func (t SubscriptionTiming) AsSubscriptionTiming1() (SubscriptionTiming1, error) {
	var body SubscriptionTiming1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionTiming1 overwrites any union data inside the SubscriptionTiming as the provided SubscriptionTiming1
func (t *SubscriptionTiming) FromSubscriptionTiming1(v SubscriptionTiming1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionTiming1 performs a merge with any union data inside the SubscriptionTiming, using the provided SubscriptionTiming1
func (t *SubscriptionTiming) MergeSubscriptionTiming1(v SubscriptionTiming1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionTiming) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionTiming) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVoidInvoiceLineDiscardAction returns the union data inside the VoidInvoiceLineActionCreate as a VoidInvoiceLineDiscardAction
func (t VoidInvoiceLineActionCreate) AsVoidInvoiceLineDiscardAction() (VoidInvoiceLineDiscardAction, error) {
	var body VoidInvoiceLineDiscardAction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVoidInvoiceLineDiscardAction overwrites any union data inside the VoidInvoiceLineActionCreate as the provided VoidInvoiceLineDiscardAction
func (t *VoidInvoiceLineActionCreate) FromVoidInvoiceLineDiscardAction(v VoidInvoiceLineDiscardAction) error {
	v.Type = "discard"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVoidInvoiceLineDiscardAction performs a merge with any union data inside the VoidInvoiceLineActionCreate, using the provided VoidInvoiceLineDiscardAction
func (t *VoidInvoiceLineActionCreate) MergeVoidInvoiceLineDiscardAction(v VoidInvoiceLineDiscardAction) error {
	v.Type = "discard"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVoidInvoiceLinePendingActionCreate returns the union data inside the VoidInvoiceLineActionCreate as a VoidInvoiceLinePendingActionCreate
func (t VoidInvoiceLineActionCreate) AsVoidInvoiceLinePendingActionCreate() (VoidInvoiceLinePendingActionCreate, error) {
	var body VoidInvoiceLinePendingActionCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVoidInvoiceLinePendingActionCreate overwrites any union data inside the VoidInvoiceLineActionCreate as the provided VoidInvoiceLinePendingActionCreate
func (t *VoidInvoiceLineActionCreate) FromVoidInvoiceLinePendingActionCreate(v VoidInvoiceLinePendingActionCreate) error {
	v.Type = "pending"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVoidInvoiceLinePendingActionCreate performs a merge with any union data inside the VoidInvoiceLineActionCreate, using the provided VoidInvoiceLinePendingActionCreate
func (t *VoidInvoiceLineActionCreate) MergeVoidInvoiceLinePendingActionCreate(v VoidInvoiceLinePendingActionCreate) error {
	v.Type = "pending"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VoidInvoiceLineActionCreate) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t VoidInvoiceLineActionCreate) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "discard":
		return t.AsVoidInvoiceLineDiscardAction()
	case "pending":
		return t.AsVoidInvoiceLinePendingActionCreate()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t VoidInvoiceLineActionCreate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VoidInvoiceLineActionCreate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVoidInvoiceLineDiscardAction returns the union data inside the VoidInvoiceLineActionCreateItem as a VoidInvoiceLineDiscardAction
func (t VoidInvoiceLineActionCreateItem) AsVoidInvoiceLineDiscardAction() (VoidInvoiceLineDiscardAction, error) {
	var body VoidInvoiceLineDiscardAction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVoidInvoiceLineDiscardAction overwrites any union data inside the VoidInvoiceLineActionCreateItem as the provided VoidInvoiceLineDiscardAction
func (t *VoidInvoiceLineActionCreateItem) FromVoidInvoiceLineDiscardAction(v VoidInvoiceLineDiscardAction) error {
	v.Type = "discard"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVoidInvoiceLineDiscardAction performs a merge with any union data inside the VoidInvoiceLineActionCreateItem, using the provided VoidInvoiceLineDiscardAction
func (t *VoidInvoiceLineActionCreateItem) MergeVoidInvoiceLineDiscardAction(v VoidInvoiceLineDiscardAction) error {
	v.Type = "discard"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVoidInvoiceLinePendingActionCreateItem returns the union data inside the VoidInvoiceLineActionCreateItem as a VoidInvoiceLinePendingActionCreateItem
func (t VoidInvoiceLineActionCreateItem) AsVoidInvoiceLinePendingActionCreateItem() (VoidInvoiceLinePendingActionCreateItem, error) {
	var body VoidInvoiceLinePendingActionCreateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVoidInvoiceLinePendingActionCreateItem overwrites any union data inside the VoidInvoiceLineActionCreateItem as the provided VoidInvoiceLinePendingActionCreateItem
func (t *VoidInvoiceLineActionCreateItem) FromVoidInvoiceLinePendingActionCreateItem(v VoidInvoiceLinePendingActionCreateItem) error {
	v.Type = "pending"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVoidInvoiceLinePendingActionCreateItem performs a merge with any union data inside the VoidInvoiceLineActionCreateItem, using the provided VoidInvoiceLinePendingActionCreateItem
func (t *VoidInvoiceLineActionCreateItem) MergeVoidInvoiceLinePendingActionCreateItem(v VoidInvoiceLinePendingActionCreateItem) error {
	v.Type = "pending"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VoidInvoiceLineActionCreateItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t VoidInvoiceLineActionCreateItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "discard":
		return t.AsVoidInvoiceLineDiscardAction()
	case "pending":
		return t.AsVoidInvoiceLinePendingActionCreateItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t VoidInvoiceLineActionCreateItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VoidInvoiceLineActionCreateItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List add-ons
	// (GET /api/v1/addons)
	ListAddons(w http.ResponseWriter, r *http.Request, params ListAddonsParams)
	// Create an add-on
	// (POST /api/v1/addons)
	CreateAddon(w http.ResponseWriter, r *http.Request)
	// Delete add-on
	// (DELETE /api/v1/addons/{addonId})
	DeleteAddon(w http.ResponseWriter, r *http.Request, addonId string)
	// Get add-on
	// (GET /api/v1/addons/{addonId})
	GetAddon(w http.ResponseWriter, r *http.Request, addonId string, params GetAddonParams)
	// Update add-on
	// (PUT /api/v1/addons/{addonId})
	UpdateAddon(w http.ResponseWriter, r *http.Request, addonId string)
	// Archive add-on version
	// (POST /api/v1/addons/{addonId}/archive)
	ArchiveAddon(w http.ResponseWriter, r *http.Request, addonId string)
	// Publish add-on
	// (POST /api/v1/addons/{addonId}/publish)
	PublishAddon(w http.ResponseWriter, r *http.Request, addonId string)
	// List apps
	// (GET /api/v1/apps)
	ListApps(w http.ResponseWriter, r *http.Request, params ListAppsParams)
	// Submit draft synchronization results
	// (POST /api/v1/apps/custom-invoicing/{invoiceId}/draft/synchronized)
	AppCustomInvoicingDraftSynchronized(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Submit issuing synchronization results
	// (POST /api/v1/apps/custom-invoicing/{invoiceId}/issuing/synchronized)
	AppCustomInvoicingIssuingSynchronized(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Update payment status
	// (POST /api/v1/apps/custom-invoicing/{invoiceId}/payment/status)
	AppCustomInvoicingUpdatePaymentStatus(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Uninstall app
	// (DELETE /api/v1/apps/{id})
	UninstallApp(w http.ResponseWriter, r *http.Request, id string)
	// Get app
	// (GET /api/v1/apps/{id})
	GetApp(w http.ResponseWriter, r *http.Request, id string)
	// Update app
	// (PUT /api/v1/apps/{id})
	UpdateApp(w http.ResponseWriter, r *http.Request, id string)
	// Update Stripe API key
	// (PUT /api/v1/apps/{id}/stripe/api-key)
	UpdateStripeAPIKey(w http.ResponseWriter, r *http.Request, id string)
	// Stripe webhook
	// (POST /api/v1/apps/{id}/stripe/webhook)
	AppStripeWebhook(w http.ResponseWriter, r *http.Request, id string)
	// List customer overrides
	// (GET /api/v1/billing/customers)
	ListBillingProfileCustomerOverrides(w http.ResponseWriter, r *http.Request, params ListBillingProfileCustomerOverridesParams)
	// Delete a customer override
	// (DELETE /api/v1/billing/customers/{customerId})
	DeleteBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string)
	// Get a customer override
	// (GET /api/v1/billing/customers/{customerId})
	GetBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string, params GetBillingProfileCustomerOverrideParams)
	// Create a new or update a customer override
	// (PUT /api/v1/billing/customers/{customerId})
	UpsertBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string)
	// Create pending line items
	// (POST /api/v1/billing/customers/{customerId}/invoices/pending-lines)
	CreatePendingInvoiceLine(w http.ResponseWriter, r *http.Request, customerId string)
	// Simulate an invoice for a customer
	// (POST /api/v1/billing/customers/{customerId}/invoices/simulate)
	SimulateInvoice(w http.ResponseWriter, r *http.Request, customerId string)
	// List invoices
	// (GET /api/v1/billing/invoices)
	ListInvoices(w http.ResponseWriter, r *http.Request, params ListInvoicesParams)
	// Invoice a customer based on the pending line items
	// (POST /api/v1/billing/invoices/invoice)
	InvoicePendingLinesAction(w http.ResponseWriter, r *http.Request)
	// Delete an invoice
	// (DELETE /api/v1/billing/invoices/{invoiceId})
	DeleteInvoice(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Get an invoice
	// (GET /api/v1/billing/invoices/{invoiceId})
	GetInvoice(w http.ResponseWriter, r *http.Request, invoiceId string, params GetInvoiceParams)
	// Update an invoice
	// (PUT /api/v1/billing/invoices/{invoiceId})
	UpdateInvoice(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Advance the invoice's state to the next status
	// (POST /api/v1/billing/invoices/{invoiceId}/advance)
	AdvanceInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Send the invoice to the customer
	// (POST /api/v1/billing/invoices/{invoiceId}/approve)
	ApproveInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Retry advancing the invoice after a failed attempt.
	// (POST /api/v1/billing/invoices/{invoiceId}/retry)
	RetryInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Snapshot quantities for usage based line items
	// (POST /api/v1/billing/invoices/{invoiceId}/snapshot-quantities)
	SnapshotQuantitiesInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Recalculate an invoice's tax amounts
	// (POST /api/v1/billing/invoices/{invoiceId}/taxes/recalculate)
	RecalculateInvoiceTaxAction(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Void an invoice
	// (POST /api/v1/billing/invoices/{invoiceId}/void)
	VoidInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string)
	// List billing profiles
	// (GET /api/v1/billing/profiles)
	ListBillingProfiles(w http.ResponseWriter, r *http.Request, params ListBillingProfilesParams)
	// Create a new billing profile
	// (POST /api/v1/billing/profiles)
	CreateBillingProfile(w http.ResponseWriter, r *http.Request)
	// Delete a billing profile
	// (DELETE /api/v1/billing/profiles/{id})
	DeleteBillingProfile(w http.ResponseWriter, r *http.Request, id string)
	// Get a billing profile
	// (GET /api/v1/billing/profiles/{id})
	GetBillingProfile(w http.ResponseWriter, r *http.Request, id string, params GetBillingProfileParams)
	// Update a billing profile
	// (PUT /api/v1/billing/profiles/{id})
	UpdateBillingProfile(w http.ResponseWriter, r *http.Request, id string)
	// List customers
	// (GET /api/v1/customers)
	ListCustomers(w http.ResponseWriter, r *http.Request, params ListCustomersParams)
	// Create customer
	// (POST /api/v1/customers)
	CreateCustomer(w http.ResponseWriter, r *http.Request)
	// Delete customer
	// (DELETE /api/v1/customers/{customerIdOrKey})
	DeleteCustomer(w http.ResponseWriter, r *http.Request, customerIdOrKey string)
	// Get customer
	// (GET /api/v1/customers/{customerIdOrKey})
	GetCustomer(w http.ResponseWriter, r *http.Request, customerIdOrKey string, params GetCustomerParams)
	// Update customer
	// (PUT /api/v1/customers/{customerIdOrKey})
	UpdateCustomer(w http.ResponseWriter, r *http.Request, customerIdOrKey string)
	// Get customer access
	// (GET /api/v1/customers/{customerIdOrKey}/access)
	GetCustomerAccess(w http.ResponseWriter, r *http.Request, customerIdOrKey string)
	// List customer app data
	// (GET /api/v1/customers/{customerIdOrKey}/apps)
	ListCustomerAppData(w http.ResponseWriter, r *http.Request, customerIdOrKey string, params ListCustomerAppDataParams)
	// Upsert customer app data
	// (PUT /api/v1/customers/{customerIdOrKey}/apps)
	UpsertCustomerAppData(w http.ResponseWriter, r *http.Request, customerIdOrKey string)
	// Delete customer app data
	// (DELETE /api/v1/customers/{customerIdOrKey}/apps/{appId})
	DeleteCustomerAppData(w http.ResponseWriter, r *http.Request, customerIdOrKey string, appId string)
	// Get entitlement value
	// (GET /api/v1/customers/{customerIdOrKey}/entitlements/{featureKey}/value)
	GetCustomerEntitlementValue(w http.ResponseWriter, r *http.Request, customerIdOrKey string, featureKey string, params GetCustomerEntitlementValueParams)
	// List customer subscriptions
	// (GET /api/v1/customers/{customerIdOrKey}/subscriptions)
	ListCustomerSubscriptions(w http.ResponseWriter, r *http.Request, customerIdOrKey string, params ListCustomerSubscriptionsParams)
	// Get event metrics
	// (GET /api/v1/debug/metrics)
	GetDebugMetrics(w http.ResponseWriter, r *http.Request)
	// List all entitlements
	// (GET /api/v1/entitlements)
	ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams)
	// Get entitlement by id
	// (GET /api/v1/entitlements/{entitlementId})
	GetEntitlementById(w http.ResponseWriter, r *http.Request, entitlementId string)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId string)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId string)
	// List grants
	// (GET /api/v1/grants)
	ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams)
	// Void grant
	// (DELETE /api/v1/grants/{grantId})
	VoidGrant(w http.ResponseWriter, r *http.Request, grantId string)
	// List supported currencies
	// (GET /api/v1/info/currencies)
	ListCurrencies(w http.ResponseWriter, r *http.Request)
	// Get progress
	// (GET /api/v1/info/progress/{id})
	GetProgress(w http.ResponseWriter, r *http.Request, id string)
	// List available apps
	// (GET /api/v1/marketplace/listings)
	ListMarketplaceListings(w http.ResponseWriter, r *http.Request, params ListMarketplaceListingsParams)
	// Get app details by type
	// (GET /api/v1/marketplace/listings/{type})
	GetMarketplaceListing(w http.ResponseWriter, r *http.Request, pType AppType)
	// Install app
	// (POST /api/v1/marketplace/listings/{type}/install)
	MarketplaceAppInstall(w http.ResponseWriter, r *http.Request, pType MarketplaceInstallRequestType)
	// Install app via API key
	// (POST /api/v1/marketplace/listings/{type}/install/apikey)
	MarketplaceAppAPIKeyInstall(w http.ResponseWriter, r *http.Request, pType MarketplaceApiKeyInstallRequestType)
	// Get OAuth2 install URL
	// (GET /api/v1/marketplace/listings/{type}/install/oauth2)
	MarketplaceOAuth2InstallGetURL(w http.ResponseWriter, r *http.Request, pType AppType)
	// Install app via OAuth2
	// (GET /api/v1/marketplace/listings/{type}/install/oauth2/authorize)
	MarketplaceOAuth2InstallAuthorize(w http.ResponseWriter, r *http.Request, pType MarketplaceOAuth2InstallAuthorizeRequestType, params MarketplaceOAuth2InstallAuthorizeParams)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request, params ListMetersParams)
	// Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// Update meter
	// (PUT /api/v1/meters/{meterIdOrSlug})
	UpdateMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string, params QueryMeterParams)
	// Query meter
	// (POST /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeterPost(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// List notification channels
	// (GET /api/v1/notification/channels)
	ListNotificationChannels(w http.ResponseWriter, r *http.Request, params ListNotificationChannelsParams)
	// Create a notification channel
	// (POST /api/v1/notification/channels)
	CreateNotificationChannel(w http.ResponseWriter, r *http.Request)
	// Delete a notification channel
	// (DELETE /api/v1/notification/channels/{channelId})
	DeleteNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string)
	// Get notification channel
	// (GET /api/v1/notification/channels/{channelId})
	GetNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string)
	// Update a notification channel
	// (PUT /api/v1/notification/channels/{channelId})
	UpdateNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string)
	// List notification events
	// (GET /api/v1/notification/events)
	ListNotificationEvents(w http.ResponseWriter, r *http.Request, params ListNotificationEventsParams)
	// Get notification event
	// (GET /api/v1/notification/events/{eventId})
	GetNotificationEvent(w http.ResponseWriter, r *http.Request, eventId string)
	// List notification rules
	// (GET /api/v1/notification/rules)
	ListNotificationRules(w http.ResponseWriter, r *http.Request, params ListNotificationRulesParams)
	// Create a notification rule
	// (POST /api/v1/notification/rules)
	CreateNotificationRule(w http.ResponseWriter, r *http.Request)
	// Delete a notification rule
	// (DELETE /api/v1/notification/rules/{ruleId})
	DeleteNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get notification rule
	// (GET /api/v1/notification/rules/{ruleId})
	GetNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update a notification rule
	// (PUT /api/v1/notification/rules/{ruleId})
	UpdateNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Test notification rule
	// (POST /api/v1/notification/rules/{ruleId}/test)
	TestNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// List plans
	// (GET /api/v1/plans)
	ListPlans(w http.ResponseWriter, r *http.Request, params ListPlansParams)
	// Create a plan
	// (POST /api/v1/plans)
	CreatePlan(w http.ResponseWriter, r *http.Request)
	// New draft plan
	// (POST /api/v1/plans/{planIdOrKey}/next)
	NextPlan(w http.ResponseWriter, r *http.Request, planIdOrKey string)
	// Delete plan
	// (DELETE /api/v1/plans/{planId})
	DeletePlan(w http.ResponseWriter, r *http.Request, planId string)
	// Get plan
	// (GET /api/v1/plans/{planId})
	GetPlan(w http.ResponseWriter, r *http.Request, planId string, params GetPlanParams)
	// Update a plan
	// (PUT /api/v1/plans/{planId})
	UpdatePlan(w http.ResponseWriter, r *http.Request, planId string)
	// List all available add-ons for plan
	// (GET /api/v1/plans/{planId}/addons)
	ListPlanAddons(w http.ResponseWriter, r *http.Request, planId string, params ListPlanAddonsParams)
	// Create new add-on assignment for plan
	// (POST /api/v1/plans/{planId}/addons)
	CreatePlanAddon(w http.ResponseWriter, r *http.Request, planId string)
	// Delete add-on assignment for plan
	// (DELETE /api/v1/plans/{planId}/addons/{planAddonId})
	DeletePlanAddon(w http.ResponseWriter, r *http.Request, planId string, planAddonId string)
	// Get add-on assignment for plan
	// (GET /api/v1/plans/{planId}/addons/{planAddonId})
	GetPlanAddon(w http.ResponseWriter, r *http.Request, planId string, planAddonId string)
	// Update add-on assignment for plan
	// (PUT /api/v1/plans/{planId}/addons/{planAddonId})
	UpdatePlanAddon(w http.ResponseWriter, r *http.Request, planId string, planAddonId string)
	// Archive plan version
	// (POST /api/v1/plans/{planId}/archive)
	ArchivePlan(w http.ResponseWriter, r *http.Request, planId string)
	// Publish plan
	// (POST /api/v1/plans/{planId}/publish)
	PublishPlan(w http.ResponseWriter, r *http.Request, planId string)
	// Query meter Query meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// List consumer portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create consumer portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// Create checkout session
	// (POST /api/v1/stripe/checkout/sessions)
	CreateStripeCheckoutSession(w http.ResponseWriter, r *http.Request)
	// List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey string)
	// Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey string)
	// List entitlements
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
	ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, params ListSubjectEntitlementsParams)
	// Create an entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
	CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string)
	// List entitlement grants
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
	ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params ListEntitlementGrantsParams)
	// Create grant
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
	CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string)
	// Override entitlement
	// (PUT /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override)
	OverrideEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string)
	// Get entitlement value
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
	GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params GetEntitlementValueParams)
	// Delete entitlement
	// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string)
	// Get entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string)
	// Get entitlement history
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
	GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string, params GetEntitlementHistoryParams)
	// Reset entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
	ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string)
	// Create subscription
	// (POST /api/v1/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete subscription
	// (DELETE /api/v1/subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Get subscription
	// (GET /api/v1/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string, params GetSubscriptionParams)
	// Edit subscription
	// (PATCH /api/v1/subscriptions/{subscriptionId})
	EditSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// List subscription addons
	// (GET /api/v1/subscriptions/{subscriptionId}/addons)
	ListSubscriptionAddons(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Create subscription addon
	// (POST /api/v1/subscriptions/{subscriptionId}/addons)
	CreateSubscriptionAddon(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Get subscription addon
	// (GET /api/v1/subscriptions/{subscriptionId}/addons/{subscriptionAddonId})
	GetSubscriptionAddon(w http.ResponseWriter, r *http.Request, subscriptionId string, subscriptionAddonId string)
	// Update subscription addon
	// (PATCH /api/v1/subscriptions/{subscriptionId}/addons/{subscriptionAddonId})
	UpdateSubscriptionAddon(w http.ResponseWriter, r *http.Request, subscriptionId string, subscriptionAddonId string)
	// Cancel subscription
	// (POST /api/v1/subscriptions/{subscriptionId}/cancel)
	CancelSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Change subscription
	// (POST /api/v1/subscriptions/{subscriptionId}/change)
	ChangeSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Migrate subscription
	// (POST /api/v1/subscriptions/{subscriptionId}/migrate)
	MigrateSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Restore subscription
	// (POST /api/v1/subscriptions/{subscriptionId}/restore)
	RestoreSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Unschedule cancelation
	// (POST /api/v1/subscriptions/{subscriptionId}/unschedule-cancelation)
	UnscheduleCancelation(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// List ingested events
	// (GET /api/v2/events)
	ListEventsV2(w http.ResponseWriter, r *http.Request, params ListEventsV2Params)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List add-ons
// (GET /api/v1/addons)
func (_ Unimplemented) ListAddons(w http.ResponseWriter, r *http.Request, params ListAddonsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an add-on
// (POST /api/v1/addons)
func (_ Unimplemented) CreateAddon(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete add-on
// (DELETE /api/v1/addons/{addonId})
func (_ Unimplemented) DeleteAddon(w http.ResponseWriter, r *http.Request, addonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get add-on
// (GET /api/v1/addons/{addonId})
func (_ Unimplemented) GetAddon(w http.ResponseWriter, r *http.Request, addonId string, params GetAddonParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update add-on
// (PUT /api/v1/addons/{addonId})
func (_ Unimplemented) UpdateAddon(w http.ResponseWriter, r *http.Request, addonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Archive add-on version
// (POST /api/v1/addons/{addonId}/archive)
func (_ Unimplemented) ArchiveAddon(w http.ResponseWriter, r *http.Request, addonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish add-on
// (POST /api/v1/addons/{addonId}/publish)
func (_ Unimplemented) PublishAddon(w http.ResponseWriter, r *http.Request, addonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List apps
// (GET /api/v1/apps)
func (_ Unimplemented) ListApps(w http.ResponseWriter, r *http.Request, params ListAppsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit draft synchronization results
// (POST /api/v1/apps/custom-invoicing/{invoiceId}/draft/synchronized)
func (_ Unimplemented) AppCustomInvoicingDraftSynchronized(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit issuing synchronization results
// (POST /api/v1/apps/custom-invoicing/{invoiceId}/issuing/synchronized)
func (_ Unimplemented) AppCustomInvoicingIssuingSynchronized(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update payment status
// (POST /api/v1/apps/custom-invoicing/{invoiceId}/payment/status)
func (_ Unimplemented) AppCustomInvoicingUpdatePaymentStatus(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Uninstall app
// (DELETE /api/v1/apps/{id})
func (_ Unimplemented) UninstallApp(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get app
// (GET /api/v1/apps/{id})
func (_ Unimplemented) GetApp(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update app
// (PUT /api/v1/apps/{id})
func (_ Unimplemented) UpdateApp(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Stripe API key
// (PUT /api/v1/apps/{id}/stripe/api-key)
func (_ Unimplemented) UpdateStripeAPIKey(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stripe webhook
// (POST /api/v1/apps/{id}/stripe/webhook)
func (_ Unimplemented) AppStripeWebhook(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List customer overrides
// (GET /api/v1/billing/customers)
func (_ Unimplemented) ListBillingProfileCustomerOverrides(w http.ResponseWriter, r *http.Request, params ListBillingProfileCustomerOverridesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a customer override
// (DELETE /api/v1/billing/customers/{customerId})
func (_ Unimplemented) DeleteBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a customer override
// (GET /api/v1/billing/customers/{customerId})
func (_ Unimplemented) GetBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string, params GetBillingProfileCustomerOverrideParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new or update a customer override
// (PUT /api/v1/billing/customers/{customerId})
func (_ Unimplemented) UpsertBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create pending line items
// (POST /api/v1/billing/customers/{customerId}/invoices/pending-lines)
func (_ Unimplemented) CreatePendingInvoiceLine(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate an invoice for a customer
// (POST /api/v1/billing/customers/{customerId}/invoices/simulate)
func (_ Unimplemented) SimulateInvoice(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List invoices
// (GET /api/v1/billing/invoices)
func (_ Unimplemented) ListInvoices(w http.ResponseWriter, r *http.Request, params ListInvoicesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Invoice a customer based on the pending line items
// (POST /api/v1/billing/invoices/invoice)
func (_ Unimplemented) InvoicePendingLinesAction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an invoice
// (DELETE /api/v1/billing/invoices/{invoiceId})
func (_ Unimplemented) DeleteInvoice(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an invoice
// (GET /api/v1/billing/invoices/{invoiceId})
func (_ Unimplemented) GetInvoice(w http.ResponseWriter, r *http.Request, invoiceId string, params GetInvoiceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an invoice
// (PUT /api/v1/billing/invoices/{invoiceId})
func (_ Unimplemented) UpdateInvoice(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Advance the invoice's state to the next status
// (POST /api/v1/billing/invoices/{invoiceId}/advance)
func (_ Unimplemented) AdvanceInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send the invoice to the customer
// (POST /api/v1/billing/invoices/{invoiceId}/approve)
func (_ Unimplemented) ApproveInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry advancing the invoice after a failed attempt.
// (POST /api/v1/billing/invoices/{invoiceId}/retry)
func (_ Unimplemented) RetryInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Snapshot quantities for usage based line items
// (POST /api/v1/billing/invoices/{invoiceId}/snapshot-quantities)
func (_ Unimplemented) SnapshotQuantitiesInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Recalculate an invoice's tax amounts
// (POST /api/v1/billing/invoices/{invoiceId}/taxes/recalculate)
func (_ Unimplemented) RecalculateInvoiceTaxAction(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void an invoice
// (POST /api/v1/billing/invoices/{invoiceId}/void)
func (_ Unimplemented) VoidInvoiceAction(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List billing profiles
// (GET /api/v1/billing/profiles)
func (_ Unimplemented) ListBillingProfiles(w http.ResponseWriter, r *http.Request, params ListBillingProfilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new billing profile
// (POST /api/v1/billing/profiles)
func (_ Unimplemented) CreateBillingProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a billing profile
// (DELETE /api/v1/billing/profiles/{id})
func (_ Unimplemented) DeleteBillingProfile(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a billing profile
// (GET /api/v1/billing/profiles/{id})
func (_ Unimplemented) GetBillingProfile(w http.ResponseWriter, r *http.Request, id string, params GetBillingProfileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a billing profile
// (PUT /api/v1/billing/profiles/{id})
func (_ Unimplemented) UpdateBillingProfile(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List customers
// (GET /api/v1/customers)
func (_ Unimplemented) ListCustomers(w http.ResponseWriter, r *http.Request, params ListCustomersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create customer
// (POST /api/v1/customers)
func (_ Unimplemented) CreateCustomer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer
// (DELETE /api/v1/customers/{customerIdOrKey})
func (_ Unimplemented) DeleteCustomer(w http.ResponseWriter, r *http.Request, customerIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer
// (GET /api/v1/customers/{customerIdOrKey})
func (_ Unimplemented) GetCustomer(w http.ResponseWriter, r *http.Request, customerIdOrKey string, params GetCustomerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update customer
// (PUT /api/v1/customers/{customerIdOrKey})
func (_ Unimplemented) UpdateCustomer(w http.ResponseWriter, r *http.Request, customerIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer access
// (GET /api/v1/customers/{customerIdOrKey}/access)
func (_ Unimplemented) GetCustomerAccess(w http.ResponseWriter, r *http.Request, customerIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List customer app data
// (GET /api/v1/customers/{customerIdOrKey}/apps)
func (_ Unimplemented) ListCustomerAppData(w http.ResponseWriter, r *http.Request, customerIdOrKey string, params ListCustomerAppDataParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upsert customer app data
// (PUT /api/v1/customers/{customerIdOrKey}/apps)
func (_ Unimplemented) UpsertCustomerAppData(w http.ResponseWriter, r *http.Request, customerIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer app data
// (DELETE /api/v1/customers/{customerIdOrKey}/apps/{appId})
func (_ Unimplemented) DeleteCustomerAppData(w http.ResponseWriter, r *http.Request, customerIdOrKey string, appId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement value
// (GET /api/v1/customers/{customerIdOrKey}/entitlements/{featureKey}/value)
func (_ Unimplemented) GetCustomerEntitlementValue(w http.ResponseWriter, r *http.Request, customerIdOrKey string, featureKey string, params GetCustomerEntitlementValueParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List customer subscriptions
// (GET /api/v1/customers/{customerIdOrKey}/subscriptions)
func (_ Unimplemented) ListCustomerSubscriptions(w http.ResponseWriter, r *http.Request, customerIdOrKey string, params ListCustomerSubscriptionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get event metrics
// (GET /api/v1/debug/metrics)
func (_ Unimplemented) GetDebugMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all entitlements
// (GET /api/v1/entitlements)
func (_ Unimplemented) ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement by id
// (GET /api/v1/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlementById(w http.ResponseWriter, r *http.Request, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants
// (GET /api/v1/grants)
func (_ Unimplemented) ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void grant
// (DELETE /api/v1/grants/{grantId})
func (_ Unimplemented) VoidGrant(w http.ResponseWriter, r *http.Request, grantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List supported currencies
// (GET /api/v1/info/currencies)
func (_ Unimplemented) ListCurrencies(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get progress
// (GET /api/v1/info/progress/{id})
func (_ Unimplemented) GetProgress(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available apps
// (GET /api/v1/marketplace/listings)
func (_ Unimplemented) ListMarketplaceListings(w http.ResponseWriter, r *http.Request, params ListMarketplaceListingsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get app details by type
// (GET /api/v1/marketplace/listings/{type})
func (_ Unimplemented) GetMarketplaceListing(w http.ResponseWriter, r *http.Request, pType AppType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install app
// (POST /api/v1/marketplace/listings/{type}/install)
func (_ Unimplemented) MarketplaceAppInstall(w http.ResponseWriter, r *http.Request, pType MarketplaceInstallRequestType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install app via API key
// (POST /api/v1/marketplace/listings/{type}/install/apikey)
func (_ Unimplemented) MarketplaceAppAPIKeyInstall(w http.ResponseWriter, r *http.Request, pType MarketplaceApiKeyInstallRequestType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get OAuth2 install URL
// (GET /api/v1/marketplace/listings/{type}/install/oauth2)
func (_ Unimplemented) MarketplaceOAuth2InstallGetURL(w http.ResponseWriter, r *http.Request, pType AppType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install app via OAuth2
// (GET /api/v1/marketplace/listings/{type}/install/oauth2/authorize)
func (_ Unimplemented) MarketplaceOAuth2InstallAuthorize(w http.ResponseWriter, r *http.Request, pType MarketplaceOAuth2InstallAuthorizeRequestType, params MarketplaceOAuth2InstallAuthorizeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request, params ListMetersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update meter
// (PUT /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) UpdateMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (POST /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeterPost(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification channels
// (GET /api/v1/notification/channels)
func (_ Unimplemented) ListNotificationChannels(w http.ResponseWriter, r *http.Request, params ListNotificationChannelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification channel
// (POST /api/v1/notification/channels)
func (_ Unimplemented) CreateNotificationChannel(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notification channel
// (DELETE /api/v1/notification/channels/{channelId})
func (_ Unimplemented) DeleteNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification channel
// (GET /api/v1/notification/channels/{channelId})
func (_ Unimplemented) GetNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a notification channel
// (PUT /api/v1/notification/channels/{channelId})
func (_ Unimplemented) UpdateNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification events
// (GET /api/v1/notification/events)
func (_ Unimplemented) ListNotificationEvents(w http.ResponseWriter, r *http.Request, params ListNotificationEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification event
// (GET /api/v1/notification/events/{eventId})
func (_ Unimplemented) GetNotificationEvent(w http.ResponseWriter, r *http.Request, eventId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification rules
// (GET /api/v1/notification/rules)
func (_ Unimplemented) ListNotificationRules(w http.ResponseWriter, r *http.Request, params ListNotificationRulesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification rule
// (POST /api/v1/notification/rules)
func (_ Unimplemented) CreateNotificationRule(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notification rule
// (DELETE /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) DeleteNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification rule
// (GET /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) GetNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a notification rule
// (PUT /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) UpdateNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Test notification rule
// (POST /api/v1/notification/rules/{ruleId}/test)
func (_ Unimplemented) TestNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List plans
// (GET /api/v1/plans)
func (_ Unimplemented) ListPlans(w http.ResponseWriter, r *http.Request, params ListPlansParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a plan
// (POST /api/v1/plans)
func (_ Unimplemented) CreatePlan(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// New draft plan
// (POST /api/v1/plans/{planIdOrKey}/next)
func (_ Unimplemented) NextPlan(w http.ResponseWriter, r *http.Request, planIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete plan
// (DELETE /api/v1/plans/{planId})
func (_ Unimplemented) DeletePlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get plan
// (GET /api/v1/plans/{planId})
func (_ Unimplemented) GetPlan(w http.ResponseWriter, r *http.Request, planId string, params GetPlanParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a plan
// (PUT /api/v1/plans/{planId})
func (_ Unimplemented) UpdatePlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available add-ons for plan
// (GET /api/v1/plans/{planId}/addons)
func (_ Unimplemented) ListPlanAddons(w http.ResponseWriter, r *http.Request, planId string, params ListPlanAddonsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new add-on assignment for plan
// (POST /api/v1/plans/{planId}/addons)
func (_ Unimplemented) CreatePlanAddon(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete add-on assignment for plan
// (DELETE /api/v1/plans/{planId}/addons/{planAddonId})
func (_ Unimplemented) DeletePlanAddon(w http.ResponseWriter, r *http.Request, planId string, planAddonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get add-on assignment for plan
// (GET /api/v1/plans/{planId}/addons/{planAddonId})
func (_ Unimplemented) GetPlanAddon(w http.ResponseWriter, r *http.Request, planId string, planAddonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update add-on assignment for plan
// (PUT /api/v1/plans/{planId}/addons/{planAddonId})
func (_ Unimplemented) UpdatePlanAddon(w http.ResponseWriter, r *http.Request, planId string, planAddonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Archive plan version
// (POST /api/v1/plans/{planId}/archive)
func (_ Unimplemented) ArchivePlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish plan
// (POST /api/v1/plans/{planId}/publish)
func (_ Unimplemented) PublishPlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter Query meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List consumer portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create consumer portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create checkout session
// (POST /api/v1/stripe/checkout/sessions)
func (_ Unimplemented) CreateStripeCheckoutSession(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, params ListSubjectEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlement grants
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
func (_ Unimplemented) ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params ListEntitlementGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create grant
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Override entitlement
// (PUT /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override)
func (_ Unimplemented) OverrideEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement value
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
func (_ Unimplemented) GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params GetEntitlementValueParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete entitlement
// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement history
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
func (_ Unimplemented) GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string, params GetEntitlementHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
func (_ Unimplemented) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create subscription
// (POST /api/v1/subscriptions)
func (_ Unimplemented) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete subscription
// (DELETE /api/v1/subscriptions/{subscriptionId})
func (_ Unimplemented) DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get subscription
// (GET /api/v1/subscriptions/{subscriptionId})
func (_ Unimplemented) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string, params GetSubscriptionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Edit subscription
// (PATCH /api/v1/subscriptions/{subscriptionId})
func (_ Unimplemented) EditSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List subscription addons
// (GET /api/v1/subscriptions/{subscriptionId}/addons)
func (_ Unimplemented) ListSubscriptionAddons(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create subscription addon
// (POST /api/v1/subscriptions/{subscriptionId}/addons)
func (_ Unimplemented) CreateSubscriptionAddon(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get subscription addon
// (GET /api/v1/subscriptions/{subscriptionId}/addons/{subscriptionAddonId})
func (_ Unimplemented) GetSubscriptionAddon(w http.ResponseWriter, r *http.Request, subscriptionId string, subscriptionAddonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update subscription addon
// (PATCH /api/v1/subscriptions/{subscriptionId}/addons/{subscriptionAddonId})
func (_ Unimplemented) UpdateSubscriptionAddon(w http.ResponseWriter, r *http.Request, subscriptionId string, subscriptionAddonId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel subscription
// (POST /api/v1/subscriptions/{subscriptionId}/cancel)
func (_ Unimplemented) CancelSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change subscription
// (POST /api/v1/subscriptions/{subscriptionId}/change)
func (_ Unimplemented) ChangeSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Migrate subscription
// (POST /api/v1/subscriptions/{subscriptionId}/migrate)
func (_ Unimplemented) MigrateSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Restore subscription
// (POST /api/v1/subscriptions/{subscriptionId}/restore)
func (_ Unimplemented) RestoreSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unschedule cancelation
// (POST /api/v1/subscriptions/{subscriptionId}/unschedule-cancelation)
func (_ Unimplemented) UnscheduleCancelation(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v2/events)
func (_ Unimplemented) ListEventsV2(w http.ResponseWriter, r *http.Request, params ListEventsV2Params) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAddons operation middleware
func (siw *ServerInterfaceWrapper) ListAddons(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAddonsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "keyVersion" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "keyVersion", r.URL.Query(), &params.KeyVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyVersion", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAddons(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAddon operation middleware
func (siw *ServerInterfaceWrapper) CreateAddon(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAddon(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAddon operation middleware
func (siw *ServerInterfaceWrapper) DeleteAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "addonId" -------------
	var addonId string

	err = runtime.BindStyledParameterWithOptions("simple", "addonId", chi.URLParam(r, "addonId"), &addonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "addonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAddon(w, r, addonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAddon operation middleware
func (siw *ServerInterfaceWrapper) GetAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "addonId" -------------
	var addonId string

	err = runtime.BindStyledParameterWithOptions("simple", "addonId", chi.URLParam(r, "addonId"), &addonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "addonId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddonParams

	// ------------- Optional query parameter "includeLatest" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeLatest", r.URL.Query(), &params.IncludeLatest)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeLatest", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAddon(w, r, addonId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAddon operation middleware
func (siw *ServerInterfaceWrapper) UpdateAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "addonId" -------------
	var addonId string

	err = runtime.BindStyledParameterWithOptions("simple", "addonId", chi.URLParam(r, "addonId"), &addonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "addonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAddon(w, r, addonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ArchiveAddon operation middleware
func (siw *ServerInterfaceWrapper) ArchiveAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "addonId" -------------
	var addonId string

	err = runtime.BindStyledParameterWithOptions("simple", "addonId", chi.URLParam(r, "addonId"), &addonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "addonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArchiveAddon(w, r, addonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PublishAddon operation middleware
func (siw *ServerInterfaceWrapper) PublishAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "addonId" -------------
	var addonId string

	err = runtime.BindStyledParameterWithOptions("simple", "addonId", chi.URLParam(r, "addonId"), &addonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "addonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishAddon(w, r, addonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListApps operation middleware
func (siw *ServerInterfaceWrapper) ListApps(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAppsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListApps(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AppCustomInvoicingDraftSynchronized operation middleware
func (siw *ServerInterfaceWrapper) AppCustomInvoicingDraftSynchronized(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppCustomInvoicingDraftSynchronized(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AppCustomInvoicingIssuingSynchronized operation middleware
func (siw *ServerInterfaceWrapper) AppCustomInvoicingIssuingSynchronized(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppCustomInvoicingIssuingSynchronized(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AppCustomInvoicingUpdatePaymentStatus operation middleware
func (siw *ServerInterfaceWrapper) AppCustomInvoicingUpdatePaymentStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppCustomInvoicingUpdatePaymentStatus(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UninstallApp operation middleware
func (siw *ServerInterfaceWrapper) UninstallApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UninstallApp(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApp operation middleware
func (siw *ServerInterfaceWrapper) GetApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApp(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateApp operation middleware
func (siw *ServerInterfaceWrapper) UpdateApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateApp(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateStripeAPIKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateStripeAPIKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateStripeAPIKey(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AppStripeWebhook operation middleware
func (siw *ServerInterfaceWrapper) AppStripeWebhook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppStripeWebhook(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListBillingProfileCustomerOverrides operation middleware
func (siw *ServerInterfaceWrapper) ListBillingProfileCustomerOverrides(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBillingProfileCustomerOverridesParams

	// ------------- Optional query parameter "billingProfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "billingProfile", r.URL.Query(), &params.BillingProfile)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "billingProfile", Err: err})
		return
	}

	// ------------- Optional query parameter "includeAllCustomers" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeAllCustomers", r.URL.Query(), &params.IncludeAllCustomers)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeAllCustomers", Err: err})
		return
	}

	// ------------- Optional query parameter "customerId" -------------

	err = runtime.BindQueryParameter("form", true, false, "customerId", r.URL.Query(), &params.CustomerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Optional query parameter "customerName" -------------

	err = runtime.BindQueryParameter("form", false, false, "customerName", r.URL.Query(), &params.CustomerName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerName", Err: err})
		return
	}

	// ------------- Optional query parameter "customerKey" -------------

	err = runtime.BindQueryParameter("form", false, false, "customerKey", r.URL.Query(), &params.CustomerKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerKey", Err: err})
		return
	}

	// ------------- Optional query parameter "customerPrimaryEmail" -------------

	err = runtime.BindQueryParameter("form", false, false, "customerPrimaryEmail", r.URL.Query(), &params.CustomerPrimaryEmail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerPrimaryEmail", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBillingProfileCustomerOverrides(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteBillingProfileCustomerOverride operation middleware
func (siw *ServerInterfaceWrapper) DeleteBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBillingProfileCustomerOverride(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBillingProfileCustomerOverride operation middleware
func (siw *ServerInterfaceWrapper) GetBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingProfileCustomerOverrideParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBillingProfileCustomerOverride(w, r, customerId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpsertBillingProfileCustomerOverride operation middleware
func (siw *ServerInterfaceWrapper) UpsertBillingProfileCustomerOverride(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertBillingProfileCustomerOverride(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePendingInvoiceLine operation middleware
func (siw *ServerInterfaceWrapper) CreatePendingInvoiceLine(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePendingInvoiceLine(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SimulateInvoice operation middleware
func (siw *ServerInterfaceWrapper) SimulateInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SimulateInvoice(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListInvoices operation middleware
func (siw *ServerInterfaceWrapper) ListInvoices(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListInvoicesParams

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	// ------------- Optional query parameter "extendedStatuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "extendedStatuses", r.URL.Query(), &params.ExtendedStatuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "extendedStatuses", Err: err})
		return
	}

	// ------------- Optional query parameter "issuedAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "issuedAfter", r.URL.Query(), &params.IssuedAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuedAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "issuedBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "issuedBefore", r.URL.Query(), &params.IssuedBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuedBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "periodStartAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "periodStartAfter", r.URL.Query(), &params.PeriodStartAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "periodStartAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "periodStartBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "periodStartBefore", r.URL.Query(), &params.PeriodStartBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "periodStartBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", r.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", r.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "customers" -------------

	err = runtime.BindQueryParameter("form", true, false, "customers", r.URL.Query(), &params.Customers)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customers", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListInvoices(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// InvoicePendingLinesAction operation middleware
func (siw *ServerInterfaceWrapper) InvoicePendingLinesAction(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvoicePendingLinesAction(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteInvoice operation middleware
func (siw *ServerInterfaceWrapper) DeleteInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInvoice(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInvoice operation middleware
func (siw *ServerInterfaceWrapper) GetInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoiceParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeletedLines" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeletedLines", r.URL.Query(), &params.IncludeDeletedLines)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeletedLines", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInvoice(w, r, invoiceId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateInvoice operation middleware
func (siw *ServerInterfaceWrapper) UpdateInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInvoice(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AdvanceInvoiceAction operation middleware
func (siw *ServerInterfaceWrapper) AdvanceInvoiceAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdvanceInvoiceAction(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ApproveInvoiceAction operation middleware
func (siw *ServerInterfaceWrapper) ApproveInvoiceAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApproveInvoiceAction(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryInvoiceAction operation middleware
func (siw *ServerInterfaceWrapper) RetryInvoiceAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryInvoiceAction(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SnapshotQuantitiesInvoiceAction operation middleware
func (siw *ServerInterfaceWrapper) SnapshotQuantitiesInvoiceAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SnapshotQuantitiesInvoiceAction(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RecalculateInvoiceTaxAction operation middleware
func (siw *ServerInterfaceWrapper) RecalculateInvoiceTaxAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RecalculateInvoiceTaxAction(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VoidInvoiceAction operation middleware
func (siw *ServerInterfaceWrapper) VoidInvoiceAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidInvoiceAction(w, r, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListBillingProfiles operation middleware
func (siw *ServerInterfaceWrapper) ListBillingProfiles(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBillingProfilesParams

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBillingProfiles(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateBillingProfile operation middleware
func (siw *ServerInterfaceWrapper) CreateBillingProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBillingProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteBillingProfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteBillingProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBillingProfile(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBillingProfile operation middleware
func (siw *ServerInterfaceWrapper) GetBillingProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingProfileParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBillingProfile(w, r, id, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateBillingProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateBillingProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBillingProfile(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCustomers operation middleware
func (siw *ServerInterfaceWrapper) ListCustomers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", false, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "primaryEmail" -------------

	err = runtime.BindQueryParameter("form", false, false, "primaryEmail", r.URL.Query(), &params.PrimaryEmail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "primaryEmail", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", false, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "planKey" -------------

	err = runtime.BindQueryParameter("form", false, false, "planKey", r.URL.Query(), &params.PlanKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planKey", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCustomers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomer(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomer(w, r, customerIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCustomer operation middleware
func (siw *ServerInterfaceWrapper) GetCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomer(w, r, customerIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomer(w, r, customerIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCustomerAccess operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerAccess(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerAccess(w, r, customerIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCustomerAppData operation middleware
func (siw *ServerInterfaceWrapper) ListCustomerAppData(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomerAppDataParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", false, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCustomerAppData(w, r, customerIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpsertCustomerAppData operation middleware
func (siw *ServerInterfaceWrapper) UpsertCustomerAppData(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertCustomerAppData(w, r, customerIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCustomerAppData operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomerAppData(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithOptions("simple", "appId", chi.URLParam(r, "appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomerAppData(w, r, customerIdOrKey, appId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCustomerEntitlementValue operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerEntitlementValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "featureKey" -------------
	var featureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "featureKey", chi.URLParam(r, "featureKey"), &featureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerEntitlementValueParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerEntitlementValue(w, r, customerIdOrKey, featureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCustomerSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ListCustomerSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerIdOrKey" -------------
	var customerIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "customerIdOrKey", chi.URLParam(r, "customerIdOrKey"), &customerIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerIdOrKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomerSubscriptionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCustomerSubscriptions(w, r, customerIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDebugMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetDebugMetrics(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDebugMetrics(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlements(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementsParams

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "entitlementType" -------------

	err = runtime.BindQueryParameter("form", true, false, "entitlementType", r.URL.Query(), &params.EntitlementType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementType", Err: err})
		return
	}

	// ------------- Optional query parameter "excludeInactive" -------------

	err = runtime.BindQueryParameter("form", false, false, "excludeInactive", r.URL.Query(), &params.ExcludeInactive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "excludeInactive", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlements(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlementById operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementById(w, r, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", false, false, "clientId", r.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientId", Err: err})
		return
	}

	// ------------- Optional query parameter "ingestedAtFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingestedAtFrom", r.URL.Query(), &params.IngestedAtFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingestedAtFrom", Err: err})
		return
	}

	// ------------- Optional query parameter "ingestedAtTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingestedAtTo", r.URL.Query(), &params.IngestedAtTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingestedAtTo", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", false, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "meterSlug" -------------

	err = runtime.BindQueryParameter("form", true, false, "meterSlug", r.URL.Query(), &params.MeterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId string

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId string

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGrants operation middleware
func (siw *ServerInterfaceWrapper) ListGrants(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantsParams

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VoidGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidGrant(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId string

	err = runtime.BindStyledParameterWithOptions("simple", "grantId", chi.URLParam(r, "grantId"), &grantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidGrant(w, r, grantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCurrencies operation middleware
func (siw *ServerInterfaceWrapper) ListCurrencies(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCurrencies(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProgress operation middleware
func (siw *ServerInterfaceWrapper) GetProgress(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProgress(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMarketplaceListings operation middleware
func (siw *ServerInterfaceWrapper) ListMarketplaceListings(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMarketplaceListingsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMarketplaceListings(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMarketplaceListing operation middleware
func (siw *ServerInterfaceWrapper) GetMarketplaceListing(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType AppType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarketplaceListing(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceAppInstall operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceAppInstall(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType MarketplaceInstallRequestType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceAppInstall(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceAppAPIKeyInstall operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceAppAPIKeyInstall(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType MarketplaceApiKeyInstallRequestType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceAppAPIKeyInstall(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceOAuth2InstallGetURL operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceOAuth2InstallGetURL(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType AppType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceOAuth2InstallGetURL(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceOAuth2InstallAuthorize operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceOAuth2InstallAuthorize(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType MarketplaceOAuth2InstallAuthorizeRequestType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params MarketplaceOAuth2InstallAuthorizeParams

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", false, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", false, false, "error", r.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "error", Err: err})
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", false, false, "error_description", r.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "error_description", Err: err})
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", false, false, "error_uri", r.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "error_uri", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceOAuth2InstallAuthorize(w, r, pType, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMetersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMeter operation middleware
func (siw *ServerInterfaceWrapper) UpdateMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", false, false, "clientId", r.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientId", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", false, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// QueryMeterPost operation middleware
func (siw *ServerInterfaceWrapper) QueryMeterPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeterPost(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNotificationChannels operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationChannels(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationChannelsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDisabled" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDisabled", r.URL.Query(), &params.IncludeDisabled)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDisabled", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationChannels(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationChannel(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationChannel(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotificationChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) UpdateNotificationChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNotificationEvents operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "rule" -------------

	err = runtime.BindQueryParameter("form", true, false, "rule", r.URL.Query(), &params.Rule)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rule", Err: err})
		return
	}

	// ------------- Optional query parameter "channel" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel", r.URL.Query(), &params.Channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationEvent operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationEvent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId string

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", chi.URLParam(r, "eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationEvent(w, r, eventId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNotificationRules operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationRules(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationRulesParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDisabled" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDisabled", r.URL.Query(), &params.IncludeDisabled)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDisabled", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "channel" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel", r.URL.Query(), &params.Channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationRules(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationRule(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationRule(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) UpdateNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TestNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) TestNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPlans operation middleware
func (siw *ServerInterfaceWrapper) ListPlans(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlansParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "keyVersion" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "keyVersion", r.URL.Query(), &params.KeyVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyVersion", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPlans(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePlan operation middleware
func (siw *ServerInterfaceWrapper) CreatePlan(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlan(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// NextPlan operation middleware
func (siw *ServerInterfaceWrapper) NextPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planIdOrKey" -------------
	var planIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "planIdOrKey", chi.URLParam(r, "planIdOrKey"), &planIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NextPlan(w, r, planIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePlan operation middleware
func (siw *ServerInterfaceWrapper) DeletePlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlan operation middleware
func (siw *ServerInterfaceWrapper) GetPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlanParams

	// ------------- Optional query parameter "includeLatest" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeLatest", r.URL.Query(), &params.IncludeLatest)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeLatest", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlan(w, r, planId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePlan operation middleware
func (siw *ServerInterfaceWrapper) UpdatePlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPlanAddons operation middleware
func (siw *ServerInterfaceWrapper) ListPlanAddons(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlanAddonsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "keyVersion" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "keyVersion", r.URL.Query(), &params.KeyVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyVersion", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPlanAddons(w, r, planId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePlanAddon operation middleware
func (siw *ServerInterfaceWrapper) CreatePlanAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlanAddon(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePlanAddon operation middleware
func (siw *ServerInterfaceWrapper) DeletePlanAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// ------------- Path parameter "planAddonId" -------------
	var planAddonId string

	err = runtime.BindStyledParameterWithOptions("simple", "planAddonId", chi.URLParam(r, "planAddonId"), &planAddonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planAddonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlanAddon(w, r, planId, planAddonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlanAddon operation middleware
func (siw *ServerInterfaceWrapper) GetPlanAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// ------------- Path parameter "planAddonId" -------------
	var planAddonId string

	err = runtime.BindStyledParameterWithOptions("simple", "planAddonId", chi.URLParam(r, "planAddonId"), &planAddonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planAddonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlanAddon(w, r, planId, planAddonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePlanAddon operation middleware
func (siw *ServerInterfaceWrapper) UpdatePlanAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// ------------- Path parameter "planAddonId" -------------
	var planAddonId string

	err = runtime.BindStyledParameterWithOptions("simple", "planAddonId", chi.URLParam(r, "planAddonId"), &planAddonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planAddonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePlanAddon(w, r, planId, planAddonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ArchivePlan operation middleware
func (siw *ServerInterfaceWrapper) ArchivePlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArchivePlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PublishPlan operation middleware
func (siw *ServerInterfaceWrapper) PublishPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishPlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", false, false, "clientId", r.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientId", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", false, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateStripeCheckoutSession operation middleware
func (siw *ServerInterfaceWrapper) CreateStripeCheckoutSession(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateStripeCheckoutSession(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSubjectEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubjectEntitlementsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjectEntitlements(w, r, subjectIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEntitlement operation middleware
func (siw *ServerInterfaceWrapper) CreateEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEntitlement(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEntitlementGrants operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlementGrants(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementGrantsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlementGrants(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r, subjectIdOrKey, entitlementIdOrFeatureKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// OverrideEntitlement operation middleware
func (siw *ServerInterfaceWrapper) OverrideEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OverrideEntitlement(w, r, subjectIdOrKey, entitlementIdOrFeatureKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlementValue operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementValueParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementValue(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEntitlement operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlement operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlementHistory operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementHistoryParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Required query parameter "windowSize" -------------

	if paramValue := r.URL.Query().Get("windowSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "windowSize"})
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", false, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementHistory(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetEntitlementUsage operation middleware
func (siw *ServerInterfaceWrapper) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEntitlementUsage(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionParams

	// ------------- Optional query parameter "at" -------------

	err = runtime.BindQueryParameter("form", true, false, "at", r.URL.Query(), &params.At)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "at", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// EditSubscription operation middleware
func (siw *ServerInterfaceWrapper) EditSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSubscriptionAddons operation middleware
func (siw *ServerInterfaceWrapper) ListSubscriptionAddons(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubscriptionAddons(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscriptionAddon operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscriptionAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscriptionAddon(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionAddon operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// ------------- Path parameter "subscriptionAddonId" -------------
	var subscriptionAddonId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionAddonId", chi.URLParam(r, "subscriptionAddonId"), &subscriptionAddonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionAddonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionAddon(w, r, subscriptionId, subscriptionAddonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSubscriptionAddon operation middleware
func (siw *ServerInterfaceWrapper) UpdateSubscriptionAddon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// ------------- Path parameter "subscriptionAddonId" -------------
	var subscriptionAddonId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionAddonId", chi.URLParam(r, "subscriptionAddonId"), &subscriptionAddonId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionAddonId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSubscriptionAddon(w, r, subscriptionId, subscriptionAddonId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelSubscription operation middleware
func (siw *ServerInterfaceWrapper) CancelSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ChangeSubscription operation middleware
func (siw *ServerInterfaceWrapper) ChangeSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MigrateSubscription operation middleware
func (siw *ServerInterfaceWrapper) MigrateSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MigrateSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RestoreSubscription operation middleware
func (siw *ServerInterfaceWrapper) RestoreSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RestoreSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UnscheduleCancelation operation middleware
func (siw *ServerInterfaceWrapper) UnscheduleCancelation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnscheduleCancelation(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEventsV2 operation middleware
func (siw *ServerInterfaceWrapper) ListEventsV2(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsV2Params

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", false, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", false, false, "clientId", r.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientId", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

		var value struct {
			// Id A filter for a string field.
			Id *FilterString `json:"id,omitempty"`

			// IngestedAt A filter for a time field.
			IngestedAt *FilterTime `json:"ingestedAt,omitempty"`

			// Source A filter for a string field.
			Source *FilterString `json:"source,omitempty"`

			// Subject A filter for a string field.
			Subject *FilterString `json:"subject,omitempty"`

			// Time A filter for a time field.
			Time *FilterTime `json:"time,omitempty"`

			// Type A filter for a string field.
			Type *FilterString `json:"type,omitempty"`
		}
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{ParamName: "filter", Err: err})
			return
		}

		params.Filter = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEventsV2(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/addons", wrapper.ListAddons)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/addons", wrapper.CreateAddon)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/addons/{addonId}", wrapper.DeleteAddon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/addons/{addonId}", wrapper.GetAddon)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/addons/{addonId}", wrapper.UpdateAddon)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/addons/{addonId}/archive", wrapper.ArchiveAddon)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/addons/{addonId}/publish", wrapper.PublishAddon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/apps", wrapper.ListApps)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/apps/custom-invoicing/{invoiceId}/draft/synchronized", wrapper.AppCustomInvoicingDraftSynchronized)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/apps/custom-invoicing/{invoiceId}/issuing/synchronized", wrapper.AppCustomInvoicingIssuingSynchronized)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/apps/custom-invoicing/{invoiceId}/payment/status", wrapper.AppCustomInvoicingUpdatePaymentStatus)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/apps/{id}", wrapper.UninstallApp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/apps/{id}", wrapper.GetApp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/apps/{id}", wrapper.UpdateApp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/apps/{id}/stripe/api-key", wrapper.UpdateStripeAPIKey)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/apps/{id}/stripe/webhook", wrapper.AppStripeWebhook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/customers", wrapper.ListBillingProfileCustomerOverrides)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/customers/{customerId}", wrapper.DeleteBillingProfileCustomerOverride)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/customers/{customerId}", wrapper.GetBillingProfileCustomerOverride)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/billing/customers/{customerId}", wrapper.UpsertBillingProfileCustomerOverride)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/customers/{customerId}/invoices/pending-lines", wrapper.CreatePendingInvoiceLine)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/customers/{customerId}/invoices/simulate", wrapper.SimulateInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/invoices", wrapper.ListInvoices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/invoice", wrapper.InvoicePendingLinesAction)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}", wrapper.DeleteInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}", wrapper.GetInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}", wrapper.UpdateInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}/advance", wrapper.AdvanceInvoiceAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}/approve", wrapper.ApproveInvoiceAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}/retry", wrapper.RetryInvoiceAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}/snapshot-quantities", wrapper.SnapshotQuantitiesInvoiceAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}/taxes/recalculate", wrapper.RecalculateInvoiceTaxAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{invoiceId}/void", wrapper.VoidInvoiceAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/profiles", wrapper.ListBillingProfiles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/profiles", wrapper.CreateBillingProfile)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/profiles/{id}", wrapper.DeleteBillingProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/profiles/{id}", wrapper.GetBillingProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/billing/profiles/{id}", wrapper.UpdateBillingProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers", wrapper.ListCustomers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/customers", wrapper.CreateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/customers/{customerIdOrKey}", wrapper.DeleteCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers/{customerIdOrKey}", wrapper.GetCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/customers/{customerIdOrKey}", wrapper.UpdateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers/{customerIdOrKey}/access", wrapper.GetCustomerAccess)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers/{customerIdOrKey}/apps", wrapper.ListCustomerAppData)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/customers/{customerIdOrKey}/apps", wrapper.UpsertCustomerAppData)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/customers/{customerIdOrKey}/apps/{appId}", wrapper.DeleteCustomerAppData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers/{customerIdOrKey}/entitlements/{featureKey}/value", wrapper.GetCustomerEntitlementValue)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers/{customerIdOrKey}/subscriptions", wrapper.ListCustomerSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/debug/metrics", wrapper.GetDebugMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.ListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements/{entitlementId}", wrapper.GetEntitlementById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.ListGrants)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/grants/{grantId}", wrapper.VoidGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/info/currencies", wrapper.ListCurrencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/info/progress/{id}", wrapper.GetProgress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings", wrapper.ListMarketplaceListings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings/{type}", wrapper.GetMarketplaceListing)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/marketplace/listings/{type}/install", wrapper.MarketplaceAppInstall)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/marketplace/listings/{type}/install/apikey", wrapper.MarketplaceAppAPIKeyInstall)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings/{type}/install/oauth2", wrapper.MarketplaceOAuth2InstallGetURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings/{type}/install/oauth2/authorize", wrapper.MarketplaceOAuth2InstallAuthorize)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.UpdateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeterPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/channels", wrapper.ListNotificationChannels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/channels", wrapper.CreateNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.DeleteNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.GetNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.UpdateNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/events", wrapper.ListNotificationEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/events/{eventId}", wrapper.GetNotificationEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/rules", wrapper.ListNotificationRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/rules", wrapper.CreateNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.DeleteNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.GetNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.UpdateNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/rules/{ruleId}/test", wrapper.TestNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans", wrapper.ListPlans)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans", wrapper.CreatePlan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planIdOrKey}/next", wrapper.NextPlan)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/plans/{planId}", wrapper.DeletePlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans/{planId}", wrapper.GetPlan)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/plans/{planId}", wrapper.UpdatePlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans/{planId}/addons", wrapper.ListPlanAddons)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planId}/addons", wrapper.CreatePlanAddon)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/plans/{planId}/addons/{planAddonId}", wrapper.DeletePlanAddon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans/{planId}/addons/{planAddonId}", wrapper.GetPlanAddon)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/plans/{planId}/addons/{planAddonId}", wrapper.UpdatePlanAddon)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planId}/archive", wrapper.ArchivePlan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planId}/publish", wrapper.PublishPlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/stripe/checkout/sessions", wrapper.CreateStripeCheckoutSession)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.ListSubjectEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.CreateEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants", wrapper.ListEntitlementGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override", wrapper.OverrideEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value", wrapper.GetEntitlementValue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.DeleteEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.GetEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history", wrapper.GetEntitlementHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset", wrapper.ResetEntitlementUsage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions", wrapper.CreateSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}", wrapper.GetSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}", wrapper.EditSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/addons", wrapper.ListSubscriptionAddons)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/addons", wrapper.CreateSubscriptionAddon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/addons/{subscriptionAddonId}", wrapper.GetSubscriptionAddon)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/addons/{subscriptionAddonId}", wrapper.UpdateSubscriptionAddon)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/cancel", wrapper.CancelSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/change", wrapper.ChangeSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/migrate", wrapper.MigrateSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/restore", wrapper.RestoreSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/unschedule-cancelation", wrapper.UnscheduleCancelation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v2/events", wrapper.ListEventsV2)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

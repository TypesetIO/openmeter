// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Defines values for EntitlementBooleanType.
const (
	EntitlementBooleanTypeBoolean EntitlementBooleanType = "boolean"
)

// Defines values for EntitlementBooleanCreateInputsType.
const (
	EntitlementBooleanCreateInputsTypeBoolean EntitlementBooleanCreateInputsType = "boolean"
)

// Defines values for EntitlementMeteredType.
const (
	EntitlementMeteredTypeMetered EntitlementMeteredType = "metered"
)

// Defines values for EntitlementMeteredCreateInputsType.
const (
	EntitlementMeteredCreateInputsTypeMetered EntitlementMeteredCreateInputsType = "metered"
)

// Defines values for EntitlementStaticType.
const (
	EntitlementStaticTypeStatic EntitlementStaticType = "static"
)

// Defines values for EntitlementStaticCreateInputsType.
const (
	EntitlementStaticCreateInputsTypeStatic EntitlementStaticCreateInputsType = "static"
)

// Defines values for ExpirationPeriodDuration.
const (
	ExpirationPeriodDurationDAY   ExpirationPeriodDuration = "DAY"
	ExpirationPeriodDurationHOUR  ExpirationPeriodDuration = "HOUR"
	ExpirationPeriodDurationMONTH ExpirationPeriodDuration = "MONTH"
	ExpirationPeriodDurationWEEK  ExpirationPeriodDuration = "WEEK"
	ExpirationPeriodDurationYEAR  ExpirationPeriodDuration = "YEAR"
)

// Defines values for MeasureUsageFromEnum.
const (
	CURRENTPERIODSTART MeasureUsageFromEnum = "CURRENT_PERIOD_START"
	NOW                MeasureUsageFromEnum = "NOW"
)

// Defines values for NotificationChannelType.
const (
	WEBHOOK NotificationChannelType = "WEBHOOK"
)

// Defines values for NotificationEventDeliveryStatusState.
const (
	FAILED  NotificationEventDeliveryStatusState = "FAILED"
	PENDING NotificationEventDeliveryStatusState = "PENDING"
	SENDING NotificationEventDeliveryStatusState = "SENDING"
	SUCCESS NotificationEventDeliveryStatusState = "SUCCESS"
)

// Defines values for NotificationEventType.
const (
	EntitlementsBalanceThreshold NotificationEventType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdValueType.
const (
	NUMBER  NotificationRuleBalanceThresholdValueType = "NUMBER"
	PERCENT NotificationRuleBalanceThresholdValueType = "PERCENT"
)

// Defines values for RecurringPeriodEnum.
const (
	RecurringPeriodEnumDAY   RecurringPeriodEnum = "DAY"
	RecurringPeriodEnumMONTH RecurringPeriodEnum = "MONTH"
	RecurringPeriodEnumWEEK  RecurringPeriodEnum = "WEEK"
	RecurringPeriodEnumYEAR  RecurringPeriodEnum = "YEAR"
)

// Defines values for SvixOperationalWebhookRequestType.
const (
	EndpointCreated         SvixOperationalWebhookRequestType = "endpoint.created"
	EndpointDeleted         SvixOperationalWebhookRequestType = "endpoint.deleted"
	EndpointDisabled        SvixOperationalWebhookRequestType = "endpoint.disabled"
	EndpointUpdated         SvixOperationalWebhookRequestType = "endpoint.updated"
	MessageAttemptExhausted SvixOperationalWebhookRequestType = "message.attempt.exhausted"
	MessageAttemptFailing   SvixOperationalWebhookRequestType = "message.attempt.failing"
	MessageAttemptRecovered SvixOperationalWebhookRequestType = "message.attempt.recovered"
)

// Defines values for Order.
const (
	OrderSortOrderASC  Order = "ASC"
	OrderSortOrderDESC Order = "DESC"
)

// Defines values for ListEntitlementsParamsOrder.
const (
	ListEntitlementsParamsOrderSortOrderASC  ListEntitlementsParamsOrder = "ASC"
	ListEntitlementsParamsOrderSortOrderDESC ListEntitlementsParamsOrder = "DESC"
)

// Defines values for ListEntitlementsParamsOrderBy.
const (
	ListEntitlementsParamsOrderByCreatedAt ListEntitlementsParamsOrderBy = "createdAt"
	ListEntitlementsParamsOrderByUpdatedAt ListEntitlementsParamsOrderBy = "updatedAt"
)

// Defines values for ListFeaturesParamsOrder.
const (
	ListFeaturesParamsOrderSortOrderASC  ListFeaturesParamsOrder = "ASC"
	ListFeaturesParamsOrderSortOrderDESC ListFeaturesParamsOrder = "DESC"
)

// Defines values for ListFeaturesParamsOrderBy.
const (
	ListFeaturesParamsOrderByCreatedAt ListFeaturesParamsOrderBy = "createdAt"
	ListFeaturesParamsOrderById        ListFeaturesParamsOrderBy = "id"
	ListFeaturesParamsOrderByUpdatedAt ListFeaturesParamsOrderBy = "updatedAt"
)

// Defines values for ListGrantsParamsOrder.
const (
	ListGrantsParamsOrderSortOrderASC  ListGrantsParamsOrder = "ASC"
	ListGrantsParamsOrderSortOrderDESC ListGrantsParamsOrder = "DESC"
)

// Defines values for ListGrantsParamsOrderBy.
const (
	ListGrantsParamsOrderByCreatedAt ListGrantsParamsOrderBy = "createdAt"
	ListGrantsParamsOrderById        ListGrantsParamsOrderBy = "id"
	ListGrantsParamsOrderByUpdatedAt ListGrantsParamsOrderBy = "updatedAt"
)

// Defines values for ListNotificationChannelsParamsOrderBy.
const (
	ListNotificationChannelsParamsOrderByCreatedAt ListNotificationChannelsParamsOrderBy = "createdAt"
	ListNotificationChannelsParamsOrderById        ListNotificationChannelsParamsOrderBy = "id"
	ListNotificationChannelsParamsOrderByType      ListNotificationChannelsParamsOrderBy = "type"
	ListNotificationChannelsParamsOrderByUpdatedAt ListNotificationChannelsParamsOrderBy = "updatedAt"
)

// Defines values for ListNotificationChannelsParamsOrder.
const (
	ListNotificationChannelsParamsOrderSortOrderASC  ListNotificationChannelsParamsOrder = "ASC"
	ListNotificationChannelsParamsOrderSortOrderDESC ListNotificationChannelsParamsOrder = "DESC"
)

// Defines values for ListNotificationEventsParamsOrderBy.
const (
	ListNotificationEventsParamsOrderByCreatedAt ListNotificationEventsParamsOrderBy = "createdAt"
	ListNotificationEventsParamsOrderById        ListNotificationEventsParamsOrderBy = "id"
)

// Defines values for ListNotificationEventsParamsOrder.
const (
	ListNotificationEventsParamsOrderSortOrderASC  ListNotificationEventsParamsOrder = "ASC"
	ListNotificationEventsParamsOrderSortOrderDESC ListNotificationEventsParamsOrder = "DESC"
)

// Defines values for ListNotificationRulesParamsOrderBy.
const (
	ListNotificationRulesParamsOrderByCreatedAt ListNotificationRulesParamsOrderBy = "createdAt"
	ListNotificationRulesParamsOrderById        ListNotificationRulesParamsOrderBy = "id"
	ListNotificationRulesParamsOrderByType      ListNotificationRulesParamsOrderBy = "type"
	ListNotificationRulesParamsOrderByUpdatedAt ListNotificationRulesParamsOrderBy = "updatedAt"
)

// Defines values for ListNotificationRulesParamsOrder.
const (
	SortOrderASC  ListNotificationRulesParamsOrder = "ASC"
	SortOrderDESC ListNotificationRulesParamsOrder = "DESC"
)

// Defines values for ListEntitlementGrantsParamsOrderBy.
const (
	CreatedAt ListEntitlementGrantsParamsOrderBy = "createdAt"
	Id        ListEntitlementGrantsParamsOrderBy = "id"
	UpdatedAt ListEntitlementGrantsParamsOrderBy = "updatedAt"
)

// Defines values for GetEntitlementHistoryParamsWindowSize.
const (
	DAY    GetEntitlementHistoryParamsWindowSize = "DAY"
	HOUR   GetEntitlementHistoryParamsWindowSize = "HOUR"
	MINUTE GetEntitlementHistoryParamsWindowSize = "MINUTE"
)

// BalanceHistoryWindow Windowed usage and balance information.
type BalanceHistoryWindow struct {
	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Usage The total usage of the feature in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// ConflictProblem Conflict
type ConflictProblem struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail     string `json:"detail"`
	Extensions *struct {
		// ConflictingEntityId The id of the conflicting entity.
		ConflictingEntityId string `json:"conflictingEntityId"`
	} `json:"extensions,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int32 `json:"status"`

	// Title A a short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type Type contains a URI that identifies the problem type.
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Entitlement defines model for Entitlement.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementBoolean defines model for EntitlementBoolean.
type EntitlementBoolean struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementBooleanType `json:"type"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanType defines model for EntitlementBoolean.Type.
type EntitlementBooleanType string

// EntitlementBooleanCreateInputs defines model for EntitlementBooleanCreateInputs.
type EntitlementBooleanCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                 `json:"metadata,omitempty"`
	Type     EntitlementBooleanCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanCreateInputsType defines model for EntitlementBooleanCreateInputs.Type.
type EntitlementBooleanCreateInputsType string

// EntitlementCreateInputs defines model for EntitlementCreateInputs.
type EntitlementCreateInputs struct {
	union json.RawMessage
}

// EntitlementCreateSharedFields defines model for EntitlementCreateSharedFields.
type EntitlementCreateSharedFields struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementGrant defines model for EntitlementGrant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId *string          `json:"entitlementId,omitempty"`
	Expiration    ExpirationPeriod `json:"expiration"`

	// ExpiresAt The expiration date of the grant.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurring period of an entitlement.
	Recurrence *RecurringPeriod `json:"recurrence,omitempty"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// VoidedAt The date and time the grant was voided (cannot be used after that).
	VoidedAt *time.Time `json:"voidedAt,omitempty"`
}

// EntitlementGrantCreateInput Grants are used to increase balance of specific subjects.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time        `json:"effectiveAt"`
	Expiration  ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurring period of an entitlement.
	Recurrence *RecurringPeriodCreateInput `json:"recurrence,omitempty"`
}

// EntitlementMetered defines model for EntitlementMetered.
type EntitlementMetered struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	//
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant. If provided, issueAfterReset must have a value.
	IssueAfterResetPriority *int `json:"issueAfterResetPriority,omitempty"`

	// LastReset The last time a reset happened.
	LastReset time.Time `json:"lastReset"`

	// MeasureUsageFrom The time from which usage is measured. If not specified on creation, defaults to the entitlement creation time.
	MeasureUsageFrom time.Time `json:"measureUsageFrom"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementMeteredType `json:"type"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod RecurringPeriod `json:"usagePeriod"`
}

// EntitlementMeteredType defines model for EntitlementMetered.Type.
type EntitlementMeteredType string

// EntitlementMeteredCalculatedFields Calculated fields for a metered entitlement.
type EntitlementMeteredCalculatedFields struct {
	// CurrentUsagePeriod A time period
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// LastReset The last time a reset happened.
	LastReset time.Time `json:"lastReset"`

	// MeasureUsageFrom The time from which usage is measured. If not specified on creation, defaults to the entitlement creation time.
	MeasureUsageFrom time.Time `json:"measureUsageFrom"`
}

// EntitlementMeteredCreateInputs defines model for EntitlementMeteredCreateInputs.
type EntitlementMeteredCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	//
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant. If provided, issueAfterReset must have a value.
	IssueAfterResetPriority *int `json:"issueAfterResetPriority,omitempty"`

	// MeasureUsageFrom The time from which usage is measured, defaults to the entitlement creation time.
	// The provided value is truncated to the granularity of the underlying meter.
	MeasureUsageFrom *MeasureUsageFrom `json:"measureUsageFrom,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                 `json:"metadata,omitempty"`
	Type     EntitlementMeteredCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod RecurringPeriodCreateInput `json:"usagePeriod"`
}

// EntitlementMeteredCreateInputsType defines model for EntitlementMeteredCreateInputs.Type.
type EntitlementMeteredCreateInputsType string

// EntitlementSharedFields defines model for EntitlementSharedFields.
type EntitlementSharedFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string `json:"subjectKey"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStatic defines model for EntitlementStatic.
type EntitlementStatic struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config string `json:"config"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                `json:"subjectKey"`
	Type       EntitlementStaticType `json:"type"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStaticType defines model for EntitlementStatic.Type.
type EntitlementStaticType string

// EntitlementStaticCreateInputs defines model for EntitlementStaticCreateInputs.
type EntitlementStaticCreateInputs struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config string `json:"config"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                `json:"metadata,omitempty"`
	Type     EntitlementStaticCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementStaticCreateInputsType defines model for EntitlementStaticCreateInputs.Type.
type EntitlementStaticCreateInputsType string

// EntitlementValue defines model for EntitlementValue.
type EntitlementValue struct {
	// Balance Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.
	Balance *float64 `json:"balance,omitempty"`

	// Config Only available for static entitlements. The JSON parsable config of the entitlement.
	Config *string `json:"config,omitempty"`

	// HasAccess Whether the subject has access to the feature. Shared accross all entitlement types.
	HasAccess *bool `json:"hasAccess,omitempty"`

	// Overage Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.
	Overage *float64 `json:"overage,omitempty"`

	// Usage Only available for metered entitlements. Returns the total feature usage in the current period.
	Usage *float64 `json:"usage,omitempty"`
}

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// ExpirationPeriod Expiration period of a grant.
type ExpirationPeriod struct {
	// Count The expiration period count like 12 months.
	Count int `json:"count"`

	// Duration The expiration period duration like month.
	Duration ExpirationPeriodDuration `json:"duration"`
}

// ExpirationPeriodDuration The expiration period duration like month.
type ExpirationPeriodDuration string

// Feature defines model for Feature.
type Feature struct {
	// ArchivedAt If the feature is archived, no new entitlements can be created for it.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Key The key is an immutable unique identifier of the feature used throughout the API, for example when interacting with a subject's entitlements. The key has to be unique across all active features, but archived features can share the same key. The key should consist of lowercase alphanumeric characters and dashes.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature, useful for syncing with external systems and annotating custom fields.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks. Example scenario would be a meter tracking all token use with groupBy fields for the model, then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and and based on which usage is calculated.
	// The meter selected must have SUM or COUNT aggregation.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FeatureCreateInputs A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type FeatureCreateInputs struct {
	// Key The key is an immutable unique identifier of the feature used throughout the API, for example when interacting with a subject's entitlements. The key has to be unique across all active features, but archived features can share the same key. The key should consist of lowercase alphanumeric characters and dashes.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature, useful for syncing with external systems and annotating custom fields.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks. Example scenario would be a meter tracking all token use with groupBy fields for the model, then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and and based on which usage is calculated.
	// The meter selected must have SUM or COUNT aggregation.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`
}

// FeatureMeta Limited representation of a feature resource which includes only its unique identifiers (id, key).
type FeatureMeta struct {
	// Id A unique identifier for the notification rule.
	Id string `json:"id"`

	// Key The key is an immutable unique identifier of the feature used throughout the API,
	// for example when interacting with a subject's entitlements.
	Key string `json:"key"`
}

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant between events that changed either the grant burn down priority order or the usag period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantBalancesAtEnd The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtEnd *map[string]float64 `json:"grantBalancesAtEnd,omitempty"`

	// GrantBalancesAtStart The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtStart *map[string]float64 `json:"grantBalancesAtStart,omitempty"`

	// GrantUsages Which grants were actually burnt down in the period and by what amount.
	GrantUsages *[]GrantUsageRecord `json:"grantUsages,omitempty"`

	// Overage Overuse that wasn't covered by grants.
	Overage *float64 `json:"overage,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Usage The usage of the grant in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// GrantUsageRecord defines model for GrantUsageRecord.
type GrantUsageRecord struct {
	// GrantId The id of the grant.
	GrantId *string `json:"grantId,omitempty"`

	// Usage The usage of the grant.
	Usage *float64 `json:"usage,omitempty"`
}

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// ListEntitlementGrantResponse defines model for ListEntitlementGrantResponse.
type ListEntitlementGrantResponse struct {
	union json.RawMessage
}

// ListEntitlementGrantResponse0 defines model for .
type ListEntitlementGrantResponse0 = []EntitlementGrant

// ListEntitlementGrantResponse1 defines model for .
type ListEntitlementGrantResponse1 struct {
	// Items List of grants.
	Items []EntitlementGrant `json:"items"`

	// Page Current page number.
	Page int `json:"page"`

	// PageSize Number of grants per page.
	PageSize int `json:"pageSize"`

	// TotalCount Total number of grants.
	TotalCount int `json:"totalCount"`
}

// ListEntitlementResponse defines model for ListEntitlementResponse.
type ListEntitlementResponse struct {
	union json.RawMessage
}

// ListEntitlementResponse0 defines model for .
type ListEntitlementResponse0 = []Entitlement

// ListEntitlementResponse1 defines model for .
type ListEntitlementResponse1 struct {
	// Items List of entitlements.
	Items []Entitlement `json:"items"`

	// Page Current page number.
	Page int `json:"page"`

	// PageSize Number of entitlements per page.
	PageSize int `json:"pageSize"`

	// TotalCount Total number of entitlements.
	TotalCount int `json:"totalCount"`
}

// ListFeatureResponse defines model for ListFeatureResponse.
type ListFeatureResponse struct {
	union json.RawMessage
}

// ListFeatureResponse0 defines model for .
type ListFeatureResponse0 = []Feature

// ListFeatureResponse1 defines model for .
type ListFeatureResponse1 struct {
	// Items List of features.
	Items []Feature `json:"items"`

	// Page Current page number.
	Page int `json:"page"`

	// PageSize Number of features per page.
	PageSize int `json:"pageSize"`

	// TotalCount Total number of features.
	TotalCount int `json:"totalCount"`
}

// MeasureUsageFrom The time from which usage is measured, defaults to the entitlement creation time.
// The provided value is truncated to the granularity of the underlying meter.
type MeasureUsageFrom struct {
	union json.RawMessage
}

// MeasureUsageFromEnum defines model for MeasureUsageFromEnum.
type MeasureUsageFromEnum string

// MeasureUsageFromTime defines model for MeasureUsageFromTime.
type MeasureUsageFromTime = time.Time

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// NotificationChannel defines model for NotificationChannel.
type NotificationChannel struct {
	union json.RawMessage
}

// NotificationChannelCommon defines model for NotificationChannelCommon.
type NotificationChannelCommon struct {
	// CreatedAt Timestamp when the channel was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp when the channel was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled bool `json:"disabled"`

	// Id A unique identifier for the notification channel.
	Id string `json:"id"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// Type The type of the notification channel.
	Type NotificationChannelType `json:"type"`

	// UpdatedAt Timestamp when the channel was modified.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationChannelCommonCreateRequest Common fields for create notification channel request.
type NotificationChannelCommonCreateRequest struct {
	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// Type The type of the notification channel.
	Type NotificationChannelType `json:"type"`
}

// NotificationChannelCreateRequest defines model for NotificationChannelCreateRequest.
type NotificationChannelCreateRequest struct {
	union json.RawMessage
}

// NotificationChannelMeta Limited representation of notification channel which includes only the channel identifier and its type.
type NotificationChannelMeta struct {
	// Id A unique identifier for the notification channel.
	Id string `json:"id"`

	// Type The type of the notification channel.
	Type NotificationChannelType `json:"type"`
}

// NotificationChannelType The type of the notification channel.
type NotificationChannelType string

// NotificationChannelWebhook defines model for NotificationChannelWebhook.
type NotificationChannelWebhook struct {
	// CreatedAt Timestamp when the channel was created.
	CreatedAt time.Time `json:"createdAt"`

	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]interface{} `json:"customHeaders"`

	// DeletedAt Timestamp when the channel was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled bool `json:"disabled"`

	// Id A unique identifier for the notification channel.
	Id string `json:"id"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret string `json:"signingSecret"`

	// Type The type of the notification channel.
	Type NotificationChannelType `json:"type"`

	// UpdatedAt Timestamp when the channel was modified.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookCreateRequest defines model for NotificationChannelWebhookCreateRequest.
type NotificationChannelWebhookCreateRequest struct {
	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]interface{} `json:"customHeaders"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end. Automatically generated if not provided.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret"`

	// Type The type of the notification channel.
	Type NotificationChannelType `json:"type"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannels List of channels.
type NotificationChannels = []NotificationChannel

// NotificationChannelsResponse defines model for NotificationChannelsResponse.
type NotificationChannelsResponse struct {
	// Items List of channels.
	Items NotificationChannels `json:"items"`

	// Page Current page number.
	Page int `json:"page"`

	// PageSize Number of channels per page.
	PageSize int `json:"pageSize"`

	// TotalCount Total number of channels.
	TotalCount int `json:"totalCount"`
}

// NotificationEvent Notification event generated by the system based on the criteria defined in the corresponding
// a notification rule.
//
// The `payload` field contains the actual message sent to the notification channel.
type NotificationEvent struct {
	// CreatedAt Timestamp when the notification event was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeliveryStatus The delivery status of the notification event.
	DeliveryStatus []NotificationEventDeliveryStatus `json:"deliveryStatus"`

	// Id A unique identifier for the notification event.
	Id string `json:"id"`

	// Payload The actual payload sent to channel as part of the notification event.
	Payload NotificationEventPayload `json:"payload"`
	Rule    NotificationRule         `json:"rule"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationEventBalanceThresholdPayload defines model for NotificationEventBalanceThresholdPayload.
type NotificationEventBalanceThresholdPayload struct {
	Data struct {
		Balance EntitlementValue `json:"balance"`

		// Entitlement Metered entitlements are useful for many different use cases, from setting up usage based access to implementing complex credit systems. Access is determined based on feature usage using a balance calculation (the "usage allowance" provided by the issued grants is "burnt down" by the usage).
		Entitlement EntitlementMetered `json:"entitlement"`

		// Feature A feature is a feature or service offered to a customer.
		// For example: CPU-Hours, Tokens, API Calls, etc.
		Feature Feature `json:"feature"`

		// Subject A subject is a unique identifier for a user or entity.
		Subject Subject `json:"subject"`

		// Threshold Threshold value with multiple supported types.
		Threshold NotificationRuleBalanceThresholdValue `json:"threshold"`
	} `json:"data"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created.
	Timestamp time.Time `json:"timestamp"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationEventCommonPayload Common fields for notification event payload.
type NotificationEventCommonPayload struct {
	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created.
	Timestamp time.Time `json:"timestamp"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationEventCreateRequest Request for creating new notification event with specific type and payload.
type NotificationEventCreateRequest struct {
	// Payload The actual payload sent to channel as part of the notification event.
	Payload NotificationEventPayload `json:"payload"`
	RuleId  string                   `json:"ruleId"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationEventDeliveryStatus defines model for NotificationEventDeliveryStatus.
type NotificationEventDeliveryStatus struct {
	// Channel Limited representation of notification channel which includes only the channel identifier and its type.
	Channel   NotificationChannelMeta              `json:"channel"`
	Reason    *string                              `json:"reason,omitempty"`
	State     NotificationEventDeliveryStatusState `json:"state"`
	UpdatedAt time.Time                            `json:"updatedAt"`
}

// NotificationEventDeliveryStatusState defines model for NotificationEventDeliveryStatus.State.
type NotificationEventDeliveryStatusState string

// NotificationEventPayload The actual payload sent to channel as part of the notification event.
type NotificationEventPayload struct {
	union json.RawMessage
}

// NotificationEventType The type of the notification event.
type NotificationEventType string

// NotificationEvents List of notification events.
type NotificationEvents = []NotificationEvent

// NotificationEventsResponse defines model for NotificationEventsResponse.
type NotificationEventsResponse struct {
	// Items List of notification events.
	Items NotificationEvents `json:"items"`

	// Page Current page number.
	Page int `json:"page"`

	// PageSize Number of rules per page.
	PageSize int `json:"pageSize"`

	// TotalCount Total number of rules.
	TotalCount int `json:"totalCount"`
}

// NotificationRule defines model for NotificationRule.
type NotificationRule struct {
	union json.RawMessage
}

// NotificationRuleBalanceThreshold defines model for NotificationRuleBalanceThreshold.
type NotificationRuleBalanceThreshold struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp when the rule was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp when the channel was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled bool `json:"disabled"`

	// Features Optional field containing list of features the rule applies to.
	Features *[]FeatureMeta `json:"features"`

	// Id A unique identifier for the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`

	// UpdatedAt Timestamp when the rule was modified.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleBalanceThresholdCreateRequest defines model for NotificationRuleBalanceThresholdCreateRequest.
type NotificationRuleBalanceThresholdCreateRequest struct {
	// Channels List of notification channel identifiers or names the rule applies to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field for defining the scope of notification by feature. It may contain features by id or key.
	Features *[]string `json:"features"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationRuleBalanceThresholdValue Threshold value with multiple supported types.
type NotificationRuleBalanceThresholdValue struct {
	Type  NotificationRuleBalanceThresholdValueType `json:"type"`
	Value float64                                   `json:"value"`
}

// NotificationRuleBalanceThresholdValueType defines model for NotificationRuleBalanceThresholdValue.Type.
type NotificationRuleBalanceThresholdValueType string

// NotificationRuleCommon defines model for NotificationRuleCommon.
type NotificationRuleCommon struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp when the rule was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp when the channel was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled bool `json:"disabled"`

	// Id A unique identifier for the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`

	// UpdatedAt Timestamp when the rule was modified.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleCommonCreateRequest Defines the common fields for create notification rule request.
type NotificationRuleCommonCreateRequest struct {
	// Channels List of notification channel identifiers or names the rule applies to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationRuleCreateRequest defines model for NotificationRuleCreateRequest.
type NotificationRuleCreateRequest struct {
	union json.RawMessage
}

// NotificationRuleMeta Defines the common fields of a notification rule.
type NotificationRuleMeta struct {
	// Id A unique identifier for the notification rule.
	Id string `json:"id"`

	// Type The type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationRules List of rules.
type NotificationRules = []NotificationRule

// NotificationRulesResponse defines model for NotificationRulesResponse.
type NotificationRulesResponse struct {
	// Items List of rules.
	Items NotificationRules `json:"items"`

	// Page Current page number.
	Page int `json:"page"`

	// PageSize Number of rules per page.
	PageSize int `json:"pageSize"`

	// TotalCount Total number of rules.
	TotalCount int `json:"totalCount"`
}

// Period A time period
type Period struct {
	// From Period start time where the amount was applied. If applicable.
	From time.Time `json:"from"`

	// To Period end time where the amount was applied. If applicable.
	To time.Time `json:"to"`
}

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// RecurringPeriod Recurring period of an entitlement.
type RecurringPeriod struct {
	// Anchor An arbitrary anchor to base the recurring period on.
	Anchor time.Time `json:"anchor"`

	// Interval List of pre-defined periods that can be used for recurring & scheduling.
	//
	// DAY:      Every day
	// WEEK:     Every week
	// MONTH:    Every month
	// YEAR:     Every year
	Interval RecurringPeriodEnum `json:"interval"`
}

// RecurringPeriodCreateInput Recurring period of an entitlement.
type RecurringPeriodCreateInput struct {
	// Anchor An arbitrary anchor to base the recurring period on.
	// If not provided then defaults to now truncated to the hour.
	Anchor *time.Time `json:"anchor,omitempty"`

	// Interval List of pre-defined periods that can be used for recurring & scheduling.
	//
	// DAY:      Every day
	// WEEK:     Every week
	// MONTH:    Every month
	// YEAR:     Every year
	Interval RecurringPeriodEnum `json:"interval"`
}

// RecurringPeriodEnum List of pre-defined periods that can be used for recurring & scheduling.
//
// DAY:      Every day
// WEEK:     Every week
// MONTH:    Every month
// YEAR:     Every year
type RecurringPeriodEnum string

// SharedMetaFields Metadata fields for all resources.
// These fields are automatically populated by the system for managed entities. Their use and meaning is uniform across all resources.
type SharedMetaFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// UpdatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// SvixOperationalWebhookRequest defines model for SvixOperationalWebhookRequest.
type SvixOperationalWebhookRequest struct {
	Data map[string]interface{}            `json:"data"`
	Type SvixOperationalWebhookRequestType `json:"type"`
}

// SvixOperationalWebhookRequestType defines model for SvixOperationalWebhookRequest.Type.
type SvixOperationalWebhookRequestType string

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory struct {
	// BurndownHistory Grant burndown history.
	BurndownHistory *[]GrantBurnDownHistorySegment `json:"burndownHistory,omitempty"`

	// WindowedHistory The windowed balance history.
	// - It only returns rows for windows where there was usage.
	// - The windows are inclusive at their start and exclusive at their end.
	// - The last window may be smaller than the window size and is inclusive at both ends.
	WindowedHistory *[]BalanceHistoryWindow `json:"windowedHistory,omitempty"`
}

// ChannelId defines model for channelId.
type ChannelId = string

// EntitlementId defines model for entitlementId.
type EntitlementId = string

// EntitlementIdOrFeatureKey defines model for entitlementIdOrFeatureKey.
type EntitlementIdOrFeatureKey = string

// EventId defines model for eventId.
type EventId = string

// FeatureId defines model for featureId.
type FeatureId = string

// GrantId defines model for grantId.
type GrantId = string

// IncludeDeleted defines model for includeDeleted.
type IncludeDeleted = bool

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// Order defines model for order.
type Order string

// QueryFilterChannel defines model for queryFilterChannel.
type QueryFilterChannel = []string

// QueryFilterEntitlementType defines model for queryFilterEntitlementType.
type QueryFilterEntitlementType = []string

// QueryFilterFeature defines model for queryFilterFeature.
type QueryFilterFeature = []string

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterMeterSlug defines model for queryFilterMeterSlug.
type QueryFilterMeterSlug = []string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryIncludeDisabled defines model for queryIncludeDisabled.
type QueryIncludeDisabled = bool

// QueryLimit defines model for queryLimit.
type QueryLimit = int

// QueryOffset defines model for queryOffset.
type QueryOffset = int

// QueryPage defines model for queryPage.
type QueryPage = int

// QueryPageSize defines model for queryPageSize.
type QueryPageSize = int

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// RuleId defines model for ruleId.
type RuleId = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// ConflictProblemResponse Conflict
type ConflictProblemResponse = ConflictProblem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Page Page number to return
	Page *QueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of entries to return per page
	PageSize *QueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`

	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *QueryFilterFeature `form:"feature,omitempty" json:"feature,omitempty"`

	// EntitlementType Filtering by multiple entitlement types.
	//
	// Usage: `?entitlementType=metered&entitlementType=static`
	EntitlementType *QueryFilterEntitlementType `form:"entitlementType,omitempty" json:"entitlementType,omitempty"`

	// Order Order by field.
	//
	// Usage: `?order=ASC`
	Order *ListEntitlementsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementsParamsOrder defines parameters for ListEntitlements.
type ListEntitlementsParamsOrder string

// ListEntitlementsParamsOrderBy defines parameters for ListEntitlements.
type ListEntitlementsParamsOrderBy string

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// Page Page number to return
	Page *QueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of entries to return per page
	PageSize *QueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// MeterSlug Filtering by multiple meterSlug.
	//
	// Usage: `?meterSlug=meter-1&meterSlug=meter-2`
	MeterSlug *QueryFilterMeterSlug `form:"meterSlug,omitempty" json:"meterSlug,omitempty"`

	// Order Order by field.
	//
	// Usage: `?order=ASC`
	Order *ListFeaturesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy Order by field
	OrderBy *ListFeaturesParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeArchived Include archived features.
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
}

// ListFeaturesParamsOrder defines parameters for ListFeatures.
type ListFeaturesParamsOrder string

// ListFeaturesParamsOrderBy defines parameters for ListFeatures.
type ListFeaturesParamsOrderBy string

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Page Page number to return
	Page *QueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of entries to return per page
	PageSize *QueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`

	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *QueryFilterFeature `form:"feature,omitempty" json:"feature,omitempty"`

	// Order Order by field.
	//
	// Usage: `?order=ASC`
	Order *ListGrantsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy Order by field
	OrderBy *ListGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListGrantsParamsOrder defines parameters for ListGrants.
type ListGrantsParamsOrder string

// ListGrantsParamsOrderBy defines parameters for ListGrants.
type ListGrantsParamsOrderBy string

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListNotificationChannelsParams defines parameters for ListNotificationChannels.
type ListNotificationChannelsParams struct {
	// Page Page number to return
	Page *QueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of entries to return per page
	PageSize *QueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// OrderBy Order by field
	OrderBy *ListNotificationChannelsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Order Order by field.
	//
	// Usage: `?order=ASC`
	Order *ListNotificationChannelsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// IncludeDisabled Include disabled entries.
	IncludeDisabled *QueryIncludeDisabled `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListNotificationChannelsParamsOrderBy defines parameters for ListNotificationChannels.
type ListNotificationChannelsParamsOrderBy string

// ListNotificationChannelsParamsOrder defines parameters for ListNotificationChannels.
type ListNotificationChannelsParamsOrder string

// ListNotificationEventsParams defines parameters for ListNotificationEvents.
type ListNotificationEventsParams struct {
	// Page Page number to return
	Page *QueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of entries to return per page
	PageSize *QueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// OrderBy Order by field
	OrderBy *ListNotificationEventsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Order Order by field.
	//
	// Usage: `?order=ASC`
	Order *ListNotificationEventsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *QueryFilterFeature `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// ListNotificationEventsParamsOrderBy defines parameters for ListNotificationEvents.
type ListNotificationEventsParamsOrderBy string

// ListNotificationEventsParamsOrder defines parameters for ListNotificationEvents.
type ListNotificationEventsParamsOrder string

// ListNotificationRulesParams defines parameters for ListNotificationRules.
type ListNotificationRulesParams struct {
	// Page Page number to return
	Page *QueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of entries to return per page
	PageSize *QueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// OrderBy Order by field
	OrderBy *ListNotificationRulesParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Order Order by field.
	//
	// Usage: `?order=ASC`
	Order *ListNotificationRulesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// IncludeDisabled Include disabled entries.
	IncludeDisabled *QueryIncludeDisabled `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *QueryFilterFeature `form:"feature,omitempty" json:"feature,omitempty"`

	// Channel Filtering by multiple notification channels.
	//
	// Usage: `?channel=channel-1&channel=channel-2`
	Channel *QueryFilterChannel `form:"channel,omitempty" json:"channel,omitempty"`
}

// ListNotificationRulesParamsOrderBy defines parameters for ListNotificationRules.
type ListNotificationRulesParamsOrderBy string

// ListNotificationRulesParamsOrder defines parameters for ListNotificationRules.
type ListNotificationRulesParamsOrder string

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementGrantsParamsOrderBy defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParamsOrderBy string

// GetEntitlementValueParams defines parameters for GetEntitlementValue.
type GetEntitlementValueParams struct {
	// Time Point of time to check value: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to
	// the last reset.
	// Gets truncated to the granularity of the underlying meter.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Size of the time window to group the history by. Cannot be shorter than meter granularity.
	WindowSize GetEntitlementHistoryParamsWindowSize `form:"windowSize" json:"windowSize"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
}

// GetEntitlementHistoryParamsWindowSize defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParamsWindowSize string

// ResetEntitlementUsageJSONBody defines parameters for ResetEntitlementUsage.
type ResetEntitlementUsageJSONBody struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now. The reset cannot be in the future. The provided value is truncated to the minute due to how historical meter data is stored.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`

	// RetainAnchor Determines whether the usage period anchor is retained or reset to the effectiveAt time.
	// - If true, the usage period anchor is retained.
	// - If false, the usage period anchor is reset to the effectiveAt time.
	RetainAnchor *bool `json:"retainAnchor,omitempty"`
}

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreateNotificationChannelJSONRequestBody defines body for CreateNotificationChannel for application/json ContentType.
type CreateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// UpdateNotificationChannelJSONRequestBody defines body for UpdateNotificationChannel for application/json ContentType.
type UpdateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// CreateNotificationEventJSONRequestBody defines body for CreateNotificationEvent for application/json ContentType.
type CreateNotificationEventJSONRequestBody = NotificationEventCreateRequest

// CreateNotificationRuleJSONRequestBody defines body for CreateNotificationRule for application/json ContentType.
type CreateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// UpdateNotificationRuleJSONRequestBody defines body for UpdateNotificationRule for application/json ContentType.
type UpdateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// ReceiveSvixOperationalEventJSONRequestBody defines body for ReceiveSvixOperationalEvent for application/json ContentType.
type ReceiveSvixOperationalEventJSONRequestBody = SvixOperationalWebhookRequest

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody = EntitlementCreateInputs

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody ResetEntitlementUsageJSONBody

// Getter for additional properties for ConflictProblem. Returns the specified
// element and whether it was found
func (a ConflictProblem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConflictProblem
func (a *ConflictProblem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConflictProblem to handle AdditionalProperties
func (a *ConflictProblem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["extensions"]; found {
		err = json.Unmarshal(raw, &a.Extensions)
		if err != nil {
			return fmt.Errorf("error reading 'extensions': %w", err)
		}
		delete(object, "extensions")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConflictProblem to handle AdditionalProperties
func (a ConflictProblem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	if a.Extensions != nil {
		object["extensions"], err = json.Marshal(a.Extensions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extensions': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsEntitlementMetered returns the union data inside the Entitlement as a EntitlementMetered
func (t Entitlement) AsEntitlementMetered() (EntitlementMetered, error) {
	var body EntitlementMetered
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMetered overwrites any union data inside the Entitlement as the provided EntitlementMetered
func (t *Entitlement) FromEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMetered performs a merge with any union data inside the Entitlement, using the provided EntitlementMetered
func (t *Entitlement) MergeEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStatic returns the union data inside the Entitlement as a EntitlementStatic
func (t Entitlement) AsEntitlementStatic() (EntitlementStatic, error) {
	var body EntitlementStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStatic overwrites any union data inside the Entitlement as the provided EntitlementStatic
func (t *Entitlement) FromEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStatic performs a merge with any union data inside the Entitlement, using the provided EntitlementStatic
func (t *Entitlement) MergeEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBoolean returns the union data inside the Entitlement as a EntitlementBoolean
func (t Entitlement) AsEntitlementBoolean() (EntitlementBoolean, error) {
	var body EntitlementBoolean
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBoolean overwrites any union data inside the Entitlement as the provided EntitlementBoolean
func (t *Entitlement) FromEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBoolean performs a merge with any union data inside the Entitlement, using the provided EntitlementBoolean
func (t *Entitlement) MergeEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBoolean()
	case "metered":
		return t.AsEntitlementMetered()
	case "static":
		return t.AsEntitlementStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMeteredCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementMeteredCreateInputs
func (t EntitlementCreateInputs) AsEntitlementMeteredCreateInputs() (EntitlementMeteredCreateInputs, error) {
	var body EntitlementMeteredCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStaticCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementStaticCreateInputs
func (t EntitlementCreateInputs) AsEntitlementStaticCreateInputs() (EntitlementStaticCreateInputs, error) {
	var body EntitlementStaticCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStaticCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStaticCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBooleanCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementBooleanCreateInputs
func (t EntitlementCreateInputs) AsEntitlementBooleanCreateInputs() (EntitlementBooleanCreateInputs, error) {
	var body EntitlementBooleanCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBooleanCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBooleanCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntitlementCreateInputs) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EntitlementCreateInputs) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBooleanCreateInputs()
	case "metered":
		return t.AsEntitlementMeteredCreateInputs()
	case "static":
		return t.AsEntitlementStaticCreateInputs()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EntitlementCreateInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EntitlementCreateInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListEntitlementGrantResponse0 returns the union data inside the ListEntitlementGrantResponse as a ListEntitlementGrantResponse0
func (t ListEntitlementGrantResponse) AsListEntitlementGrantResponse0() (ListEntitlementGrantResponse0, error) {
	var body ListEntitlementGrantResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementGrantResponse0 overwrites any union data inside the ListEntitlementGrantResponse as the provided ListEntitlementGrantResponse0
func (t *ListEntitlementGrantResponse) FromListEntitlementGrantResponse0(v ListEntitlementGrantResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementGrantResponse0 performs a merge with any union data inside the ListEntitlementGrantResponse, using the provided ListEntitlementGrantResponse0
func (t *ListEntitlementGrantResponse) MergeListEntitlementGrantResponse0(v ListEntitlementGrantResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsListEntitlementGrantResponse1 returns the union data inside the ListEntitlementGrantResponse as a ListEntitlementGrantResponse1
func (t ListEntitlementGrantResponse) AsListEntitlementGrantResponse1() (ListEntitlementGrantResponse1, error) {
	var body ListEntitlementGrantResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementGrantResponse1 overwrites any union data inside the ListEntitlementGrantResponse as the provided ListEntitlementGrantResponse1
func (t *ListEntitlementGrantResponse) FromListEntitlementGrantResponse1(v ListEntitlementGrantResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementGrantResponse1 performs a merge with any union data inside the ListEntitlementGrantResponse, using the provided ListEntitlementGrantResponse1
func (t *ListEntitlementGrantResponse) MergeListEntitlementGrantResponse1(v ListEntitlementGrantResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListEntitlementGrantResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListEntitlementGrantResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListEntitlementResponse0 returns the union data inside the ListEntitlementResponse as a ListEntitlementResponse0
func (t ListEntitlementResponse) AsListEntitlementResponse0() (ListEntitlementResponse0, error) {
	var body ListEntitlementResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementResponse0 overwrites any union data inside the ListEntitlementResponse as the provided ListEntitlementResponse0
func (t *ListEntitlementResponse) FromListEntitlementResponse0(v ListEntitlementResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementResponse0 performs a merge with any union data inside the ListEntitlementResponse, using the provided ListEntitlementResponse0
func (t *ListEntitlementResponse) MergeListEntitlementResponse0(v ListEntitlementResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsListEntitlementResponse1 returns the union data inside the ListEntitlementResponse as a ListEntitlementResponse1
func (t ListEntitlementResponse) AsListEntitlementResponse1() (ListEntitlementResponse1, error) {
	var body ListEntitlementResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementResponse1 overwrites any union data inside the ListEntitlementResponse as the provided ListEntitlementResponse1
func (t *ListEntitlementResponse) FromListEntitlementResponse1(v ListEntitlementResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementResponse1 performs a merge with any union data inside the ListEntitlementResponse, using the provided ListEntitlementResponse1
func (t *ListEntitlementResponse) MergeListEntitlementResponse1(v ListEntitlementResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListEntitlementResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListEntitlementResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListFeatureResponse0 returns the union data inside the ListFeatureResponse as a ListFeatureResponse0
func (t ListFeatureResponse) AsListFeatureResponse0() (ListFeatureResponse0, error) {
	var body ListFeatureResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListFeatureResponse0 overwrites any union data inside the ListFeatureResponse as the provided ListFeatureResponse0
func (t *ListFeatureResponse) FromListFeatureResponse0(v ListFeatureResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListFeatureResponse0 performs a merge with any union data inside the ListFeatureResponse, using the provided ListFeatureResponse0
func (t *ListFeatureResponse) MergeListFeatureResponse0(v ListFeatureResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsListFeatureResponse1 returns the union data inside the ListFeatureResponse as a ListFeatureResponse1
func (t ListFeatureResponse) AsListFeatureResponse1() (ListFeatureResponse1, error) {
	var body ListFeatureResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListFeatureResponse1 overwrites any union data inside the ListFeatureResponse as the provided ListFeatureResponse1
func (t *ListFeatureResponse) FromListFeatureResponse1(v ListFeatureResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListFeatureResponse1 performs a merge with any union data inside the ListFeatureResponse, using the provided ListFeatureResponse1
func (t *ListFeatureResponse) MergeListFeatureResponse1(v ListFeatureResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListFeatureResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListFeatureResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMeasureUsageFromEnum returns the union data inside the MeasureUsageFrom as a MeasureUsageFromEnum
func (t MeasureUsageFrom) AsMeasureUsageFromEnum() (MeasureUsageFromEnum, error) {
	var body MeasureUsageFromEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromEnum overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromEnum
func (t *MeasureUsageFrom) FromMeasureUsageFromEnum(v MeasureUsageFromEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromEnum performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromEnum
func (t *MeasureUsageFrom) MergeMeasureUsageFromEnum(v MeasureUsageFromEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMeasureUsageFromTime returns the union data inside the MeasureUsageFrom as a MeasureUsageFromTime
func (t MeasureUsageFrom) AsMeasureUsageFromTime() (MeasureUsageFromTime, error) {
	var body MeasureUsageFromTime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromTime overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) FromMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromTime performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) MergeMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MeasureUsageFrom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MeasureUsageFrom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationChannelWebhook returns the union data inside the NotificationChannel as a NotificationChannelWebhook
func (t NotificationChannel) AsNotificationChannelWebhook() (NotificationChannelWebhook, error) {
	var body NotificationChannelWebhook
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationChannelWebhook overwrites any union data inside the NotificationChannel as the provided NotificationChannelWebhook
func (t *NotificationChannel) FromNotificationChannelWebhook(v NotificationChannelWebhook) error {
	v.Type = "WEBHOOK"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationChannelWebhook performs a merge with any union data inside the NotificationChannel, using the provided NotificationChannelWebhook
func (t *NotificationChannel) MergeNotificationChannelWebhook(v NotificationChannelWebhook) error {
	v.Type = "WEBHOOK"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationChannel) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationChannel) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "WEBHOOK":
		return t.AsNotificationChannelWebhook()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationChannel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationChannel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationChannelWebhookCreateRequest returns the union data inside the NotificationChannelCreateRequest as a NotificationChannelWebhookCreateRequest
func (t NotificationChannelCreateRequest) AsNotificationChannelWebhookCreateRequest() (NotificationChannelWebhookCreateRequest, error) {
	var body NotificationChannelWebhookCreateRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationChannelWebhookCreateRequest overwrites any union data inside the NotificationChannelCreateRequest as the provided NotificationChannelWebhookCreateRequest
func (t *NotificationChannelCreateRequest) FromNotificationChannelWebhookCreateRequest(v NotificationChannelWebhookCreateRequest) error {
	v.Type = "WEBHOOK"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationChannelWebhookCreateRequest performs a merge with any union data inside the NotificationChannelCreateRequest, using the provided NotificationChannelWebhookCreateRequest
func (t *NotificationChannelCreateRequest) MergeNotificationChannelWebhookCreateRequest(v NotificationChannelWebhookCreateRequest) error {
	v.Type = "WEBHOOK"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationChannelCreateRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationChannelCreateRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "WEBHOOK":
		return t.AsNotificationChannelWebhookCreateRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationChannelCreateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationChannelCreateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationEventBalanceThresholdPayload returns the union data inside the NotificationEventPayload as a NotificationEventBalanceThresholdPayload
func (t NotificationEventPayload) AsNotificationEventBalanceThresholdPayload() (NotificationEventBalanceThresholdPayload, error) {
	var body NotificationEventBalanceThresholdPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationEventBalanceThresholdPayload overwrites any union data inside the NotificationEventPayload as the provided NotificationEventBalanceThresholdPayload
func (t *NotificationEventPayload) FromNotificationEventBalanceThresholdPayload(v NotificationEventBalanceThresholdPayload) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationEventBalanceThresholdPayload performs a merge with any union data inside the NotificationEventPayload, using the provided NotificationEventBalanceThresholdPayload
func (t *NotificationEventPayload) MergeNotificationEventBalanceThresholdPayload(v NotificationEventBalanceThresholdPayload) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationEventPayload) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationEventPayload) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "entitlements.balance.threshold":
		return t.AsNotificationEventBalanceThresholdPayload()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationEventPayload) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationEventPayload) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationRuleBalanceThreshold returns the union data inside the NotificationRule as a NotificationRuleBalanceThreshold
func (t NotificationRule) AsNotificationRuleBalanceThreshold() (NotificationRuleBalanceThreshold, error) {
	var body NotificationRuleBalanceThreshold
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleBalanceThreshold overwrites any union data inside the NotificationRule as the provided NotificationRuleBalanceThreshold
func (t *NotificationRule) FromNotificationRuleBalanceThreshold(v NotificationRuleBalanceThreshold) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleBalanceThreshold performs a merge with any union data inside the NotificationRule, using the provided NotificationRuleBalanceThreshold
func (t *NotificationRule) MergeNotificationRuleBalanceThreshold(v NotificationRuleBalanceThreshold) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationRule) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationRule) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "entitlements.balance.threshold":
		return t.AsNotificationRuleBalanceThreshold()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationRuleBalanceThresholdCreateRequest returns the union data inside the NotificationRuleCreateRequest as a NotificationRuleBalanceThresholdCreateRequest
func (t NotificationRuleCreateRequest) AsNotificationRuleBalanceThresholdCreateRequest() (NotificationRuleBalanceThresholdCreateRequest, error) {
	var body NotificationRuleBalanceThresholdCreateRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationRuleBalanceThresholdCreateRequest overwrites any union data inside the NotificationRuleCreateRequest as the provided NotificationRuleBalanceThresholdCreateRequest
func (t *NotificationRuleCreateRequest) FromNotificationRuleBalanceThresholdCreateRequest(v NotificationRuleBalanceThresholdCreateRequest) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationRuleBalanceThresholdCreateRequest performs a merge with any union data inside the NotificationRuleCreateRequest, using the provided NotificationRuleBalanceThresholdCreateRequest
func (t *NotificationRuleCreateRequest) MergeNotificationRuleBalanceThresholdCreateRequest(v NotificationRuleBalanceThresholdCreateRequest) error {
	v.Type = "entitlements.balance.threshold"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationRuleCreateRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NotificationRuleCreateRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "entitlements.balance.threshold":
		return t.AsNotificationRuleBalanceThresholdCreateRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NotificationRuleCreateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationRuleCreateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get event metrics
	// (GET /api/v1/debug/metrics)
	GetDebugMetrics(w http.ResponseWriter, r *http.Request)
	// List entitlements
	// (GET /api/v1/entitlements)
	ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams)
	// Get an entitlement
	// (GET /api/v1/entitlements/{entitlementId})
	GetEntitlementById(w http.ResponseWriter, r *http.Request, entitlementId EntitlementId)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create a feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Archive a feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List grants
	// (GET /api/v1/grants)
	ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams)
	// Void a grant
	// (DELETE /api/v1/grants/{grantId})
	VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// List notification channels
	// (GET /api/v1/notification/channels)
	ListNotificationChannels(w http.ResponseWriter, r *http.Request, params ListNotificationChannelsParams)
	// Create a notification channel
	// (POST /api/v1/notification/channels)
	CreateNotificationChannel(w http.ResponseWriter, r *http.Request)
	// Delete a notification channel
	// (DELETE /api/v1/notification/channels/{channelId})
	DeleteNotificationChannel(w http.ResponseWriter, r *http.Request, channelId ChannelId)
	// Get notification channel
	// (GET /api/v1/notification/channels/{channelId})
	GetNotificationChannel(w http.ResponseWriter, r *http.Request, channelId ChannelId)
	// Update notification channel
	// (PUT /api/v1/notification/channels/{channelId})
	UpdateNotificationChannel(w http.ResponseWriter, r *http.Request, channelId ChannelId)
	// List notification evens
	// (GET /api/v1/notification/events)
	ListNotificationEvents(w http.ResponseWriter, r *http.Request, params ListNotificationEventsParams)
	// Create a notification event
	// (POST /api/v1/notification/events)
	CreateNotificationEvent(w http.ResponseWriter, r *http.Request)
	// Get notification event
	// (GET /api/v1/notification/events/{eventId})
	GetNotificationEvent(w http.ResponseWriter, r *http.Request, eventId EventId)
	// List notification rules
	// (GET /api/v1/notification/rules)
	ListNotificationRules(w http.ResponseWriter, r *http.Request, params ListNotificationRulesParams)
	// Create a notification rule
	// (POST /api/v1/notification/rules)
	CreateNotificationRule(w http.ResponseWriter, r *http.Request)
	// Delete a notification rule
	// (DELETE /api/v1/notification/rules/{ruleId})
	DeleteNotificationRule(w http.ResponseWriter, r *http.Request, ruleId RuleId)
	// Get notification rule
	// (GET /api/v1/notification/rules/{ruleId})
	GetNotificationRule(w http.ResponseWriter, r *http.Request, ruleId RuleId)
	// Update a notification rule
	// (PUT /api/v1/notification/rules/{ruleId})
	UpdateNotificationRule(w http.ResponseWriter, r *http.Request, ruleId RuleId)
	// Receive Svix operational events
	// (POST /api/v1/notification/webhook/svix)
	ReceiveSvixOperationalEvent(w http.ResponseWriter, r *http.Request)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// List entitlements of a subject
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
	ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams)
	// Create an entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
	CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// List grants for an entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
	ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey, params ListEntitlementGrantsParams)
	// Create a grant
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
	CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey)
	// Get the current value and access of an entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
	GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey, params GetEntitlementValueParams)
	// Delete an entitlement
	// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get an entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get the balance history of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
	GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams)
	// Reset an entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
	ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get event metrics
// (GET /api/v1/debug/metrics)
func (_ Unimplemented) GetDebugMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements
// (GET /api/v1/entitlements)
func (_ Unimplemented) ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an entitlement
// (GET /api/v1/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlementById(w http.ResponseWriter, r *http.Request, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Archive a feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants
// (GET /api/v1/grants)
func (_ Unimplemented) ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void a grant
// (DELETE /api/v1/grants/{grantId})
func (_ Unimplemented) VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification channels
// (GET /api/v1/notification/channels)
func (_ Unimplemented) ListNotificationChannels(w http.ResponseWriter, r *http.Request, params ListNotificationChannelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification channel
// (POST /api/v1/notification/channels)
func (_ Unimplemented) CreateNotificationChannel(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notification channel
// (DELETE /api/v1/notification/channels/{channelId})
func (_ Unimplemented) DeleteNotificationChannel(w http.ResponseWriter, r *http.Request, channelId ChannelId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification channel
// (GET /api/v1/notification/channels/{channelId})
func (_ Unimplemented) GetNotificationChannel(w http.ResponseWriter, r *http.Request, channelId ChannelId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update notification channel
// (PUT /api/v1/notification/channels/{channelId})
func (_ Unimplemented) UpdateNotificationChannel(w http.ResponseWriter, r *http.Request, channelId ChannelId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification evens
// (GET /api/v1/notification/events)
func (_ Unimplemented) ListNotificationEvents(w http.ResponseWriter, r *http.Request, params ListNotificationEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification event
// (POST /api/v1/notification/events)
func (_ Unimplemented) CreateNotificationEvent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification event
// (GET /api/v1/notification/events/{eventId})
func (_ Unimplemented) GetNotificationEvent(w http.ResponseWriter, r *http.Request, eventId EventId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification rules
// (GET /api/v1/notification/rules)
func (_ Unimplemented) ListNotificationRules(w http.ResponseWriter, r *http.Request, params ListNotificationRulesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification rule
// (POST /api/v1/notification/rules)
func (_ Unimplemented) CreateNotificationRule(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notification rule
// (DELETE /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) DeleteNotificationRule(w http.ResponseWriter, r *http.Request, ruleId RuleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification rule
// (GET /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) GetNotificationRule(w http.ResponseWriter, r *http.Request, ruleId RuleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a notification rule
// (PUT /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) UpdateNotificationRule(w http.ResponseWriter, r *http.Request, ruleId RuleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Receive Svix operational events
// (POST /api/v1/notification/webhook/svix)
func (_ Unimplemented) ReceiveSvixOperationalEvent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements of a subject
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for an entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
func (_ Unimplemented) ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey, params ListEntitlementGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a grant
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the current value and access of an entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
func (_ Unimplemented) GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey, params GetEntitlementValueParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an entitlement
// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance history of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
func (_ Unimplemented) GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset an entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
func (_ Unimplemented) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDebugMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetDebugMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDebugMetrics(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "entitlementType" -------------

	err = runtime.BindQueryParameter("form", true, false, "entitlementType", r.URL.Query(), &params.EntitlementType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementType", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlements(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementById operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementById(w, r, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "meterSlug" -------------

	err = runtime.BindQueryParameter("form", true, false, "meterSlug", r.URL.Query(), &params.MeterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGrants operation middleware
func (siw *ServerInterfaceWrapper) ListGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId GrantId

	err = runtime.BindStyledParameterWithOptions("simple", "grantId", chi.URLParam(r, "grantId"), &grantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidGrant(w, r, grantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListNotificationChannels operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationChannels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationChannelsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDisabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDisabled", r.URL.Query(), &params.IncludeDisabled)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDisabled", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationChannels(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationChannel(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotificationChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId ChannelId

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId ChannelId

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) UpdateNotificationChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId ChannelId

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListNotificationEvents operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationEventsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNotificationEvent operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationEvent(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNotificationEvent operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", chi.URLParam(r, "eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationEvent(w, r, eventId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListNotificationRules operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationRulesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDisabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDisabled", r.URL.Query(), &params.IncludeDisabled)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDisabled", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "channel" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel", r.URL.Query(), &params.Channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationRules(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationRule(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotificationRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId RuleId

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId RuleId

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) UpdateNotificationRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId RuleId

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReceiveSvixOperationalEvent operation middleware
func (siw *ServerInterfaceWrapper) ReceiveSvixOperationalEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReceiveSvixOperationalEvent(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjectEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubjectEntitlementsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjectEntitlements(w, r, subjectIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEntitlement operation middleware
func (siw *ServerInterfaceWrapper) CreateEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEntitlement(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEntitlementGrants operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlementGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey EntitlementIdOrFeatureKey

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementGrantsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlementGrants(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey EntitlementIdOrFeatureKey

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r, subjectIdOrKey, entitlementIdOrFeatureKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementValue operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementValue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey EntitlementIdOrFeatureKey

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementValueParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementValue(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEntitlement operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlement operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementHistory operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementHistoryParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Required query parameter "windowSize" -------------

	if paramValue := r.URL.Query().Get("windowSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "windowSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementHistory(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetEntitlementUsage operation middleware
func (siw *ServerInterfaceWrapper) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEntitlementUsage(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/debug/metrics", wrapper.GetDebugMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.ListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements/{entitlementId}", wrapper.GetEntitlementById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.ListGrants)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/grants/{grantId}", wrapper.VoidGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/channels", wrapper.ListNotificationChannels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/channels", wrapper.CreateNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.DeleteNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.GetNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.UpdateNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/events", wrapper.ListNotificationEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/events", wrapper.CreateNotificationEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/events/{eventId}", wrapper.GetNotificationEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/rules", wrapper.ListNotificationRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/rules", wrapper.CreateNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.DeleteNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.GetNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.UpdateNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/webhook/svix", wrapper.ReceiveSvixOperationalEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.ListSubjectEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.CreateEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants", wrapper.ListEntitlementGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value", wrapper.GetEntitlementValue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.DeleteEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.GetEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history", wrapper.GetEntitlementHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset", wrapper.ResetEntitlementUsage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

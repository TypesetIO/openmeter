// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
)

// BillingProfile is the model entity for the BillingProfile schema.
type BillingProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// TaxProvider holds the value of the "tax_provider" field.
	TaxProvider *provider.TaxProvider `json:"tax_provider,omitempty"`
	// TaxProviderConfig holds the value of the "tax_provider_config" field.
	TaxProviderConfig provider.TaxConfiguration `json:"tax_provider_config,omitempty"`
	// InvoicingProvider holds the value of the "invoicing_provider" field.
	InvoicingProvider *provider.InvoicingProvider `json:"invoicing_provider,omitempty"`
	// InvoicingProviderConfig holds the value of the "invoicing_provider_config" field.
	InvoicingProviderConfig provider.InvoicingConfiguration `json:"invoicing_provider_config,omitempty"`
	// PaymentProvider holds the value of the "payment_provider" field.
	PaymentProvider *provider.PaymentProvider `json:"payment_provider,omitempty"`
	// PaymentProviderConfig holds the value of the "payment_provider_config" field.
	PaymentProviderConfig provider.PaymentConfiguration `json:"payment_provider_config,omitempty"`
	// WorkflowConfigID holds the value of the "workflow_config_id" field.
	WorkflowConfigID string `json:"workflow_config_id,omitempty"`
	// Default holds the value of the "default" field.
	Default bool `json:"default,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingProfileQuery when eager-loading is set.
	Edges        BillingProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingProfileEdges holds the relations/edges for other nodes in the graph.
type BillingProfileEdges struct {
	// BillingInvoices holds the value of the billing_invoices edge.
	BillingInvoices []*BillingInvoice `json:"billing_invoices,omitempty"`
	// BillingWorkflowConfig holds the value of the billing_workflow_config edge.
	BillingWorkflowConfig *BillingWorkflowConfig `json:"billing_workflow_config,omitempty"`
	// Customers holds the value of the customers edge.
	Customers []*Customer `json:"customers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BillingInvoicesOrErr returns the BillingInvoices value or an error if the edge
// was not loaded in eager-loading.
func (e BillingProfileEdges) BillingInvoicesOrErr() ([]*BillingInvoice, error) {
	if e.loadedTypes[0] {
		return e.BillingInvoices, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoices"}
}

// BillingWorkflowConfigOrErr returns the BillingWorkflowConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingProfileEdges) BillingWorkflowConfigOrErr() (*BillingWorkflowConfig, error) {
	if e.BillingWorkflowConfig != nil {
		return e.BillingWorkflowConfig, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billingworkflowconfig.Label}
	}
	return nil, &NotLoadedError{edge: "billing_workflow_config"}
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading.
func (e BillingProfileEdges) CustomersOrErr() ([]*Customer, error) {
	if e.loadedTypes[2] {
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "customers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingprofile.FieldMetadata:
			values[i] = new([]byte)
		case billingprofile.FieldDefault:
			values[i] = new(sql.NullBool)
		case billingprofile.FieldID, billingprofile.FieldKey, billingprofile.FieldNamespace, billingprofile.FieldTaxProvider, billingprofile.FieldInvoicingProvider, billingprofile.FieldPaymentProvider, billingprofile.FieldWorkflowConfigID:
			values[i] = new(sql.NullString)
		case billingprofile.FieldCreatedAt, billingprofile.FieldUpdatedAt, billingprofile.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case billingprofile.FieldTaxProviderConfig:
			values[i] = billingprofile.ValueScanner.TaxProviderConfig.ScanValue()
		case billingprofile.FieldInvoicingProviderConfig:
			values[i] = billingprofile.ValueScanner.InvoicingProviderConfig.ScanValue()
		case billingprofile.FieldPaymentProviderConfig:
			values[i] = billingprofile.ValueScanner.PaymentProviderConfig.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingProfile fields.
func (bp *BillingProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingprofile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bp.ID = value.String
			}
		case billingprofile.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				bp.Key = value.String
			}
		case billingprofile.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bp.Namespace = value.String
			}
		case billingprofile.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bp.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billingprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bp.CreatedAt = value.Time
			}
		case billingprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bp.UpdatedAt = value.Time
			}
		case billingprofile.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bp.DeletedAt = new(time.Time)
				*bp.DeletedAt = value.Time
			}
		case billingprofile.FieldTaxProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_provider", values[i])
			} else if value.Valid {
				bp.TaxProvider = new(provider.TaxProvider)
				*bp.TaxProvider = provider.TaxProvider(value.String)
			}
		case billingprofile.FieldTaxProviderConfig:
			if value, err := billingprofile.ValueScanner.TaxProviderConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				bp.TaxProviderConfig = value
			}
		case billingprofile.FieldInvoicingProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_provider", values[i])
			} else if value.Valid {
				bp.InvoicingProvider = new(provider.InvoicingProvider)
				*bp.InvoicingProvider = provider.InvoicingProvider(value.String)
			}
		case billingprofile.FieldInvoicingProviderConfig:
			if value, err := billingprofile.ValueScanner.InvoicingProviderConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				bp.InvoicingProviderConfig = value
			}
		case billingprofile.FieldPaymentProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_provider", values[i])
			} else if value.Valid {
				bp.PaymentProvider = new(provider.PaymentProvider)
				*bp.PaymentProvider = provider.PaymentProvider(value.String)
			}
		case billingprofile.FieldPaymentProviderConfig:
			if value, err := billingprofile.ValueScanner.PaymentProviderConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				bp.PaymentProviderConfig = value
			}
		case billingprofile.FieldWorkflowConfigID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_config_id", values[i])
			} else if value.Valid {
				bp.WorkflowConfigID = value.String
			}
		case billingprofile.FieldDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value.Valid {
				bp.Default = value.Bool
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingProfile.
// This includes values selected through modifiers, order, etc.
func (bp *BillingProfile) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// QueryBillingInvoices queries the "billing_invoices" edge of the BillingProfile entity.
func (bp *BillingProfile) QueryBillingInvoices() *BillingInvoiceQuery {
	return NewBillingProfileClient(bp.config).QueryBillingInvoices(bp)
}

// QueryBillingWorkflowConfig queries the "billing_workflow_config" edge of the BillingProfile entity.
func (bp *BillingProfile) QueryBillingWorkflowConfig() *BillingWorkflowConfigQuery {
	return NewBillingProfileClient(bp.config).QueryBillingWorkflowConfig(bp)
}

// QueryCustomers queries the "customers" edge of the BillingProfile entity.
func (bp *BillingProfile) QueryCustomers() *CustomerQuery {
	return NewBillingProfileClient(bp.config).QueryCustomers(bp)
}

// Update returns a builder for updating this BillingProfile.
// Note that you need to call BillingProfile.Unwrap() before calling this method if this BillingProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BillingProfile) Update() *BillingProfileUpdateOne {
	return NewBillingProfileClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BillingProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BillingProfile) Unwrap() *BillingProfile {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingProfile is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BillingProfile) String() string {
	var builder strings.Builder
	builder.WriteString("BillingProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("key=")
	builder.WriteString(bp.Key)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(bp.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bp.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bp.TaxProvider; v != nil {
		builder.WriteString("tax_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tax_provider_config=")
	builder.WriteString(fmt.Sprintf("%v", bp.TaxProviderConfig))
	builder.WriteString(", ")
	if v := bp.InvoicingProvider; v != nil {
		builder.WriteString("invoicing_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("invoicing_provider_config=")
	builder.WriteString(fmt.Sprintf("%v", bp.InvoicingProviderConfig))
	builder.WriteString(", ")
	if v := bp.PaymentProvider; v != nil {
		builder.WriteString("payment_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("payment_provider_config=")
	builder.WriteString(fmt.Sprintf("%v", bp.PaymentProviderConfig))
	builder.WriteString(", ")
	builder.WriteString("workflow_config_id=")
	builder.WriteString(bp.WorkflowConfigID)
	builder.WriteString(", ")
	builder.WriteString("default=")
	builder.WriteString(fmt.Sprintf("%v", bp.Default))
	builder.WriteByte(')')
	return builder.String()
}

// BillingProfiles is a parsable slice of BillingProfile.
type BillingProfiles []*BillingProfile

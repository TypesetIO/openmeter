// Code generated by ent, DO NOT EDIT.

package integrationstripe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldDeletedAt, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldAppID, v))
}

// StripeAccountID applies equality check predicate on the "stripe_account_id" field. It's identical to StripeAccountIDEQ.
func StripeAccountID(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldStripeAccountID, v))
}

// StripeLivemode applies equality check predicate on the "stripe_livemode" field. It's identical to StripeLivemodeEQ.
func StripeLivemode(v bool) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldStripeLivemode, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotNull(FieldDeletedAt))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldContainsFold(FieldAppID, v))
}

// StripeAccountIDEQ applies the EQ predicate on the "stripe_account_id" field.
func StripeAccountIDEQ(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldStripeAccountID, v))
}

// StripeAccountIDNEQ applies the NEQ predicate on the "stripe_account_id" field.
func StripeAccountIDNEQ(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldStripeAccountID, v))
}

// StripeAccountIDIn applies the In predicate on the "stripe_account_id" field.
func StripeAccountIDIn(vs ...string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIn(FieldStripeAccountID, vs...))
}

// StripeAccountIDNotIn applies the NotIn predicate on the "stripe_account_id" field.
func StripeAccountIDNotIn(vs ...string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotIn(FieldStripeAccountID, vs...))
}

// StripeAccountIDGT applies the GT predicate on the "stripe_account_id" field.
func StripeAccountIDGT(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGT(FieldStripeAccountID, v))
}

// StripeAccountIDGTE applies the GTE predicate on the "stripe_account_id" field.
func StripeAccountIDGTE(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldGTE(FieldStripeAccountID, v))
}

// StripeAccountIDLT applies the LT predicate on the "stripe_account_id" field.
func StripeAccountIDLT(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLT(FieldStripeAccountID, v))
}

// StripeAccountIDLTE applies the LTE predicate on the "stripe_account_id" field.
func StripeAccountIDLTE(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldLTE(FieldStripeAccountID, v))
}

// StripeAccountIDContains applies the Contains predicate on the "stripe_account_id" field.
func StripeAccountIDContains(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldContains(FieldStripeAccountID, v))
}

// StripeAccountIDHasPrefix applies the HasPrefix predicate on the "stripe_account_id" field.
func StripeAccountIDHasPrefix(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldHasPrefix(FieldStripeAccountID, v))
}

// StripeAccountIDHasSuffix applies the HasSuffix predicate on the "stripe_account_id" field.
func StripeAccountIDHasSuffix(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldHasSuffix(FieldStripeAccountID, v))
}

// StripeAccountIDIsNil applies the IsNil predicate on the "stripe_account_id" field.
func StripeAccountIDIsNil() predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIsNull(FieldStripeAccountID))
}

// StripeAccountIDNotNil applies the NotNil predicate on the "stripe_account_id" field.
func StripeAccountIDNotNil() predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotNull(FieldStripeAccountID))
}

// StripeAccountIDEqualFold applies the EqualFold predicate on the "stripe_account_id" field.
func StripeAccountIDEqualFold(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEqualFold(FieldStripeAccountID, v))
}

// StripeAccountIDContainsFold applies the ContainsFold predicate on the "stripe_account_id" field.
func StripeAccountIDContainsFold(v string) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldContainsFold(FieldStripeAccountID, v))
}

// StripeLivemodeEQ applies the EQ predicate on the "stripe_livemode" field.
func StripeLivemodeEQ(v bool) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldEQ(FieldStripeLivemode, v))
}

// StripeLivemodeNEQ applies the NEQ predicate on the "stripe_livemode" field.
func StripeLivemodeNEQ(v bool) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNEQ(FieldStripeLivemode, v))
}

// StripeLivemodeIsNil applies the IsNil predicate on the "stripe_livemode" field.
func StripeLivemodeIsNil() predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldIsNull(FieldStripeLivemode))
}

// StripeLivemodeNotNil applies the NotNil predicate on the "stripe_livemode" field.
func StripeLivemodeNotNil() predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.FieldNotNull(FieldStripeLivemode))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IntegrationStripe) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IntegrationStripe) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IntegrationStripe) predicate.IntegrationStripe {
	return predicate.IntegrationStripe(sql.NotPredicates(p))
}

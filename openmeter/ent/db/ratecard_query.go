// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/ratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
)

// RateCardQuery is the builder for querying RateCard entities.
type RateCardQuery struct {
	config
	ctx                  *QueryContext
	order                []ratecard.OrderOption
	inters               []Interceptor
	predicates           []predicate.RateCard
	withAddonRatecard    *AddonRateCardQuery
	withPlanRatecard     *PlanRateCardQuery
	withSubscriptionItem *SubscriptionItemQuery
	withFeature          *FeatureQuery
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RateCardQuery builder.
func (rcq *RateCardQuery) Where(ps ...predicate.RateCard) *RateCardQuery {
	rcq.predicates = append(rcq.predicates, ps...)
	return rcq
}

// Limit the number of records to be returned by this query.
func (rcq *RateCardQuery) Limit(limit int) *RateCardQuery {
	rcq.ctx.Limit = &limit
	return rcq
}

// Offset to start from.
func (rcq *RateCardQuery) Offset(offset int) *RateCardQuery {
	rcq.ctx.Offset = &offset
	return rcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcq *RateCardQuery) Unique(unique bool) *RateCardQuery {
	rcq.ctx.Unique = &unique
	return rcq
}

// Order specifies how the records should be ordered.
func (rcq *RateCardQuery) Order(o ...ratecard.OrderOption) *RateCardQuery {
	rcq.order = append(rcq.order, o...)
	return rcq
}

// QueryAddonRatecard chains the current query on the "addon_ratecard" edge.
func (rcq *RateCardQuery) QueryAddonRatecard() *AddonRateCardQuery {
	query := (&AddonRateCardClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ratecard.Table, ratecard.FieldID, selector),
			sqlgraph.To(addonratecard.Table, addonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ratecard.AddonRatecardTable, ratecard.AddonRatecardColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanRatecard chains the current query on the "plan_ratecard" edge.
func (rcq *RateCardQuery) QueryPlanRatecard() *PlanRateCardQuery {
	query := (&PlanRateCardClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ratecard.Table, ratecard.FieldID, selector),
			sqlgraph.To(planratecard.Table, planratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ratecard.PlanRatecardTable, ratecard.PlanRatecardColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriptionItem chains the current query on the "subscription_item" edge.
func (rcq *RateCardQuery) QuerySubscriptionItem() *SubscriptionItemQuery {
	query := (&SubscriptionItemClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ratecard.Table, ratecard.FieldID, selector),
			sqlgraph.To(subscriptionitem.Table, subscriptionitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ratecard.SubscriptionItemTable, ratecard.SubscriptionItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeature chains the current query on the "feature" edge.
func (rcq *RateCardQuery) QueryFeature() *FeatureQuery {
	query := (&FeatureClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ratecard.Table, ratecard.FieldID, selector),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ratecard.FeatureTable, ratecard.FeatureColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RateCard entity from the query.
// Returns a *NotFoundError when no RateCard was found.
func (rcq *RateCardQuery) First(ctx context.Context) (*RateCard, error) {
	nodes, err := rcq.Limit(1).All(setContextOp(ctx, rcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ratecard.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcq *RateCardQuery) FirstX(ctx context.Context) *RateCard {
	node, err := rcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RateCard ID from the query.
// Returns a *NotFoundError when no RateCard ID was found.
func (rcq *RateCardQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rcq.Limit(1).IDs(setContextOp(ctx, rcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ratecard.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcq *RateCardQuery) FirstIDX(ctx context.Context) string {
	id, err := rcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RateCard entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RateCard entity is found.
// Returns a *NotFoundError when no RateCard entities are found.
func (rcq *RateCardQuery) Only(ctx context.Context) (*RateCard, error) {
	nodes, err := rcq.Limit(2).All(setContextOp(ctx, rcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ratecard.Label}
	default:
		return nil, &NotSingularError{ratecard.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcq *RateCardQuery) OnlyX(ctx context.Context) *RateCard {
	node, err := rcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RateCard ID in the query.
// Returns a *NotSingularError when more than one RateCard ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcq *RateCardQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rcq.Limit(2).IDs(setContextOp(ctx, rcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ratecard.Label}
	default:
		err = &NotSingularError{ratecard.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcq *RateCardQuery) OnlyIDX(ctx context.Context) string {
	id, err := rcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RateCards.
func (rcq *RateCardQuery) All(ctx context.Context) ([]*RateCard, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryAll)
	if err := rcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RateCard, *RateCardQuery]()
	return withInterceptors[[]*RateCard](ctx, rcq, qr, rcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcq *RateCardQuery) AllX(ctx context.Context) []*RateCard {
	nodes, err := rcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RateCard IDs.
func (rcq *RateCardQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rcq.ctx.Unique == nil && rcq.path != nil {
		rcq.Unique(true)
	}
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryIDs)
	if err = rcq.Select(ratecard.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcq *RateCardQuery) IDsX(ctx context.Context) []string {
	ids, err := rcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcq *RateCardQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryCount)
	if err := rcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcq, querierCount[*RateCardQuery](), rcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcq *RateCardQuery) CountX(ctx context.Context) int {
	count, err := rcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcq *RateCardQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryExist)
	switch _, err := rcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcq *RateCardQuery) ExistX(ctx context.Context) bool {
	exist, err := rcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RateCardQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcq *RateCardQuery) Clone() *RateCardQuery {
	if rcq == nil {
		return nil
	}
	return &RateCardQuery{
		config:               rcq.config,
		ctx:                  rcq.ctx.Clone(),
		order:                append([]ratecard.OrderOption{}, rcq.order...),
		inters:               append([]Interceptor{}, rcq.inters...),
		predicates:           append([]predicate.RateCard{}, rcq.predicates...),
		withAddonRatecard:    rcq.withAddonRatecard.Clone(),
		withPlanRatecard:     rcq.withPlanRatecard.Clone(),
		withSubscriptionItem: rcq.withSubscriptionItem.Clone(),
		withFeature:          rcq.withFeature.Clone(),
		// clone intermediate query.
		sql:  rcq.sql.Clone(),
		path: rcq.path,
	}
}

// WithAddonRatecard tells the query-builder to eager-load the nodes that are connected to
// the "addon_ratecard" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RateCardQuery) WithAddonRatecard(opts ...func(*AddonRateCardQuery)) *RateCardQuery {
	query := (&AddonRateCardClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withAddonRatecard = query
	return rcq
}

// WithPlanRatecard tells the query-builder to eager-load the nodes that are connected to
// the "plan_ratecard" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RateCardQuery) WithPlanRatecard(opts ...func(*PlanRateCardQuery)) *RateCardQuery {
	query := (&PlanRateCardClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withPlanRatecard = query
	return rcq
}

// WithSubscriptionItem tells the query-builder to eager-load the nodes that are connected to
// the "subscription_item" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RateCardQuery) WithSubscriptionItem(opts ...func(*SubscriptionItemQuery)) *RateCardQuery {
	query := (&SubscriptionItemClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withSubscriptionItem = query
	return rcq
}

// WithFeature tells the query-builder to eager-load the nodes that are connected to
// the "feature" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RateCardQuery) WithFeature(opts ...func(*FeatureQuery)) *RateCardQuery {
	query := (&FeatureClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withFeature = query
	return rcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RateCard.Query().
//		GroupBy(ratecard.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (rcq *RateCardQuery) GroupBy(field string, fields ...string) *RateCardGroupBy {
	rcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RateCardGroupBy{build: rcq}
	grbuild.flds = &rcq.ctx.Fields
	grbuild.label = ratecard.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.RateCard.Query().
//		Select(ratecard.FieldNamespace).
//		Scan(ctx, &v)
func (rcq *RateCardQuery) Select(fields ...string) *RateCardSelect {
	rcq.ctx.Fields = append(rcq.ctx.Fields, fields...)
	sbuild := &RateCardSelect{RateCardQuery: rcq}
	sbuild.label = ratecard.Label
	sbuild.flds, sbuild.scan = &rcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RateCardSelect configured with the given aggregations.
func (rcq *RateCardQuery) Aggregate(fns ...AggregateFunc) *RateCardSelect {
	return rcq.Select().Aggregate(fns...)
}

func (rcq *RateCardQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcq.ctx.Fields {
		if !ratecard.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if rcq.path != nil {
		prev, err := rcq.path(ctx)
		if err != nil {
			return err
		}
		rcq.sql = prev
	}
	return nil
}

func (rcq *RateCardQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RateCard, error) {
	var (
		nodes       = []*RateCard{}
		_spec       = rcq.querySpec()
		loadedTypes = [4]bool{
			rcq.withAddonRatecard != nil,
			rcq.withPlanRatecard != nil,
			rcq.withSubscriptionItem != nil,
			rcq.withFeature != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RateCard).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RateCard{config: rcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rcq.withAddonRatecard; query != nil {
		if err := rcq.loadAddonRatecard(ctx, query, nodes, nil,
			func(n *RateCard, e *AddonRateCard) { n.Edges.AddonRatecard = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withPlanRatecard; query != nil {
		if err := rcq.loadPlanRatecard(ctx, query, nodes, nil,
			func(n *RateCard, e *PlanRateCard) { n.Edges.PlanRatecard = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withSubscriptionItem; query != nil {
		if err := rcq.loadSubscriptionItem(ctx, query, nodes, nil,
			func(n *RateCard, e *SubscriptionItem) { n.Edges.SubscriptionItem = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withFeature; query != nil {
		if err := rcq.loadFeature(ctx, query, nodes, nil,
			func(n *RateCard, e *Feature) { n.Edges.Feature = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rcq *RateCardQuery) loadAddonRatecard(ctx context.Context, query *AddonRateCardQuery, nodes []*RateCard, init func(*RateCard), assign func(*RateCard, *AddonRateCard)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RateCard)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(addonratecard.FieldRatecardID)
	}
	query.Where(predicate.AddonRateCard(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ratecard.AddonRatecardColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RatecardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ratecard_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rcq *RateCardQuery) loadPlanRatecard(ctx context.Context, query *PlanRateCardQuery, nodes []*RateCard, init func(*RateCard), assign func(*RateCard, *PlanRateCard)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RateCard)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(planratecard.FieldRatecardID)
	}
	query.Where(predicate.PlanRateCard(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ratecard.PlanRatecardColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RatecardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ratecard_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rcq *RateCardQuery) loadSubscriptionItem(ctx context.Context, query *SubscriptionItemQuery, nodes []*RateCard, init func(*RateCard), assign func(*RateCard, *SubscriptionItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RateCard)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subscriptionitem.FieldRatecardID)
	}
	query.Where(predicate.SubscriptionItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ratecard.SubscriptionItemColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RatecardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ratecard_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rcq *RateCardQuery) loadFeature(ctx context.Context, query *FeatureQuery, nodes []*RateCard, init func(*RateCard), assign func(*RateCard, *Feature)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*RateCard)
	for i := range nodes {
		if nodes[i].FeatureID == nil {
			continue
		}
		fk := *nodes[i].FeatureID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(feature.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rcq *RateCardQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcq.querySpec()
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	_spec.Node.Columns = rcq.ctx.Fields
	if len(rcq.ctx.Fields) > 0 {
		_spec.Unique = rcq.ctx.Unique != nil && *rcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcq.driver, _spec)
}

func (rcq *RateCardQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ratecard.Table, ratecard.Columns, sqlgraph.NewFieldSpec(ratecard.FieldID, field.TypeString))
	_spec.From = rcq.sql
	if unique := rcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcq.path != nil {
		_spec.Unique = true
	}
	if fields := rcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ratecard.FieldID)
		for i := range fields {
			if fields[i] != ratecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rcq.withFeature != nil {
			_spec.Node.AddColumnOnce(ratecard.FieldFeatureID)
		}
	}
	if ps := rcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcq *RateCardQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcq.driver.Dialect())
	t1 := builder.Table(ratecard.Table)
	columns := rcq.ctx.Fields
	if len(columns) == 0 {
		columns = ratecard.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcq.sql != nil {
		selector = rcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcq.ctx.Unique != nil && *rcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range rcq.modifiers {
		m(selector)
	}
	for _, p := range rcq.predicates {
		p(selector)
	}
	for _, p := range rcq.order {
		p(selector)
	}
	if offset := rcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (rcq *RateCardQuery) ForUpdate(opts ...sql.LockOption) *RateCardQuery {
	if rcq.driver.Dialect() == dialect.Postgres {
		rcq.Unique(false)
	}
	rcq.modifiers = append(rcq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return rcq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (rcq *RateCardQuery) ForShare(opts ...sql.LockOption) *RateCardQuery {
	if rcq.driver.Dialect() == dialect.Postgres {
		rcq.Unique(false)
	}
	rcq.modifiers = append(rcq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return rcq
}

// RateCardGroupBy is the group-by builder for RateCard entities.
type RateCardGroupBy struct {
	selector
	build *RateCardQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcgb *RateCardGroupBy) Aggregate(fns ...AggregateFunc) *RateCardGroupBy {
	rcgb.fns = append(rcgb.fns, fns...)
	return rcgb
}

// Scan applies the selector query and scans the result into the given value.
func (rcgb *RateCardGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcgb.build.ctx, ent.OpQueryGroupBy)
	if err := rcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RateCardQuery, *RateCardGroupBy](ctx, rcgb.build, rcgb, rcgb.build.inters, v)
}

func (rcgb *RateCardGroupBy) sqlScan(ctx context.Context, root *RateCardQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcgb.fns))
	for _, fn := range rcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcgb.flds)+len(rcgb.fns))
		for _, f := range *rcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RateCardSelect is the builder for selecting fields of RateCard entities.
type RateCardSelect struct {
	*RateCardQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcs *RateCardSelect) Aggregate(fns ...AggregateFunc) *RateCardSelect {
	rcs.fns = append(rcs.fns, fns...)
	return rcs
}

// Scan applies the selector query and scans the result into the given value.
func (rcs *RateCardSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcs.ctx, ent.OpQuerySelect)
	if err := rcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RateCardQuery, *RateCardSelect](ctx, rcs.RateCardQuery, rcs, rcs.inters, v)
}

func (rcs *RateCardSelect) sqlScan(ctx context.Context, root *RateCardQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcs.fns))
	for _, fn := range rcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

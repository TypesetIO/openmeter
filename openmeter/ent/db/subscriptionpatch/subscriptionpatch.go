// Code generated by ent, DO NOT EDIT.

package subscriptionpatch

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscriptionpatch type in the database.
	Label = "subscription_patch"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldAppliedAt holds the string denoting the applied_at field in the database.
	FieldAppliedAt = "applied_at"
	// FieldBatchIndex holds the string denoting the batch_index field in the database.
	FieldBatchIndex = "batch_index"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// EdgeValueAddItem holds the string denoting the value_add_item edge name in mutations.
	EdgeValueAddItem = "value_add_item"
	// EdgeValueAddPhase holds the string denoting the value_add_phase edge name in mutations.
	EdgeValueAddPhase = "value_add_phase"
	// EdgeValueExtendPhase holds the string denoting the value_extend_phase edge name in mutations.
	EdgeValueExtendPhase = "value_extend_phase"
	// Table holds the table name of the subscriptionpatch in the database.
	Table = "subscription_patches"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "subscription_patches"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "subscription_id"
	// ValueAddItemTable is the table that holds the value_add_item relation/edge.
	ValueAddItemTable = "subscription_patch_value_add_items"
	// ValueAddItemInverseTable is the table name for the SubscriptionPatchValueAddItem entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionpatchvalueadditem" package.
	ValueAddItemInverseTable = "subscription_patch_value_add_items"
	// ValueAddItemColumn is the table column denoting the value_add_item relation/edge.
	ValueAddItemColumn = "subscription_patch_id"
	// ValueAddPhaseTable is the table that holds the value_add_phase relation/edge.
	ValueAddPhaseTable = "subscription_patch_value_add_phases"
	// ValueAddPhaseInverseTable is the table name for the SubscriptionPatchValueAddPhase entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionpatchvalueaddphase" package.
	ValueAddPhaseInverseTable = "subscription_patch_value_add_phases"
	// ValueAddPhaseColumn is the table column denoting the value_add_phase relation/edge.
	ValueAddPhaseColumn = "subscription_patch_id"
	// ValueExtendPhaseTable is the table that holds the value_extend_phase relation/edge.
	ValueExtendPhaseTable = "subscription_patch_value_extend_phases"
	// ValueExtendPhaseInverseTable is the table name for the SubscriptionPatchValueExtendPhase entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionpatchvalueextendphase" package.
	ValueExtendPhaseInverseTable = "subscription_patch_value_extend_phases"
	// ValueExtendPhaseColumn is the table column denoting the value_extend_phase relation/edge.
	ValueExtendPhaseColumn = "subscription_patch_id"
)

// Columns holds all SQL columns for subscriptionpatch fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMetadata,
	FieldSubscriptionID,
	FieldAppliedAt,
	FieldBatchIndex,
	FieldOperation,
	FieldPath,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SubscriptionIDValidator is a validator for the "subscription_id" field. It is called by the builders before save.
	SubscriptionIDValidator func(string) error
	// OperationValidator is a validator for the "operation" field. It is called by the builders before save.
	OperationValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the SubscriptionPatch queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByAppliedAt orders the results by the applied_at field.
func ByAppliedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppliedAt, opts...).ToFunc()
}

// ByBatchIndex orders the results by the batch_index field.
func ByBatchIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatchIndex, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// BySubscriptionField orders the results by subscription field.
func BySubscriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByValueAddItemField orders the results by value_add_item field.
func ByValueAddItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValueAddItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByValueAddPhaseField orders the results by value_add_phase field.
func ByValueAddPhaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValueAddPhaseStep(), sql.OrderByField(field, opts...))
	}
}

// ByValueExtendPhaseField orders the results by value_extend_phase field.
func ByValueExtendPhaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValueExtendPhaseStep(), sql.OrderByField(field, opts...))
	}
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
	)
}
func newValueAddItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValueAddItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ValueAddItemTable, ValueAddItemColumn),
	)
}
func newValueAddPhaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValueAddPhaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ValueAddPhaseTable, ValueAddPhaseColumn),
	)
}
func newValueExtendPhaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValueExtendPhaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ValueExtendPhaseTable, ValueExtendPhaseColumn),
	)
}

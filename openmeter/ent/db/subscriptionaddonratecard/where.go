// Code generated by ent, DO NOT EDIT.

package subscriptionaddonratecard

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldDescription, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldKey, v))
}

// SubscriptionAddonID applies equality check predicate on the "subscription_addon_id" field. It's identical to SubscriptionAddonIDEQ.
func SubscriptionAddonID(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldSubscriptionAddonID, v))
}

// AddonRatecardID applies equality check predicate on the "addon_ratecard_id" field. It's identical to AddonRatecardIDEQ.
func AddonRatecardID(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldAddonRatecardID, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldDescription, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldKey, v))
}

// SubscriptionAddonIDEQ applies the EQ predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDNEQ applies the NEQ predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDNEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDIn applies the In predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldSubscriptionAddonID, vs...))
}

// SubscriptionAddonIDNotIn applies the NotIn predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDNotIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldSubscriptionAddonID, vs...))
}

// SubscriptionAddonIDGT applies the GT predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDGT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDGTE applies the GTE predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDGTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDLT applies the LT predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDLT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDLTE applies the LTE predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDLTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDContains applies the Contains predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDContains(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContains(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDHasPrefix applies the HasPrefix predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDHasPrefix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasPrefix(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDHasSuffix applies the HasSuffix predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDHasSuffix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasSuffix(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDEqualFold applies the EqualFold predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDEqualFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldSubscriptionAddonID, v))
}

// SubscriptionAddonIDContainsFold applies the ContainsFold predicate on the "subscription_addon_id" field.
func SubscriptionAddonIDContainsFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldSubscriptionAddonID, v))
}

// AddonRatecardIDEQ applies the EQ predicate on the "addon_ratecard_id" field.
func AddonRatecardIDEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEQ(FieldAddonRatecardID, v))
}

// AddonRatecardIDNEQ applies the NEQ predicate on the "addon_ratecard_id" field.
func AddonRatecardIDNEQ(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNEQ(FieldAddonRatecardID, v))
}

// AddonRatecardIDIn applies the In predicate on the "addon_ratecard_id" field.
func AddonRatecardIDIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldIn(FieldAddonRatecardID, vs...))
}

// AddonRatecardIDNotIn applies the NotIn predicate on the "addon_ratecard_id" field.
func AddonRatecardIDNotIn(vs ...string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldNotIn(FieldAddonRatecardID, vs...))
}

// AddonRatecardIDGT applies the GT predicate on the "addon_ratecard_id" field.
func AddonRatecardIDGT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGT(FieldAddonRatecardID, v))
}

// AddonRatecardIDGTE applies the GTE predicate on the "addon_ratecard_id" field.
func AddonRatecardIDGTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldGTE(FieldAddonRatecardID, v))
}

// AddonRatecardIDLT applies the LT predicate on the "addon_ratecard_id" field.
func AddonRatecardIDLT(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLT(FieldAddonRatecardID, v))
}

// AddonRatecardIDLTE applies the LTE predicate on the "addon_ratecard_id" field.
func AddonRatecardIDLTE(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldLTE(FieldAddonRatecardID, v))
}

// AddonRatecardIDContains applies the Contains predicate on the "addon_ratecard_id" field.
func AddonRatecardIDContains(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContains(FieldAddonRatecardID, v))
}

// AddonRatecardIDHasPrefix applies the HasPrefix predicate on the "addon_ratecard_id" field.
func AddonRatecardIDHasPrefix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasPrefix(FieldAddonRatecardID, v))
}

// AddonRatecardIDHasSuffix applies the HasSuffix predicate on the "addon_ratecard_id" field.
func AddonRatecardIDHasSuffix(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldHasSuffix(FieldAddonRatecardID, v))
}

// AddonRatecardIDEqualFold applies the EqualFold predicate on the "addon_ratecard_id" field.
func AddonRatecardIDEqualFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldEqualFold(FieldAddonRatecardID, v))
}

// AddonRatecardIDContainsFold applies the ContainsFold predicate on the "addon_ratecard_id" field.
func AddonRatecardIDContainsFold(v string) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.FieldContainsFold(FieldAddonRatecardID, v))
}

// HasSubscriptionAddon applies the HasEdge predicate on the "subscription_addon" edge.
func HasSubscriptionAddon() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionAddonTable, SubscriptionAddonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionAddonWith applies the HasEdge predicate on the "subscription_addon" edge with a given conditions (other predicates).
func HasSubscriptionAddonWith(preds ...predicate.SubscriptionAddon) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(func(s *sql.Selector) {
		step := newSubscriptionAddonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.SubscriptionAddonRateCardItemLink) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddonRatecard applies the HasEdge predicate on the "addon_ratecard" edge.
func HasAddonRatecard() predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddonRatecardTable, AddonRatecardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddonRatecardWith applies the HasEdge predicate on the "addon_ratecard" edge with a given conditions (other predicates).
func HasAddonRatecardWith(preds ...predicate.AddonRateCard) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(func(s *sql.Selector) {
		step := newAddonRatecardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionAddonRateCard) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionAddonRateCard) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionAddonRateCard) predicate.SubscriptionAddonRateCard {
	return predicate.SubscriptionAddonRateCard(sql.NotPredicates(p))
}

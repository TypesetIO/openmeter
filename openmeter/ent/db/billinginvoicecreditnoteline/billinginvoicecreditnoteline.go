// Code generated by ent, DO NOT EDIT.

package billinginvoicecreditnoteline

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/billing"
)

const (
	// Label holds the string label denoting the billinginvoicecreditnoteline type in the database.
	Label = "billing_invoice_credit_note_line"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTaxesTotal holds the string denoting the taxes_total field in the database.
	FieldTaxesTotal = "taxes_total"
	// FieldTaxesInclusiveTotal holds the string denoting the taxes_inclusive_total field in the database.
	FieldTaxesInclusiveTotal = "taxes_inclusive_total"
	// FieldTaxesExclusiveTotal holds the string denoting the taxes_exclusive_total field in the database.
	FieldTaxesExclusiveTotal = "taxes_exclusive_total"
	// FieldChargesTotal holds the string denoting the charges_total field in the database.
	FieldChargesTotal = "charges_total"
	// FieldDiscountsTotal holds the string denoting the discounts_total field in the database.
	FieldDiscountsTotal = "discounts_total"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldInvoiceID holds the string denoting the invoice_id field in the database.
	FieldInvoiceID = "invoice_id"
	// FieldManagedBy holds the string denoting the managed_by field in the database.
	FieldManagedBy = "managed_by"
	// FieldPeriodStart holds the string denoting the period_start field in the database.
	FieldPeriodStart = "period_start"
	// FieldPeriodEnd holds the string denoting the period_end field in the database.
	FieldPeriodEnd = "period_end"
	// FieldInvoiceAt holds the string denoting the invoice_at field in the database.
	FieldInvoiceAt = "invoice_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldInvoicingAppExternalID holds the string denoting the invoicing_app_external_id field in the database.
	FieldInvoicingAppExternalID = "invoicing_app_external_id"
	// FieldChildUniqueReferenceID holds the string denoting the child_unique_reference_id field in the database.
	FieldChildUniqueReferenceID = "child_unique_reference_id"
	// FieldParentLineID holds the string denoting the parent_line_id field in the database.
	FieldParentLineID = "parent_line_id"
	// FieldCreditNoteAmount holds the string denoting the credit_note_amount field in the database.
	FieldCreditNoteAmount = "credit_note_amount"
	// FieldTaxConfig holds the string denoting the tax_config field in the database.
	FieldTaxConfig = "tax_config"
	// EdgeBillingInvoice holds the string denoting the billing_invoice edge name in mutations.
	EdgeBillingInvoice = "billing_invoice"
	// EdgeBillingInvoiceLine holds the string denoting the billing_invoice_line edge name in mutations.
	EdgeBillingInvoiceLine = "billing_invoice_line"
	// Table holds the table name of the billinginvoicecreditnoteline in the database.
	Table = "billing_invoice_credit_note_lines"
	// BillingInvoiceTable is the table that holds the billing_invoice relation/edge.
	BillingInvoiceTable = "billing_invoice_credit_note_lines"
	// BillingInvoiceInverseTable is the table name for the BillingInvoice entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoice" package.
	BillingInvoiceInverseTable = "billing_invoices"
	// BillingInvoiceColumn is the table column denoting the billing_invoice relation/edge.
	BillingInvoiceColumn = "invoice_id"
	// BillingInvoiceLineTable is the table that holds the billing_invoice_line relation/edge.
	BillingInvoiceLineTable = "billing_invoice_credit_note_lines"
	// BillingInvoiceLineInverseTable is the table name for the BillingInvoiceLine entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoiceline" package.
	BillingInvoiceLineInverseTable = "billing_invoice_lines"
	// BillingInvoiceLineColumn is the table column denoting the billing_invoice_line relation/edge.
	BillingInvoiceLineColumn = "parent_line_id"
)

// Columns holds all SQL columns for billinginvoicecreditnoteline fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldAmount,
	FieldTaxesTotal,
	FieldTaxesInclusiveTotal,
	FieldTaxesExclusiveTotal,
	FieldChargesTotal,
	FieldDiscountsTotal,
	FieldTotal,
	FieldInvoiceID,
	FieldManagedBy,
	FieldPeriodStart,
	FieldPeriodEnd,
	FieldInvoiceAt,
	FieldStatus,
	FieldCurrency,
	FieldInvoicingAppExternalID,
	FieldChildUniqueReferenceID,
	FieldParentLineID,
	FieldCreditNoteAmount,
	FieldTaxConfig,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// ManagedByValidator is a validator for the "managed_by" field enum values. It is called by the builders before save.
func ManagedByValidator(mb billing.InvoiceLineManagedBy) error {
	switch mb {
	case "subscription", "system", "manual":
		return nil
	default:
		return fmt.Errorf("billinginvoicecreditnoteline: invalid enum value for managed_by field: %q", mb)
	}
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s billing.InvoiceLineStatus) error {
	switch s {
	case "valid", "split", "detailed":
		return nil
	default:
		return fmt.Errorf("billinginvoicecreditnoteline: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the BillingInvoiceCreditNoteLine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByTaxesTotal orders the results by the taxes_total field.
func ByTaxesTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxesTotal, opts...).ToFunc()
}

// ByTaxesInclusiveTotal orders the results by the taxes_inclusive_total field.
func ByTaxesInclusiveTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxesInclusiveTotal, opts...).ToFunc()
}

// ByTaxesExclusiveTotal orders the results by the taxes_exclusive_total field.
func ByTaxesExclusiveTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxesExclusiveTotal, opts...).ToFunc()
}

// ByChargesTotal orders the results by the charges_total field.
func ByChargesTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargesTotal, opts...).ToFunc()
}

// ByDiscountsTotal orders the results by the discounts_total field.
func ByDiscountsTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountsTotal, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByInvoiceID orders the results by the invoice_id field.
func ByInvoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceID, opts...).ToFunc()
}

// ByManagedBy orders the results by the managed_by field.
func ByManagedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagedBy, opts...).ToFunc()
}

// ByPeriodStart orders the results by the period_start field.
func ByPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodStart, opts...).ToFunc()
}

// ByPeriodEnd orders the results by the period_end field.
func ByPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodEnd, opts...).ToFunc()
}

// ByInvoiceAt orders the results by the invoice_at field.
func ByInvoiceAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByInvoicingAppExternalID orders the results by the invoicing_app_external_id field.
func ByInvoicingAppExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoicingAppExternalID, opts...).ToFunc()
}

// ByChildUniqueReferenceID orders the results by the child_unique_reference_id field.
func ByChildUniqueReferenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildUniqueReferenceID, opts...).ToFunc()
}

// ByParentLineID orders the results by the parent_line_id field.
func ByParentLineID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentLineID, opts...).ToFunc()
}

// ByCreditNoteAmount orders the results by the credit_note_amount field.
func ByCreditNoteAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditNoteAmount, opts...).ToFunc()
}

// ByBillingInvoiceField orders the results by billing_invoice field.
func ByBillingInvoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingInvoiceLineField orders the results by billing_invoice_line field.
func ByBillingInvoiceLineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceLineStep(), sql.OrderByField(field, opts...))
	}
}
func newBillingInvoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BillingInvoiceTable, BillingInvoiceColumn),
	)
}
func newBillingInvoiceLineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceLineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BillingInvoiceLineTable, BillingInvoiceLineColumn),
	)
}

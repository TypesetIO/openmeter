// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueaddphase"
)

// SubscriptionPatchValueAddPhase is the model entity for the SubscriptionPatchValueAddPhase schema.
type SubscriptionPatchValueAddPhase struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// SubscriptionPatchID holds the value of the "subscription_patch_id" field.
	SubscriptionPatchID string `json:"subscription_patch_id,omitempty"`
	// PhaseKey holds the value of the "phase_key" field.
	PhaseKey string `json:"phase_key,omitempty"`
	// StartAfterIso holds the value of the "start_after_iso" field.
	StartAfterIso string `json:"start_after_iso,omitempty"`
	// DurationIso holds the value of the "duration_iso" field.
	DurationIso string `json:"duration_iso,omitempty"`
	// CreateDiscount holds the value of the "create_discount" field.
	CreateDiscount bool `json:"create_discount,omitempty"`
	// CreateDiscountAppliesTo holds the value of the "create_discount_applies_to" field.
	CreateDiscountAppliesTo []string `json:"create_discount_applies_to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionPatchValueAddPhaseQuery when eager-loading is set.
	Edges        SubscriptionPatchValueAddPhaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionPatchValueAddPhaseEdges holds the relations/edges for other nodes in the graph.
type SubscriptionPatchValueAddPhaseEdges struct {
	// SubscriptionPatch holds the value of the subscription_patch edge.
	SubscriptionPatch *SubscriptionPatch `json:"subscription_patch,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionPatchOrErr returns the SubscriptionPatch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionPatchValueAddPhaseEdges) SubscriptionPatchOrErr() (*SubscriptionPatch, error) {
	if e.SubscriptionPatch != nil {
		return e.SubscriptionPatch, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscriptionpatch.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_patch"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionPatchValueAddPhase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo:
			values[i] = new([]byte)
		case subscriptionpatchvalueaddphase.FieldCreateDiscount:
			values[i] = new(sql.NullBool)
		case subscriptionpatchvalueaddphase.FieldID, subscriptionpatchvalueaddphase.FieldNamespace, subscriptionpatchvalueaddphase.FieldSubscriptionPatchID, subscriptionpatchvalueaddphase.FieldPhaseKey, subscriptionpatchvalueaddphase.FieldStartAfterIso, subscriptionpatchvalueaddphase.FieldDurationIso:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionPatchValueAddPhase fields.
func (spvap *SubscriptionPatchValueAddPhase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionpatchvalueaddphase.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				spvap.ID = value.String
			}
		case subscriptionpatchvalueaddphase.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				spvap.Namespace = value.String
			}
		case subscriptionpatchvalueaddphase.FieldSubscriptionPatchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_patch_id", values[i])
			} else if value.Valid {
				spvap.SubscriptionPatchID = value.String
			}
		case subscriptionpatchvalueaddphase.FieldPhaseKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phase_key", values[i])
			} else if value.Valid {
				spvap.PhaseKey = value.String
			}
		case subscriptionpatchvalueaddphase.FieldStartAfterIso:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_after_iso", values[i])
			} else if value.Valid {
				spvap.StartAfterIso = value.String
			}
		case subscriptionpatchvalueaddphase.FieldDurationIso:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_iso", values[i])
			} else if value.Valid {
				spvap.DurationIso = value.String
			}
		case subscriptionpatchvalueaddphase.FieldCreateDiscount:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field create_discount", values[i])
			} else if value.Valid {
				spvap.CreateDiscount = value.Bool
			}
		case subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field create_discount_applies_to", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &spvap.CreateDiscountAppliesTo); err != nil {
					return fmt.Errorf("unmarshal field create_discount_applies_to: %w", err)
				}
			}
		default:
			spvap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionPatchValueAddPhase.
// This includes values selected through modifiers, order, etc.
func (spvap *SubscriptionPatchValueAddPhase) Value(name string) (ent.Value, error) {
	return spvap.selectValues.Get(name)
}

// QuerySubscriptionPatch queries the "subscription_patch" edge of the SubscriptionPatchValueAddPhase entity.
func (spvap *SubscriptionPatchValueAddPhase) QuerySubscriptionPatch() *SubscriptionPatchQuery {
	return NewSubscriptionPatchValueAddPhaseClient(spvap.config).QuerySubscriptionPatch(spvap)
}

// Update returns a builder for updating this SubscriptionPatchValueAddPhase.
// Note that you need to call SubscriptionPatchValueAddPhase.Unwrap() before calling this method if this SubscriptionPatchValueAddPhase
// was returned from a transaction, and the transaction was committed or rolled back.
func (spvap *SubscriptionPatchValueAddPhase) Update() *SubscriptionPatchValueAddPhaseUpdateOne {
	return NewSubscriptionPatchValueAddPhaseClient(spvap.config).UpdateOne(spvap)
}

// Unwrap unwraps the SubscriptionPatchValueAddPhase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spvap *SubscriptionPatchValueAddPhase) Unwrap() *SubscriptionPatchValueAddPhase {
	_tx, ok := spvap.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionPatchValueAddPhase is not a transactional entity")
	}
	spvap.config.driver = _tx.drv
	return spvap
}

// String implements the fmt.Stringer.
func (spvap *SubscriptionPatchValueAddPhase) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionPatchValueAddPhase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", spvap.ID))
	builder.WriteString("namespace=")
	builder.WriteString(spvap.Namespace)
	builder.WriteString(", ")
	builder.WriteString("subscription_patch_id=")
	builder.WriteString(spvap.SubscriptionPatchID)
	builder.WriteString(", ")
	builder.WriteString("phase_key=")
	builder.WriteString(spvap.PhaseKey)
	builder.WriteString(", ")
	builder.WriteString("start_after_iso=")
	builder.WriteString(spvap.StartAfterIso)
	builder.WriteString(", ")
	builder.WriteString("duration_iso=")
	builder.WriteString(spvap.DurationIso)
	builder.WriteString(", ")
	builder.WriteString("create_discount=")
	builder.WriteString(fmt.Sprintf("%v", spvap.CreateDiscount))
	builder.WriteString(", ")
	builder.WriteString("create_discount_applies_to=")
	builder.WriteString(fmt.Sprintf("%v", spvap.CreateDiscountAppliesTo))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionPatchValueAddPhases is a parsable slice of SubscriptionPatchValueAddPhase.
type SubscriptionPatchValueAddPhases []*SubscriptionPatchValueAddPhase

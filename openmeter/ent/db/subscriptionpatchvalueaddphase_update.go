// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueaddphase"
)

// SubscriptionPatchValueAddPhaseUpdate is the builder for updating SubscriptionPatchValueAddPhase entities.
type SubscriptionPatchValueAddPhaseUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionPatchValueAddPhaseMutation
}

// Where appends a list predicates to the SubscriptionPatchValueAddPhaseUpdate builder.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) Where(ps ...predicate.SubscriptionPatchValueAddPhase) *SubscriptionPatchValueAddPhaseUpdate {
	spvapu.mutation.Where(ps...)
	return spvapu
}

// Mutation returns the SubscriptionPatchValueAddPhaseMutation object of the builder.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) Mutation() *SubscriptionPatchValueAddPhaseMutation {
	return spvapu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spvapu.sqlSave, spvapu.mutation, spvapu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) SaveX(ctx context.Context) int {
	affected, err := spvapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) Exec(ctx context.Context) error {
	_, err := spvapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) ExecX(ctx context.Context) {
	if err := spvapu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvapu *SubscriptionPatchValueAddPhaseUpdate) check() error {
	if spvapu.mutation.SubscriptionPatchCleared() && len(spvapu.mutation.SubscriptionPatchIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPatchValueAddPhase.subscription_patch"`)
	}
	return nil
}

func (spvapu *SubscriptionPatchValueAddPhaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spvapu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpatchvalueaddphase.Table, subscriptionpatchvalueaddphase.Columns, sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString))
	if ps := spvapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spvapu.mutation.CreateDiscountAppliesToCleared() {
		_spec.ClearField(subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spvapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpatchvalueaddphase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spvapu.mutation.done = true
	return n, nil
}

// SubscriptionPatchValueAddPhaseUpdateOne is the builder for updating a single SubscriptionPatchValueAddPhase entity.
type SubscriptionPatchValueAddPhaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionPatchValueAddPhaseMutation
}

// Mutation returns the SubscriptionPatchValueAddPhaseMutation object of the builder.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) Mutation() *SubscriptionPatchValueAddPhaseMutation {
	return spvapuo.mutation
}

// Where appends a list predicates to the SubscriptionPatchValueAddPhaseUpdate builder.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) Where(ps ...predicate.SubscriptionPatchValueAddPhase) *SubscriptionPatchValueAddPhaseUpdateOne {
	spvapuo.mutation.Where(ps...)
	return spvapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) Select(field string, fields ...string) *SubscriptionPatchValueAddPhaseUpdateOne {
	spvapuo.fields = append([]string{field}, fields...)
	return spvapuo
}

// Save executes the query and returns the updated SubscriptionPatchValueAddPhase entity.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) Save(ctx context.Context) (*SubscriptionPatchValueAddPhase, error) {
	return withHooks(ctx, spvapuo.sqlSave, spvapuo.mutation, spvapuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) SaveX(ctx context.Context) *SubscriptionPatchValueAddPhase {
	node, err := spvapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) Exec(ctx context.Context) error {
	_, err := spvapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) ExecX(ctx context.Context) {
	if err := spvapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) check() error {
	if spvapuo.mutation.SubscriptionPatchCleared() && len(spvapuo.mutation.SubscriptionPatchIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPatchValueAddPhase.subscription_patch"`)
	}
	return nil
}

func (spvapuo *SubscriptionPatchValueAddPhaseUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionPatchValueAddPhase, err error) {
	if err := spvapuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpatchvalueaddphase.Table, subscriptionpatchvalueaddphase.Columns, sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString))
	id, ok := spvapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionPatchValueAddPhase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spvapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionpatchvalueaddphase.FieldID)
		for _, f := range fields {
			if !subscriptionpatchvalueaddphase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionpatchvalueaddphase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spvapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spvapuo.mutation.CreateDiscountAppliesToCleared() {
		_spec.ClearField(subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo, field.TypeJSON)
	}
	_node = &SubscriptionPatchValueAddPhase{config: spvapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spvapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpatchvalueaddphase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spvapuo.mutation.done = true
	return _node, nil
}

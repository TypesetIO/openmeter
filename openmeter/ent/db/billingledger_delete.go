// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingLedgerDelete is the builder for deleting a BillingLedger entity.
type BillingLedgerDelete struct {
	config
	hooks    []Hook
	mutation *BillingLedgerMutation
}

// Where appends a list predicates to the BillingLedgerDelete builder.
func (bld *BillingLedgerDelete) Where(ps ...predicate.BillingLedger) *BillingLedgerDelete {
	bld.mutation.Where(ps...)
	return bld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bld *BillingLedgerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bld.sqlExec, bld.mutation, bld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bld *BillingLedgerDelete) ExecX(ctx context.Context) int {
	n, err := bld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bld *BillingLedgerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billingledger.Table, sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString))
	if ps := bld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bld.mutation.done = true
	return affected, err
}

// BillingLedgerDeleteOne is the builder for deleting a single BillingLedger entity.
type BillingLedgerDeleteOne struct {
	bld *BillingLedgerDelete
}

// Where appends a list predicates to the BillingLedgerDelete builder.
func (bldo *BillingLedgerDeleteOne) Where(ps ...predicate.BillingLedger) *BillingLedgerDeleteOne {
	bldo.bld.mutation.Where(ps...)
	return bldo
}

// Exec executes the deletion query.
func (bldo *BillingLedgerDeleteOne) Exec(ctx context.Context) error {
	n, err := bldo.bld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billingledger.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bldo *BillingLedgerDeleteOne) ExecX(ctx context.Context) {
	if err := bldo.Exec(ctx); err != nil {
		panic(err)
	}
}

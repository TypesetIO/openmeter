// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
)

// BillingSubledgerTransaction is the model entity for the BillingSubledgerTransaction schema.
type BillingSubledgerTransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// SubledgerID holds the value of the "subledger_id" field.
	SubledgerID string `json:"subledger_id,omitempty"`
	// LedgerID holds the value of the "ledger_id" field.
	LedgerID string `json:"ledger_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// OwnerType holds the value of the "owner_type" field.
	OwnerType *string `json:"owner_type,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID *string `json:"owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingSubledgerTransactionQuery when eager-loading is set.
	Edges        BillingSubledgerTransactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingSubledgerTransactionEdges holds the relations/edges for other nodes in the graph.
type BillingSubledgerTransactionEdges struct {
	// Subledger holds the value of the subledger edge.
	Subledger *BillingSubledger `json:"subledger,omitempty"`
	// Ledger holds the value of the ledger edge.
	Ledger *BillingLedger `json:"ledger,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubledgerOrErr returns the Subledger value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingSubledgerTransactionEdges) SubledgerOrErr() (*BillingSubledger, error) {
	if e.Subledger != nil {
		return e.Subledger, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billingsubledger.Label}
	}
	return nil, &NotLoadedError{edge: "subledger"}
}

// LedgerOrErr returns the Ledger value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingSubledgerTransactionEdges) LedgerOrErr() (*BillingLedger, error) {
	if e.Ledger != nil {
		return e.Ledger, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billingledger.Label}
	}
	return nil, &NotLoadedError{edge: "ledger"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingSubledgerTransaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingsubledgertransaction.FieldMetadata:
			values[i] = new([]byte)
		case billingsubledgertransaction.FieldAmount:
			values[i] = new(alpacadecimal.Decimal)
		case billingsubledgertransaction.FieldID, billingsubledgertransaction.FieldNamespace, billingsubledgertransaction.FieldName, billingsubledgertransaction.FieldDescription, billingsubledgertransaction.FieldSubledgerID, billingsubledgertransaction.FieldLedgerID, billingsubledgertransaction.FieldOwnerType, billingsubledgertransaction.FieldOwnerID:
			values[i] = new(sql.NullString)
		case billingsubledgertransaction.FieldCreatedAt, billingsubledgertransaction.FieldUpdatedAt, billingsubledgertransaction.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingSubledgerTransaction fields.
func (bst *BillingSubledgerTransaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingsubledgertransaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bst.ID = value.String
			}
		case billingsubledgertransaction.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bst.Namespace = value.String
			}
		case billingsubledgertransaction.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bst.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billingsubledgertransaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bst.CreatedAt = value.Time
			}
		case billingsubledgertransaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bst.UpdatedAt = value.Time
			}
		case billingsubledgertransaction.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bst.DeletedAt = new(time.Time)
				*bst.DeletedAt = value.Time
			}
		case billingsubledgertransaction.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bst.Name = value.String
			}
		case billingsubledgertransaction.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bst.Description = new(string)
				*bst.Description = value.String
			}
		case billingsubledgertransaction.FieldSubledgerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subledger_id", values[i])
			} else if value.Valid {
				bst.SubledgerID = value.String
			}
		case billingsubledgertransaction.FieldLedgerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ledger_id", values[i])
			} else if value.Valid {
				bst.LedgerID = value.String
			}
		case billingsubledgertransaction.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				bst.Amount = *value
			}
		case billingsubledgertransaction.FieldOwnerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_type", values[i])
			} else if value.Valid {
				bst.OwnerType = new(string)
				*bst.OwnerType = value.String
			}
		case billingsubledgertransaction.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				bst.OwnerID = new(string)
				*bst.OwnerID = value.String
			}
		default:
			bst.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingSubledgerTransaction.
// This includes values selected through modifiers, order, etc.
func (bst *BillingSubledgerTransaction) Value(name string) (ent.Value, error) {
	return bst.selectValues.Get(name)
}

// QuerySubledger queries the "subledger" edge of the BillingSubledgerTransaction entity.
func (bst *BillingSubledgerTransaction) QuerySubledger() *BillingSubledgerQuery {
	return NewBillingSubledgerTransactionClient(bst.config).QuerySubledger(bst)
}

// QueryLedger queries the "ledger" edge of the BillingSubledgerTransaction entity.
func (bst *BillingSubledgerTransaction) QueryLedger() *BillingLedgerQuery {
	return NewBillingSubledgerTransactionClient(bst.config).QueryLedger(bst)
}

// Update returns a builder for updating this BillingSubledgerTransaction.
// Note that you need to call BillingSubledgerTransaction.Unwrap() before calling this method if this BillingSubledgerTransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (bst *BillingSubledgerTransaction) Update() *BillingSubledgerTransactionUpdateOne {
	return NewBillingSubledgerTransactionClient(bst.config).UpdateOne(bst)
}

// Unwrap unwraps the BillingSubledgerTransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bst *BillingSubledgerTransaction) Unwrap() *BillingSubledgerTransaction {
	_tx, ok := bst.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingSubledgerTransaction is not a transactional entity")
	}
	bst.config.driver = _tx.drv
	return bst
}

// String implements the fmt.Stringer.
func (bst *BillingSubledgerTransaction) String() string {
	var builder strings.Builder
	builder.WriteString("BillingSubledgerTransaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bst.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bst.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bst.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bst.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bst.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bst.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bst.Name)
	builder.WriteString(", ")
	if v := bst.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("subledger_id=")
	builder.WriteString(bst.SubledgerID)
	builder.WriteString(", ")
	builder.WriteString("ledger_id=")
	builder.WriteString(bst.LedgerID)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bst.Amount))
	builder.WriteString(", ")
	if v := bst.OwnerType; v != nil {
		builder.WriteString("owner_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bst.OwnerID; v != nil {
		builder.WriteString("owner_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingSubledgerTransactions is a parsable slice of BillingSubledgerTransaction.
type BillingSubledgerTransactions []*BillingSubledgerTransaction

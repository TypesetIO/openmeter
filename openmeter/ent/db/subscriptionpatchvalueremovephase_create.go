// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueremovephase"
)

// SubscriptionPatchValueRemovePhaseCreate is the builder for creating a SubscriptionPatchValueRemovePhase entity.
type SubscriptionPatchValueRemovePhaseCreate struct {
	config
	mutation *SubscriptionPatchValueRemovePhaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetNamespace(s string) *SubscriptionPatchValueRemovePhaseCreate {
	spvrpc.mutation.SetNamespace(s)
	return spvrpc
}

// SetSubscriptionPatchID sets the "subscription_patch_id" field.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetSubscriptionPatchID(s string) *SubscriptionPatchValueRemovePhaseCreate {
	spvrpc.mutation.SetSubscriptionPatchID(s)
	return spvrpc
}

// SetPhaseKey sets the "phase_key" field.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetPhaseKey(s string) *SubscriptionPatchValueRemovePhaseCreate {
	spvrpc.mutation.SetPhaseKey(s)
	return spvrpc
}

// SetShiftBehavior sets the "shift_behavior" field.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetShiftBehavior(i int) *SubscriptionPatchValueRemovePhaseCreate {
	spvrpc.mutation.SetShiftBehavior(i)
	return spvrpc
}

// SetID sets the "id" field.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetID(s string) *SubscriptionPatchValueRemovePhaseCreate {
	spvrpc.mutation.SetID(s)
	return spvrpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetNillableID(s *string) *SubscriptionPatchValueRemovePhaseCreate {
	if s != nil {
		spvrpc.SetID(*s)
	}
	return spvrpc
}

// SetSubscriptionPatch sets the "subscription_patch" edge to the SubscriptionPatch entity.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SetSubscriptionPatch(s *SubscriptionPatch) *SubscriptionPatchValueRemovePhaseCreate {
	return spvrpc.SetSubscriptionPatchID(s.ID)
}

// Mutation returns the SubscriptionPatchValueRemovePhaseMutation object of the builder.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) Mutation() *SubscriptionPatchValueRemovePhaseMutation {
	return spvrpc.mutation
}

// Save creates the SubscriptionPatchValueRemovePhase in the database.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) Save(ctx context.Context) (*SubscriptionPatchValueRemovePhase, error) {
	spvrpc.defaults()
	return withHooks(ctx, spvrpc.sqlSave, spvrpc.mutation, spvrpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) SaveX(ctx context.Context) *SubscriptionPatchValueRemovePhase {
	v, err := spvrpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) Exec(ctx context.Context) error {
	_, err := spvrpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) ExecX(ctx context.Context) {
	if err := spvrpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) defaults() {
	if _, ok := spvrpc.mutation.ID(); !ok {
		v := subscriptionpatchvalueremovephase.DefaultID()
		spvrpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) check() error {
	if _, ok := spvrpc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionPatchValueRemovePhase.namespace"`)}
	}
	if v, ok := spvrpc.mutation.Namespace(); ok {
		if err := subscriptionpatchvalueremovephase.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueRemovePhase.namespace": %w`, err)}
		}
	}
	if _, ok := spvrpc.mutation.SubscriptionPatchID(); !ok {
		return &ValidationError{Name: "subscription_patch_id", err: errors.New(`db: missing required field "SubscriptionPatchValueRemovePhase.subscription_patch_id"`)}
	}
	if v, ok := spvrpc.mutation.SubscriptionPatchID(); ok {
		if err := subscriptionpatchvalueremovephase.SubscriptionPatchIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_patch_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueRemovePhase.subscription_patch_id": %w`, err)}
		}
	}
	if _, ok := spvrpc.mutation.PhaseKey(); !ok {
		return &ValidationError{Name: "phase_key", err: errors.New(`db: missing required field "SubscriptionPatchValueRemovePhase.phase_key"`)}
	}
	if v, ok := spvrpc.mutation.PhaseKey(); ok {
		if err := subscriptionpatchvalueremovephase.PhaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "phase_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueRemovePhase.phase_key": %w`, err)}
		}
	}
	if _, ok := spvrpc.mutation.ShiftBehavior(); !ok {
		return &ValidationError{Name: "shift_behavior", err: errors.New(`db: missing required field "SubscriptionPatchValueRemovePhase.shift_behavior"`)}
	}
	if len(spvrpc.mutation.SubscriptionPatchIDs()) == 0 {
		return &ValidationError{Name: "subscription_patch", err: errors.New(`db: missing required edge "SubscriptionPatchValueRemovePhase.subscription_patch"`)}
	}
	return nil
}

func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) sqlSave(ctx context.Context) (*SubscriptionPatchValueRemovePhase, error) {
	if err := spvrpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spvrpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spvrpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionPatchValueRemovePhase.ID type: %T", _spec.ID.Value)
		}
	}
	spvrpc.mutation.id = &_node.ID
	spvrpc.mutation.done = true
	return _node, nil
}

func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) createSpec() (*SubscriptionPatchValueRemovePhase, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionPatchValueRemovePhase{config: spvrpc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionpatchvalueremovephase.Table, sqlgraph.NewFieldSpec(subscriptionpatchvalueremovephase.FieldID, field.TypeString))
	)
	_spec.OnConflict = spvrpc.conflict
	if id, ok := spvrpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spvrpc.mutation.Namespace(); ok {
		_spec.SetField(subscriptionpatchvalueremovephase.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := spvrpc.mutation.PhaseKey(); ok {
		_spec.SetField(subscriptionpatchvalueremovephase.FieldPhaseKey, field.TypeString, value)
		_node.PhaseKey = value
	}
	if value, ok := spvrpc.mutation.ShiftBehavior(); ok {
		_spec.SetField(subscriptionpatchvalueremovephase.FieldShiftBehavior, field.TypeInt, value)
		_node.ShiftBehavior = value
	}
	if nodes := spvrpc.mutation.SubscriptionPatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionpatchvalueremovephase.SubscriptionPatchTable,
			Columns: []string{subscriptionpatchvalueremovephase.SubscriptionPatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionPatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueRemovePhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueRemovePhaseUpsertOne {
	spvrpc.conflict = opts
	return &SubscriptionPatchValueRemovePhaseUpsertOne{
		create: spvrpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvrpc *SubscriptionPatchValueRemovePhaseCreate) OnConflictColumns(columns ...string) *SubscriptionPatchValueRemovePhaseUpsertOne {
	spvrpc.conflict = append(spvrpc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueRemovePhaseUpsertOne{
		create: spvrpc,
	}
}

type (
	// SubscriptionPatchValueRemovePhaseUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionPatchValueRemovePhase node.
	SubscriptionPatchValueRemovePhaseUpsertOne struct {
		create *SubscriptionPatchValueRemovePhaseCreate
	}

	// SubscriptionPatchValueRemovePhaseUpsert is the "OnConflict" setter.
	SubscriptionPatchValueRemovePhaseUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueremovephase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) UpdateNewValues() *SubscriptionPatchValueRemovePhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionpatchvalueremovephase.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionpatchvalueremovephase.FieldNamespace)
		}
		if _, exists := u.create.mutation.SubscriptionPatchID(); exists {
			s.SetIgnore(subscriptionpatchvalueremovephase.FieldSubscriptionPatchID)
		}
		if _, exists := u.create.mutation.PhaseKey(); exists {
			s.SetIgnore(subscriptionpatchvalueremovephase.FieldPhaseKey)
		}
		if _, exists := u.create.mutation.ShiftBehavior(); exists {
			s.SetIgnore(subscriptionpatchvalueremovephase.FieldShiftBehavior)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) Ignore() *SubscriptionPatchValueRemovePhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) DoNothing() *SubscriptionPatchValueRemovePhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueRemovePhaseCreate.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) Update(set func(*SubscriptionPatchValueRemovePhaseUpsert)) *SubscriptionPatchValueRemovePhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueRemovePhaseUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueRemovePhaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionPatchValueRemovePhaseUpsertOne.ID is not supported by MySQL driver. Use SubscriptionPatchValueRemovePhaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionPatchValueRemovePhaseUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionPatchValueRemovePhaseCreateBulk is the builder for creating many SubscriptionPatchValueRemovePhase entities in bulk.
type SubscriptionPatchValueRemovePhaseCreateBulk struct {
	config
	err      error
	builders []*SubscriptionPatchValueRemovePhaseCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionPatchValueRemovePhase entities in the database.
func (spvrpcb *SubscriptionPatchValueRemovePhaseCreateBulk) Save(ctx context.Context) ([]*SubscriptionPatchValueRemovePhase, error) {
	if spvrpcb.err != nil {
		return nil, spvrpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spvrpcb.builders))
	nodes := make([]*SubscriptionPatchValueRemovePhase, len(spvrpcb.builders))
	mutators := make([]Mutator, len(spvrpcb.builders))
	for i := range spvrpcb.builders {
		func(i int, root context.Context) {
			builder := spvrpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionPatchValueRemovePhaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spvrpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spvrpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spvrpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spvrpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spvrpcb *SubscriptionPatchValueRemovePhaseCreateBulk) SaveX(ctx context.Context) []*SubscriptionPatchValueRemovePhase {
	v, err := spvrpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvrpcb *SubscriptionPatchValueRemovePhaseCreateBulk) Exec(ctx context.Context) error {
	_, err := spvrpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvrpcb *SubscriptionPatchValueRemovePhaseCreateBulk) ExecX(ctx context.Context) {
	if err := spvrpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueRemovePhase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueRemovePhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvrpcb *SubscriptionPatchValueRemovePhaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueRemovePhaseUpsertBulk {
	spvrpcb.conflict = opts
	return &SubscriptionPatchValueRemovePhaseUpsertBulk{
		create: spvrpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvrpcb *SubscriptionPatchValueRemovePhaseCreateBulk) OnConflictColumns(columns ...string) *SubscriptionPatchValueRemovePhaseUpsertBulk {
	spvrpcb.conflict = append(spvrpcb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueRemovePhaseUpsertBulk{
		create: spvrpcb,
	}
}

// SubscriptionPatchValueRemovePhaseUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionPatchValueRemovePhase nodes.
type SubscriptionPatchValueRemovePhaseUpsertBulk struct {
	create *SubscriptionPatchValueRemovePhaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueremovephase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueRemovePhaseUpsertBulk) UpdateNewValues() *SubscriptionPatchValueRemovePhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionpatchvalueremovephase.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionpatchvalueremovephase.FieldNamespace)
			}
			if _, exists := b.mutation.SubscriptionPatchID(); exists {
				s.SetIgnore(subscriptionpatchvalueremovephase.FieldSubscriptionPatchID)
			}
			if _, exists := b.mutation.PhaseKey(); exists {
				s.SetIgnore(subscriptionpatchvalueremovephase.FieldPhaseKey)
			}
			if _, exists := b.mutation.ShiftBehavior(); exists {
				s.SetIgnore(subscriptionpatchvalueremovephase.FieldShiftBehavior)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueRemovePhase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionPatchValueRemovePhaseUpsertBulk) Ignore() *SubscriptionPatchValueRemovePhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueRemovePhaseUpsertBulk) DoNothing() *SubscriptionPatchValueRemovePhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueRemovePhaseCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueRemovePhaseUpsertBulk) Update(set func(*SubscriptionPatchValueRemovePhaseUpsert)) *SubscriptionPatchValueRemovePhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueRemovePhaseUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueRemovePhaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionPatchValueRemovePhaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueRemovePhaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueRemovePhaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

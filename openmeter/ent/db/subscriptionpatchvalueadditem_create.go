// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueadditem"
)

// SubscriptionPatchValueAddItemCreate is the builder for creating a SubscriptionPatchValueAddItem entity.
type SubscriptionPatchValueAddItemCreate struct {
	config
	mutation *SubscriptionPatchValueAddItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNamespace(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetNamespace(s)
	return spvaic
}

// SetSubscriptionPatchID sets the "subscription_patch_id" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetSubscriptionPatchID(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetSubscriptionPatchID(s)
	return spvaic
}

// SetPhaseKey sets the "phase_key" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetPhaseKey(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetPhaseKey(s)
	return spvaic
}

// SetItemKey sets the "item_key" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetItemKey(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetItemKey(s)
	return spvaic
}

// SetFeatureKey sets the "feature_key" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetFeatureKey(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetFeatureKey(s)
	return spvaic
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableFeatureKey(s *string) *SubscriptionPatchValueAddItemCreate {
	if s != nil {
		spvaic.SetFeatureKey(*s)
	}
	return spvaic
}

// SetCreateEntitlementEntitlementType sets the "create_entitlement_entitlement_type" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementEntitlementType(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementEntitlementType(s)
	return spvaic
}

// SetNillableCreateEntitlementEntitlementType sets the "create_entitlement_entitlement_type" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementEntitlementType(s *string) *SubscriptionPatchValueAddItemCreate {
	if s != nil {
		spvaic.SetCreateEntitlementEntitlementType(*s)
	}
	return spvaic
}

// SetCreateEntitlementMeasureUsageFrom sets the "create_entitlement_measure_usage_from" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementMeasureUsageFrom(t time.Time) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementMeasureUsageFrom(t)
	return spvaic
}

// SetNillableCreateEntitlementMeasureUsageFrom sets the "create_entitlement_measure_usage_from" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementMeasureUsageFrom(t *time.Time) *SubscriptionPatchValueAddItemCreate {
	if t != nil {
		spvaic.SetCreateEntitlementMeasureUsageFrom(*t)
	}
	return spvaic
}

// SetCreateEntitlementIssueAfterReset sets the "create_entitlement_issue_after_reset" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementIssueAfterReset(f float64) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementIssueAfterReset(f)
	return spvaic
}

// SetNillableCreateEntitlementIssueAfterReset sets the "create_entitlement_issue_after_reset" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementIssueAfterReset(f *float64) *SubscriptionPatchValueAddItemCreate {
	if f != nil {
		spvaic.SetCreateEntitlementIssueAfterReset(*f)
	}
	return spvaic
}

// SetCreateEntitlementIssueAfterResetPriority sets the "create_entitlement_issue_after_reset_priority" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementIssueAfterResetPriority(u uint8) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementIssueAfterResetPriority(u)
	return spvaic
}

// SetNillableCreateEntitlementIssueAfterResetPriority sets the "create_entitlement_issue_after_reset_priority" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementIssueAfterResetPriority(u *uint8) *SubscriptionPatchValueAddItemCreate {
	if u != nil {
		spvaic.SetCreateEntitlementIssueAfterResetPriority(*u)
	}
	return spvaic
}

// SetCreateEntitlementIsSoftLimit sets the "create_entitlement_is_soft_limit" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementIsSoftLimit(b bool) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementIsSoftLimit(b)
	return spvaic
}

// SetNillableCreateEntitlementIsSoftLimit sets the "create_entitlement_is_soft_limit" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementIsSoftLimit(b *bool) *SubscriptionPatchValueAddItemCreate {
	if b != nil {
		spvaic.SetCreateEntitlementIsSoftLimit(*b)
	}
	return spvaic
}

// SetCreateEntitlementPreserveOverageAtReset sets the "create_entitlement_preserve_overage_at_reset" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementPreserveOverageAtReset(b bool) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementPreserveOverageAtReset(b)
	return spvaic
}

// SetNillableCreateEntitlementPreserveOverageAtReset sets the "create_entitlement_preserve_overage_at_reset" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementPreserveOverageAtReset(b *bool) *SubscriptionPatchValueAddItemCreate {
	if b != nil {
		spvaic.SetCreateEntitlementPreserveOverageAtReset(*b)
	}
	return spvaic
}

// SetCreateEntitlementConfig sets the "create_entitlement_config" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementConfig(u []uint8) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementConfig(u)
	return spvaic
}

// SetCreateEntitlementUsagePeriodInterval sets the "create_entitlement_usage_period_interval" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementUsagePeriodInterval(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementUsagePeriodInterval(s)
	return spvaic
}

// SetNillableCreateEntitlementUsagePeriodInterval sets the "create_entitlement_usage_period_interval" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementUsagePeriodInterval(s *string) *SubscriptionPatchValueAddItemCreate {
	if s != nil {
		spvaic.SetCreateEntitlementUsagePeriodInterval(*s)
	}
	return spvaic
}

// SetCreateEntitlementUsagePeriodAnchor sets the "create_entitlement_usage_period_anchor" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreateEntitlementUsagePeriodAnchor(t time.Time) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreateEntitlementUsagePeriodAnchor(t)
	return spvaic
}

// SetNillableCreateEntitlementUsagePeriodAnchor sets the "create_entitlement_usage_period_anchor" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreateEntitlementUsagePeriodAnchor(t *time.Time) *SubscriptionPatchValueAddItemCreate {
	if t != nil {
		spvaic.SetCreateEntitlementUsagePeriodAnchor(*t)
	}
	return spvaic
}

// SetCreatePriceValue sets the "create_price_value" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetCreatePriceValue(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetCreatePriceValue(s)
	return spvaic
}

// SetNillableCreatePriceValue sets the "create_price_value" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableCreatePriceValue(s *string) *SubscriptionPatchValueAddItemCreate {
	if s != nil {
		spvaic.SetCreatePriceValue(*s)
	}
	return spvaic
}

// SetID sets the "id" field.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetID(s string) *SubscriptionPatchValueAddItemCreate {
	spvaic.mutation.SetID(s)
	return spvaic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetNillableID(s *string) *SubscriptionPatchValueAddItemCreate {
	if s != nil {
		spvaic.SetID(*s)
	}
	return spvaic
}

// SetSubscriptionPatch sets the "subscription_patch" edge to the SubscriptionPatch entity.
func (spvaic *SubscriptionPatchValueAddItemCreate) SetSubscriptionPatch(s *SubscriptionPatch) *SubscriptionPatchValueAddItemCreate {
	return spvaic.SetSubscriptionPatchID(s.ID)
}

// Mutation returns the SubscriptionPatchValueAddItemMutation object of the builder.
func (spvaic *SubscriptionPatchValueAddItemCreate) Mutation() *SubscriptionPatchValueAddItemMutation {
	return spvaic.mutation
}

// Save creates the SubscriptionPatchValueAddItem in the database.
func (spvaic *SubscriptionPatchValueAddItemCreate) Save(ctx context.Context) (*SubscriptionPatchValueAddItem, error) {
	spvaic.defaults()
	return withHooks(ctx, spvaic.sqlSave, spvaic.mutation, spvaic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spvaic *SubscriptionPatchValueAddItemCreate) SaveX(ctx context.Context) *SubscriptionPatchValueAddItem {
	v, err := spvaic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvaic *SubscriptionPatchValueAddItemCreate) Exec(ctx context.Context) error {
	_, err := spvaic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvaic *SubscriptionPatchValueAddItemCreate) ExecX(ctx context.Context) {
	if err := spvaic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spvaic *SubscriptionPatchValueAddItemCreate) defaults() {
	if _, ok := spvaic.mutation.ID(); !ok {
		v := subscriptionpatchvalueadditem.DefaultID()
		spvaic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvaic *SubscriptionPatchValueAddItemCreate) check() error {
	if _, ok := spvaic.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionPatchValueAddItem.namespace"`)}
	}
	if v, ok := spvaic.mutation.Namespace(); ok {
		if err := subscriptionpatchvalueadditem.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddItem.namespace": %w`, err)}
		}
	}
	if _, ok := spvaic.mutation.SubscriptionPatchID(); !ok {
		return &ValidationError{Name: "subscription_patch_id", err: errors.New(`db: missing required field "SubscriptionPatchValueAddItem.subscription_patch_id"`)}
	}
	if v, ok := spvaic.mutation.SubscriptionPatchID(); ok {
		if err := subscriptionpatchvalueadditem.SubscriptionPatchIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_patch_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddItem.subscription_patch_id": %w`, err)}
		}
	}
	if _, ok := spvaic.mutation.PhaseKey(); !ok {
		return &ValidationError{Name: "phase_key", err: errors.New(`db: missing required field "SubscriptionPatchValueAddItem.phase_key"`)}
	}
	if v, ok := spvaic.mutation.PhaseKey(); ok {
		if err := subscriptionpatchvalueadditem.PhaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "phase_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddItem.phase_key": %w`, err)}
		}
	}
	if _, ok := spvaic.mutation.ItemKey(); !ok {
		return &ValidationError{Name: "item_key", err: errors.New(`db: missing required field "SubscriptionPatchValueAddItem.item_key"`)}
	}
	if v, ok := spvaic.mutation.ItemKey(); ok {
		if err := subscriptionpatchvalueadditem.ItemKeyValidator(v); err != nil {
			return &ValidationError{Name: "item_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddItem.item_key": %w`, err)}
		}
	}
	if len(spvaic.mutation.SubscriptionPatchIDs()) == 0 {
		return &ValidationError{Name: "subscription_patch", err: errors.New(`db: missing required edge "SubscriptionPatchValueAddItem.subscription_patch"`)}
	}
	return nil
}

func (spvaic *SubscriptionPatchValueAddItemCreate) sqlSave(ctx context.Context) (*SubscriptionPatchValueAddItem, error) {
	if err := spvaic.check(); err != nil {
		return nil, err
	}
	_node, _spec := spvaic.createSpec()
	if err := sqlgraph.CreateNode(ctx, spvaic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionPatchValueAddItem.ID type: %T", _spec.ID.Value)
		}
	}
	spvaic.mutation.id = &_node.ID
	spvaic.mutation.done = true
	return _node, nil
}

func (spvaic *SubscriptionPatchValueAddItemCreate) createSpec() (*SubscriptionPatchValueAddItem, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionPatchValueAddItem{config: spvaic.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionpatchvalueadditem.Table, sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString))
	)
	_spec.OnConflict = spvaic.conflict
	if id, ok := spvaic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spvaic.mutation.Namespace(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := spvaic.mutation.PhaseKey(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldPhaseKey, field.TypeString, value)
		_node.PhaseKey = value
	}
	if value, ok := spvaic.mutation.ItemKey(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldItemKey, field.TypeString, value)
		_node.ItemKey = value
	}
	if value, ok := spvaic.mutation.FeatureKey(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementEntitlementType(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType, field.TypeString, value)
		_node.CreateEntitlementEntitlementType = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementMeasureUsageFrom(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom, field.TypeTime, value)
		_node.CreateEntitlementMeasureUsageFrom = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementIssueAfterReset(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset, field.TypeFloat64, value)
		_node.CreateEntitlementIssueAfterReset = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementIssueAfterResetPriority(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority, field.TypeUint8, value)
		_node.CreateEntitlementIssueAfterResetPriority = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementIsSoftLimit(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit, field.TypeBool, value)
		_node.CreateEntitlementIsSoftLimit = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementPreserveOverageAtReset(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset, field.TypeBool, value)
		_node.CreateEntitlementPreserveOverageAtReset = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementConfig(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementConfig, field.TypeJSON, value)
		_node.CreateEntitlementConfig = value
	}
	if value, ok := spvaic.mutation.CreateEntitlementUsagePeriodInterval(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval, field.TypeString, value)
		_node.CreateEntitlementUsagePeriodInterval = &value
	}
	if value, ok := spvaic.mutation.CreateEntitlementUsagePeriodAnchor(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor, field.TypeTime, value)
		_node.CreateEntitlementUsagePeriodAnchor = &value
	}
	if value, ok := spvaic.mutation.CreatePriceValue(); ok {
		_spec.SetField(subscriptionpatchvalueadditem.FieldCreatePriceValue, field.TypeString, value)
		_node.CreatePriceValue = &value
	}
	if nodes := spvaic.mutation.SubscriptionPatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionpatchvalueadditem.SubscriptionPatchTable,
			Columns: []string{subscriptionpatchvalueadditem.SubscriptionPatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionPatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueAddItem.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueAddItemUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvaic *SubscriptionPatchValueAddItemCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueAddItemUpsertOne {
	spvaic.conflict = opts
	return &SubscriptionPatchValueAddItemUpsertOne{
		create: spvaic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvaic *SubscriptionPatchValueAddItemCreate) OnConflictColumns(columns ...string) *SubscriptionPatchValueAddItemUpsertOne {
	spvaic.conflict = append(spvaic.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueAddItemUpsertOne{
		create: spvaic,
	}
}

type (
	// SubscriptionPatchValueAddItemUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionPatchValueAddItem node.
	SubscriptionPatchValueAddItemUpsertOne struct {
		create *SubscriptionPatchValueAddItemCreate
	}

	// SubscriptionPatchValueAddItemUpsert is the "OnConflict" setter.
	SubscriptionPatchValueAddItemUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueadditem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueAddItemUpsertOne) UpdateNewValues() *SubscriptionPatchValueAddItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldNamespace)
		}
		if _, exists := u.create.mutation.SubscriptionPatchID(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldSubscriptionPatchID)
		}
		if _, exists := u.create.mutation.PhaseKey(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldPhaseKey)
		}
		if _, exists := u.create.mutation.ItemKey(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldItemKey)
		}
		if _, exists := u.create.mutation.FeatureKey(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldFeatureKey)
		}
		if _, exists := u.create.mutation.CreateEntitlementEntitlementType(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType)
		}
		if _, exists := u.create.mutation.CreateEntitlementMeasureUsageFrom(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom)
		}
		if _, exists := u.create.mutation.CreateEntitlementIssueAfterReset(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset)
		}
		if _, exists := u.create.mutation.CreateEntitlementIssueAfterResetPriority(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority)
		}
		if _, exists := u.create.mutation.CreateEntitlementIsSoftLimit(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit)
		}
		if _, exists := u.create.mutation.CreateEntitlementPreserveOverageAtReset(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset)
		}
		if _, exists := u.create.mutation.CreateEntitlementConfig(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementConfig)
		}
		if _, exists := u.create.mutation.CreateEntitlementUsagePeriodInterval(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval)
		}
		if _, exists := u.create.mutation.CreateEntitlementUsagePeriodAnchor(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor)
		}
		if _, exists := u.create.mutation.CreatePriceValue(); exists {
			s.SetIgnore(subscriptionpatchvalueadditem.FieldCreatePriceValue)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionPatchValueAddItemUpsertOne) Ignore() *SubscriptionPatchValueAddItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueAddItemUpsertOne) DoNothing() *SubscriptionPatchValueAddItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueAddItemCreate.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueAddItemUpsertOne) Update(set func(*SubscriptionPatchValueAddItemUpsert)) *SubscriptionPatchValueAddItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueAddItemUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueAddItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueAddItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueAddItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionPatchValueAddItemUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionPatchValueAddItemUpsertOne.ID is not supported by MySQL driver. Use SubscriptionPatchValueAddItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionPatchValueAddItemUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionPatchValueAddItemCreateBulk is the builder for creating many SubscriptionPatchValueAddItem entities in bulk.
type SubscriptionPatchValueAddItemCreateBulk struct {
	config
	err      error
	builders []*SubscriptionPatchValueAddItemCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionPatchValueAddItem entities in the database.
func (spvaicb *SubscriptionPatchValueAddItemCreateBulk) Save(ctx context.Context) ([]*SubscriptionPatchValueAddItem, error) {
	if spvaicb.err != nil {
		return nil, spvaicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spvaicb.builders))
	nodes := make([]*SubscriptionPatchValueAddItem, len(spvaicb.builders))
	mutators := make([]Mutator, len(spvaicb.builders))
	for i := range spvaicb.builders {
		func(i int, root context.Context) {
			builder := spvaicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionPatchValueAddItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spvaicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spvaicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spvaicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spvaicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spvaicb *SubscriptionPatchValueAddItemCreateBulk) SaveX(ctx context.Context) []*SubscriptionPatchValueAddItem {
	v, err := spvaicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvaicb *SubscriptionPatchValueAddItemCreateBulk) Exec(ctx context.Context) error {
	_, err := spvaicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvaicb *SubscriptionPatchValueAddItemCreateBulk) ExecX(ctx context.Context) {
	if err := spvaicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueAddItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueAddItemUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvaicb *SubscriptionPatchValueAddItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueAddItemUpsertBulk {
	spvaicb.conflict = opts
	return &SubscriptionPatchValueAddItemUpsertBulk{
		create: spvaicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvaicb *SubscriptionPatchValueAddItemCreateBulk) OnConflictColumns(columns ...string) *SubscriptionPatchValueAddItemUpsertBulk {
	spvaicb.conflict = append(spvaicb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueAddItemUpsertBulk{
		create: spvaicb,
	}
}

// SubscriptionPatchValueAddItemUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionPatchValueAddItem nodes.
type SubscriptionPatchValueAddItemUpsertBulk struct {
	create *SubscriptionPatchValueAddItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueadditem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueAddItemUpsertBulk) UpdateNewValues() *SubscriptionPatchValueAddItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldNamespace)
			}
			if _, exists := b.mutation.SubscriptionPatchID(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldSubscriptionPatchID)
			}
			if _, exists := b.mutation.PhaseKey(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldPhaseKey)
			}
			if _, exists := b.mutation.ItemKey(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldItemKey)
			}
			if _, exists := b.mutation.FeatureKey(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldFeatureKey)
			}
			if _, exists := b.mutation.CreateEntitlementEntitlementType(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType)
			}
			if _, exists := b.mutation.CreateEntitlementMeasureUsageFrom(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom)
			}
			if _, exists := b.mutation.CreateEntitlementIssueAfterReset(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset)
			}
			if _, exists := b.mutation.CreateEntitlementIssueAfterResetPriority(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority)
			}
			if _, exists := b.mutation.CreateEntitlementIsSoftLimit(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit)
			}
			if _, exists := b.mutation.CreateEntitlementPreserveOverageAtReset(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset)
			}
			if _, exists := b.mutation.CreateEntitlementConfig(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementConfig)
			}
			if _, exists := b.mutation.CreateEntitlementUsagePeriodInterval(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval)
			}
			if _, exists := b.mutation.CreateEntitlementUsagePeriodAnchor(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor)
			}
			if _, exists := b.mutation.CreatePriceValue(); exists {
				s.SetIgnore(subscriptionpatchvalueadditem.FieldCreatePriceValue)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionPatchValueAddItemUpsertBulk) Ignore() *SubscriptionPatchValueAddItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueAddItemUpsertBulk) DoNothing() *SubscriptionPatchValueAddItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueAddItemCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueAddItemUpsertBulk) Update(set func(*SubscriptionPatchValueAddItemUpsert)) *SubscriptionPatchValueAddItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueAddItemUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueAddItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionPatchValueAddItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueAddItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueAddItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

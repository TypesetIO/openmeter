// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
)

// BillingCustomerOverrideCreate is the builder for creating a BillingCustomerOverride entity.
type BillingCustomerOverrideCreate struct {
	config
	mutation *BillingCustomerOverrideMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bcoc *BillingCustomerOverrideCreate) SetNamespace(s string) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetNamespace(s)
	return bcoc
}

// SetCreatedAt sets the "created_at" field.
func (bcoc *BillingCustomerOverrideCreate) SetCreatedAt(t time.Time) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetCreatedAt(t)
	return bcoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableCreatedAt(t *time.Time) *BillingCustomerOverrideCreate {
	if t != nil {
		bcoc.SetCreatedAt(*t)
	}
	return bcoc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcoc *BillingCustomerOverrideCreate) SetUpdatedAt(t time.Time) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetUpdatedAt(t)
	return bcoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableUpdatedAt(t *time.Time) *BillingCustomerOverrideCreate {
	if t != nil {
		bcoc.SetUpdatedAt(*t)
	}
	return bcoc
}

// SetDeletedAt sets the "deleted_at" field.
func (bcoc *BillingCustomerOverrideCreate) SetDeletedAt(t time.Time) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetDeletedAt(t)
	return bcoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableDeletedAt(t *time.Time) *BillingCustomerOverrideCreate {
	if t != nil {
		bcoc.SetDeletedAt(*t)
	}
	return bcoc
}

// SetCustomerID sets the "customer_id" field.
func (bcoc *BillingCustomerOverrideCreate) SetCustomerID(s string) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetCustomerID(s)
	return bcoc
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (bcoc *BillingCustomerOverrideCreate) SetBillingProfileID(s string) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetBillingProfileID(s)
	return bcoc
}

// SetTaxProvider sets the "tax_provider" field.
func (bcoc *BillingCustomerOverrideCreate) SetTaxProvider(pp provider.TaxProvider) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetTaxProvider(pp)
	return bcoc
}

// SetNillableTaxProvider sets the "tax_provider" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableTaxProvider(pp *provider.TaxProvider) *BillingCustomerOverrideCreate {
	if pp != nil {
		bcoc.SetTaxProvider(*pp)
	}
	return bcoc
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (bcoc *BillingCustomerOverrideCreate) SetTaxProviderConfig(pc *provider.TaxConfiguration) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetTaxProviderConfig(pc)
	return bcoc
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (bcoc *BillingCustomerOverrideCreate) SetInvoicingProvider(pp provider.InvoicingProvider) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetInvoicingProvider(pp)
	return bcoc
}

// SetNillableInvoicingProvider sets the "invoicing_provider" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableInvoicingProvider(pp *provider.InvoicingProvider) *BillingCustomerOverrideCreate {
	if pp != nil {
		bcoc.SetInvoicingProvider(*pp)
	}
	return bcoc
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (bcoc *BillingCustomerOverrideCreate) SetInvoicingProviderConfig(pc *provider.InvoicingConfiguration) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetInvoicingProviderConfig(pc)
	return bcoc
}

// SetPaymentProvider sets the "payment_provider" field.
func (bcoc *BillingCustomerOverrideCreate) SetPaymentProvider(pp provider.PaymentProvider) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetPaymentProvider(pp)
	return bcoc
}

// SetNillablePaymentProvider sets the "payment_provider" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillablePaymentProvider(pp *provider.PaymentProvider) *BillingCustomerOverrideCreate {
	if pp != nil {
		bcoc.SetPaymentProvider(*pp)
	}
	return bcoc
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (bcoc *BillingCustomerOverrideCreate) SetPaymentProviderConfig(pc *provider.PaymentConfiguration) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetPaymentProviderConfig(pc)
	return bcoc
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bcoc *BillingCustomerOverrideCreate) SetWorkflowConfigID(s string) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetWorkflowConfigID(s)
	return bcoc
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableWorkflowConfigID(s *string) *BillingCustomerOverrideCreate {
	if s != nil {
		bcoc.SetWorkflowConfigID(*s)
	}
	return bcoc
}

// SetID sets the "id" field.
func (bcoc *BillingCustomerOverrideCreate) SetID(s string) *BillingCustomerOverrideCreate {
	bcoc.mutation.SetID(s)
	return bcoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bcoc *BillingCustomerOverrideCreate) SetNillableID(s *string) *BillingCustomerOverrideCreate {
	if s != nil {
		bcoc.SetID(*s)
	}
	return bcoc
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (bcoc *BillingCustomerOverrideCreate) Mutation() *BillingCustomerOverrideMutation {
	return bcoc.mutation
}

// Save creates the BillingCustomerOverride in the database.
func (bcoc *BillingCustomerOverrideCreate) Save(ctx context.Context) (*BillingCustomerOverride, error) {
	bcoc.defaults()
	return withHooks(ctx, bcoc.sqlSave, bcoc.mutation, bcoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcoc *BillingCustomerOverrideCreate) SaveX(ctx context.Context) *BillingCustomerOverride {
	v, err := bcoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcoc *BillingCustomerOverrideCreate) Exec(ctx context.Context) error {
	_, err := bcoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcoc *BillingCustomerOverrideCreate) ExecX(ctx context.Context) {
	if err := bcoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcoc *BillingCustomerOverrideCreate) defaults() {
	if _, ok := bcoc.mutation.CreatedAt(); !ok {
		v := billingcustomeroverride.DefaultCreatedAt()
		bcoc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcoc.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.DefaultUpdatedAt()
		bcoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcoc.mutation.ID(); !ok {
		v := billingcustomeroverride.DefaultID()
		bcoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcoc *BillingCustomerOverrideCreate) check() error {
	if _, ok := bcoc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingCustomerOverride.namespace"`)}
	}
	if v, ok := bcoc.mutation.Namespace(); ok {
		if err := billingcustomeroverride.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.namespace": %w`, err)}
		}
	}
	if _, ok := bcoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingCustomerOverride.created_at"`)}
	}
	if _, ok := bcoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingCustomerOverride.updated_at"`)}
	}
	if _, ok := bcoc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "BillingCustomerOverride.customer_id"`)}
	}
	if v, ok := bcoc.mutation.CustomerID(); ok {
		if err := billingcustomeroverride.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.customer_id": %w`, err)}
		}
	}
	if _, ok := bcoc.mutation.BillingProfileID(); !ok {
		return &ValidationError{Name: "billing_profile_id", err: errors.New(`db: missing required field "BillingCustomerOverride.billing_profile_id"`)}
	}
	if v, ok := bcoc.mutation.BillingProfileID(); ok {
		if err := billingcustomeroverride.BillingProfileIDValidator(v); err != nil {
			return &ValidationError{Name: "billing_profile_id", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.billing_profile_id": %w`, err)}
		}
	}
	if v, ok := bcoc.mutation.TaxProvider(); ok {
		if err := billingcustomeroverride.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.tax_provider": %w`, err)}
		}
	}
	if v, ok := bcoc.mutation.TaxProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.tax_provider_config": %w`, err)}
		}
	}
	if v, ok := bcoc.mutation.InvoicingProvider(); ok {
		if err := billingcustomeroverride.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoicing_provider": %w`, err)}
		}
	}
	if v, ok := bcoc.mutation.InvoicingProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoicing_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoicing_provider_config": %w`, err)}
		}
	}
	if v, ok := bcoc.mutation.PaymentProvider(); ok {
		if err := billingcustomeroverride.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.payment_provider": %w`, err)}
		}
	}
	if v, ok := bcoc.mutation.PaymentProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "payment_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.payment_provider_config": %w`, err)}
		}
	}
	return nil
}

func (bcoc *BillingCustomerOverrideCreate) sqlSave(ctx context.Context) (*BillingCustomerOverride, error) {
	if err := bcoc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := bcoc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, bcoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingCustomerOverride.ID type: %T", _spec.ID.Value)
		}
	}
	bcoc.mutation.id = &_node.ID
	bcoc.mutation.done = true
	return _node, nil
}

func (bcoc *BillingCustomerOverrideCreate) createSpec() (*BillingCustomerOverride, *sqlgraph.CreateSpec, error) {
	var (
		_node = &BillingCustomerOverride{config: bcoc.config}
		_spec = sqlgraph.NewCreateSpec(billingcustomeroverride.Table, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	)
	_spec.OnConflict = bcoc.conflict
	if id, ok := bcoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bcoc.mutation.Namespace(); ok {
		_spec.SetField(billingcustomeroverride.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bcoc.mutation.CreatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcoc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bcoc.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bcoc.mutation.CustomerID(); ok {
		_spec.SetField(billingcustomeroverride.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := bcoc.mutation.BillingProfileID(); ok {
		_spec.SetField(billingcustomeroverride.FieldBillingProfileID, field.TypeString, value)
		_node.BillingProfileID = value
	}
	if value, ok := bcoc.mutation.TaxProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldTaxProvider, field.TypeEnum, value)
		_node.TaxProvider = &value
	}
	if value, ok := bcoc.mutation.TaxProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.TaxProviderConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billingcustomeroverride.FieldTaxProviderConfig, field.TypeString, vv)
		_node.TaxProviderConfig = value
	}
	if value, ok := bcoc.mutation.InvoicingProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoicingProvider, field.TypeEnum, value)
		_node.InvoicingProvider = &value
	}
	if value, ok := bcoc.mutation.InvoicingProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.InvoicingProviderConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billingcustomeroverride.FieldInvoicingProviderConfig, field.TypeString, vv)
		_node.InvoicingProviderConfig = value
	}
	if value, ok := bcoc.mutation.PaymentProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldPaymentProvider, field.TypeEnum, value)
		_node.PaymentProvider = &value
	}
	if value, ok := bcoc.mutation.PaymentProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.PaymentProviderConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billingcustomeroverride.FieldPaymentProviderConfig, field.TypeString, vv)
		_node.PaymentProviderConfig = value
	}
	if value, ok := bcoc.mutation.WorkflowConfigID(); ok {
		_spec.SetField(billingcustomeroverride.FieldWorkflowConfigID, field.TypeString, value)
		_node.WorkflowConfigID = &value
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingCustomerOverride.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingCustomerOverrideUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bcoc *BillingCustomerOverrideCreate) OnConflict(opts ...sql.ConflictOption) *BillingCustomerOverrideUpsertOne {
	bcoc.conflict = opts
	return &BillingCustomerOverrideUpsertOne{
		create: bcoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcoc *BillingCustomerOverrideCreate) OnConflictColumns(columns ...string) *BillingCustomerOverrideUpsertOne {
	bcoc.conflict = append(bcoc.conflict, sql.ConflictColumns(columns...))
	return &BillingCustomerOverrideUpsertOne{
		create: bcoc,
	}
}

type (
	// BillingCustomerOverrideUpsertOne is the builder for "upsert"-ing
	//  one BillingCustomerOverride node.
	BillingCustomerOverrideUpsertOne struct {
		create *BillingCustomerOverrideCreate
	}

	// BillingCustomerOverrideUpsert is the "OnConflict" setter.
	BillingCustomerOverrideUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingCustomerOverrideUpsert) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateUpdatedAt() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingCustomerOverrideUpsert) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateDeletedAt() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingCustomerOverrideUpsert) ClearDeletedAt() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldDeletedAt)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *BillingCustomerOverrideUpsert) SetCustomerID(v string) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateCustomerID() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldCustomerID)
	return u
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsert) SetBillingProfileID(v string) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldBillingProfileID, v)
	return u
}

// UpdateBillingProfileID sets the "billing_profile_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateBillingProfileID() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldBillingProfileID)
	return u
}

// SetTaxProvider sets the "tax_provider" field.
func (u *BillingCustomerOverrideUpsert) SetTaxProvider(v provider.TaxProvider) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldTaxProvider, v)
	return u
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateTaxProvider() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldTaxProvider)
	return u
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (u *BillingCustomerOverrideUpsert) ClearTaxProvider() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldTaxProvider)
	return u
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (u *BillingCustomerOverrideUpsert) SetTaxProviderConfig(v *provider.TaxConfiguration) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldTaxProviderConfig, v)
	return u
}

// UpdateTaxProviderConfig sets the "tax_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateTaxProviderConfig() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldTaxProviderConfig)
	return u
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (u *BillingCustomerOverrideUpsert) ClearTaxProviderConfig() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldTaxProviderConfig)
	return u
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *BillingCustomerOverrideUpsert) SetInvoicingProvider(v provider.InvoicingProvider) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoicingProvider, v)
	return u
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoicingProvider() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoicingProvider)
	return u
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoicingProvider() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoicingProvider)
	return u
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (u *BillingCustomerOverrideUpsert) SetInvoicingProviderConfig(v *provider.InvoicingConfiguration) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoicingProviderConfig, v)
	return u
}

// UpdateInvoicingProviderConfig sets the "invoicing_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoicingProviderConfig() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoicingProviderConfig)
	return u
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoicingProviderConfig() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoicingProviderConfig)
	return u
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *BillingCustomerOverrideUpsert) SetPaymentProvider(v provider.PaymentProvider) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldPaymentProvider, v)
	return u
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdatePaymentProvider() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldPaymentProvider)
	return u
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (u *BillingCustomerOverrideUpsert) ClearPaymentProvider() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldPaymentProvider)
	return u
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (u *BillingCustomerOverrideUpsert) SetPaymentProviderConfig(v *provider.PaymentConfiguration) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldPaymentProviderConfig, v)
	return u
}

// UpdatePaymentProviderConfig sets the "payment_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdatePaymentProviderConfig() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldPaymentProviderConfig)
	return u
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (u *BillingCustomerOverrideUpsert) ClearPaymentProviderConfig() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldPaymentProviderConfig)
	return u
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingCustomerOverrideUpsert) SetWorkflowConfigID(v string) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldWorkflowConfigID, v)
	return u
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateWorkflowConfigID() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldWorkflowConfigID)
	return u
}

// ClearWorkflowConfigID clears the value of the "workflow_config_id" field.
func (u *BillingCustomerOverrideUpsert) ClearWorkflowConfigID() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldWorkflowConfigID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingcustomeroverride.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingCustomerOverrideUpsertOne) UpdateNewValues() *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingcustomeroverride.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingcustomeroverride.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingcustomeroverride.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingCustomerOverrideUpsertOne) Ignore() *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingCustomerOverrideUpsertOne) DoNothing() *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingCustomerOverrideCreate.OnConflict
// documentation for more info.
func (u *BillingCustomerOverrideUpsertOne) Update(set func(*BillingCustomerOverrideUpsert)) *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingCustomerOverrideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingCustomerOverrideUpsertOne) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateUpdatedAt() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertOne) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateDeletedAt() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertOne) ClearDeletedAt() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *BillingCustomerOverrideUpsertOne) SetCustomerID(v string) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateCustomerID() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateCustomerID()
	})
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsertOne) SetBillingProfileID(v string) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetBillingProfileID(v)
	})
}

// UpdateBillingProfileID sets the "billing_profile_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateBillingProfileID() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateBillingProfileID()
	})
}

// SetTaxProvider sets the "tax_provider" field.
func (u *BillingCustomerOverrideUpsertOne) SetTaxProvider(v provider.TaxProvider) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetTaxProvider(v)
	})
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateTaxProvider() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateTaxProvider()
	})
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (u *BillingCustomerOverrideUpsertOne) ClearTaxProvider() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearTaxProvider()
	})
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (u *BillingCustomerOverrideUpsertOne) SetTaxProviderConfig(v *provider.TaxConfiguration) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetTaxProviderConfig(v)
	})
}

// UpdateTaxProviderConfig sets the "tax_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateTaxProviderConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateTaxProviderConfig()
	})
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (u *BillingCustomerOverrideUpsertOne) ClearTaxProviderConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearTaxProviderConfig()
	})
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoicingProvider(v provider.InvoicingProvider) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoicingProvider(v)
	})
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoicingProvider() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoicingProvider()
	})
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoicingProvider() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoicingProvider()
	})
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoicingProviderConfig(v *provider.InvoicingConfiguration) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoicingProviderConfig(v)
	})
}

// UpdateInvoicingProviderConfig sets the "invoicing_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoicingProviderConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoicingProviderConfig()
	})
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoicingProviderConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoicingProviderConfig()
	})
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *BillingCustomerOverrideUpsertOne) SetPaymentProvider(v provider.PaymentProvider) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetPaymentProvider(v)
	})
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdatePaymentProvider() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdatePaymentProvider()
	})
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (u *BillingCustomerOverrideUpsertOne) ClearPaymentProvider() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearPaymentProvider()
	})
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (u *BillingCustomerOverrideUpsertOne) SetPaymentProviderConfig(v *provider.PaymentConfiguration) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetPaymentProviderConfig(v)
	})
}

// UpdatePaymentProviderConfig sets the "payment_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdatePaymentProviderConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdatePaymentProviderConfig()
	})
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (u *BillingCustomerOverrideUpsertOne) ClearPaymentProviderConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearPaymentProviderConfig()
	})
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingCustomerOverrideUpsertOne) SetWorkflowConfigID(v string) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetWorkflowConfigID(v)
	})
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateWorkflowConfigID() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateWorkflowConfigID()
	})
}

// ClearWorkflowConfigID clears the value of the "workflow_config_id" field.
func (u *BillingCustomerOverrideUpsertOne) ClearWorkflowConfigID() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearWorkflowConfigID()
	})
}

// Exec executes the query.
func (u *BillingCustomerOverrideUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingCustomerOverrideCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingCustomerOverrideUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingCustomerOverrideUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingCustomerOverrideUpsertOne.ID is not supported by MySQL driver. Use BillingCustomerOverrideUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingCustomerOverrideUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingCustomerOverrideCreateBulk is the builder for creating many BillingCustomerOverride entities in bulk.
type BillingCustomerOverrideCreateBulk struct {
	config
	err      error
	builders []*BillingCustomerOverrideCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingCustomerOverride entities in the database.
func (bcocb *BillingCustomerOverrideCreateBulk) Save(ctx context.Context) ([]*BillingCustomerOverride, error) {
	if bcocb.err != nil {
		return nil, bcocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcocb.builders))
	nodes := make([]*BillingCustomerOverride, len(bcocb.builders))
	mutators := make([]Mutator, len(bcocb.builders))
	for i := range bcocb.builders {
		func(i int, root context.Context) {
			builder := bcocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingCustomerOverrideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcocb *BillingCustomerOverrideCreateBulk) SaveX(ctx context.Context) []*BillingCustomerOverride {
	v, err := bcocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcocb *BillingCustomerOverrideCreateBulk) Exec(ctx context.Context) error {
	_, err := bcocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcocb *BillingCustomerOverrideCreateBulk) ExecX(ctx context.Context) {
	if err := bcocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingCustomerOverride.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingCustomerOverrideUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bcocb *BillingCustomerOverrideCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingCustomerOverrideUpsertBulk {
	bcocb.conflict = opts
	return &BillingCustomerOverrideUpsertBulk{
		create: bcocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcocb *BillingCustomerOverrideCreateBulk) OnConflictColumns(columns ...string) *BillingCustomerOverrideUpsertBulk {
	bcocb.conflict = append(bcocb.conflict, sql.ConflictColumns(columns...))
	return &BillingCustomerOverrideUpsertBulk{
		create: bcocb,
	}
}

// BillingCustomerOverrideUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingCustomerOverride nodes.
type BillingCustomerOverrideUpsertBulk struct {
	create *BillingCustomerOverrideCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingcustomeroverride.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingCustomerOverrideUpsertBulk) UpdateNewValues() *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingcustomeroverride.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingcustomeroverride.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingcustomeroverride.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingCustomerOverrideUpsertBulk) Ignore() *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingCustomerOverrideUpsertBulk) DoNothing() *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingCustomerOverrideCreateBulk.OnConflict
// documentation for more info.
func (u *BillingCustomerOverrideUpsertBulk) Update(set func(*BillingCustomerOverrideUpsert)) *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingCustomerOverrideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingCustomerOverrideUpsertBulk) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateUpdatedAt() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertBulk) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateDeletedAt() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearDeletedAt() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *BillingCustomerOverrideUpsertBulk) SetCustomerID(v string) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateCustomerID() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateCustomerID()
	})
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsertBulk) SetBillingProfileID(v string) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetBillingProfileID(v)
	})
}

// UpdateBillingProfileID sets the "billing_profile_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateBillingProfileID() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateBillingProfileID()
	})
}

// SetTaxProvider sets the "tax_provider" field.
func (u *BillingCustomerOverrideUpsertBulk) SetTaxProvider(v provider.TaxProvider) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetTaxProvider(v)
	})
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateTaxProvider() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateTaxProvider()
	})
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearTaxProvider() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearTaxProvider()
	})
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (u *BillingCustomerOverrideUpsertBulk) SetTaxProviderConfig(v *provider.TaxConfiguration) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetTaxProviderConfig(v)
	})
}

// UpdateTaxProviderConfig sets the "tax_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateTaxProviderConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateTaxProviderConfig()
	})
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearTaxProviderConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearTaxProviderConfig()
	})
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoicingProvider(v provider.InvoicingProvider) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoicingProvider(v)
	})
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoicingProvider() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoicingProvider()
	})
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoicingProvider() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoicingProvider()
	})
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoicingProviderConfig(v *provider.InvoicingConfiguration) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoicingProviderConfig(v)
	})
}

// UpdateInvoicingProviderConfig sets the "invoicing_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoicingProviderConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoicingProviderConfig()
	})
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoicingProviderConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoicingProviderConfig()
	})
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *BillingCustomerOverrideUpsertBulk) SetPaymentProvider(v provider.PaymentProvider) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetPaymentProvider(v)
	})
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdatePaymentProvider() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdatePaymentProvider()
	})
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearPaymentProvider() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearPaymentProvider()
	})
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (u *BillingCustomerOverrideUpsertBulk) SetPaymentProviderConfig(v *provider.PaymentConfiguration) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetPaymentProviderConfig(v)
	})
}

// UpdatePaymentProviderConfig sets the "payment_provider_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdatePaymentProviderConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdatePaymentProviderConfig()
	})
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearPaymentProviderConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearPaymentProviderConfig()
	})
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingCustomerOverrideUpsertBulk) SetWorkflowConfigID(v string) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetWorkflowConfigID(v)
	})
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateWorkflowConfigID() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateWorkflowConfigID()
	})
}

// ClearWorkflowConfigID clears the value of the "workflow_config_id" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearWorkflowConfigID() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearWorkflowConfigID()
	})
}

// Exec executes the query.
func (u *BillingCustomerOverrideUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingCustomerOverrideCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingCustomerOverrideCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingCustomerOverrideUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package price

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDeletedAt, v))
}

// ActiveFrom applies equality check predicate on the "active_from" field. It's identical to ActiveFromEQ.
func ActiveFrom(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldActiveFrom, v))
}

// ActiveTo applies equality check predicate on the "active_to" field. It's identical to ActiveToEQ.
func ActiveTo(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldActiveTo, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldKey, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldSubscriptionID, v))
}

// PhaseKey applies equality check predicate on the "phase_key" field. It's identical to PhaseKeyEQ.
func PhaseKey(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPhaseKey, v))
}

// ItemKey applies equality check predicate on the "item_key" field. It's identical to ItemKeyEQ.
func ItemKey(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldItemKey, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldDeletedAt))
}

// ActiveFromEQ applies the EQ predicate on the "active_from" field.
func ActiveFromEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldActiveFrom, v))
}

// ActiveFromNEQ applies the NEQ predicate on the "active_from" field.
func ActiveFromNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldActiveFrom, v))
}

// ActiveFromIn applies the In predicate on the "active_from" field.
func ActiveFromIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldActiveFrom, vs...))
}

// ActiveFromNotIn applies the NotIn predicate on the "active_from" field.
func ActiveFromNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldActiveFrom, vs...))
}

// ActiveFromGT applies the GT predicate on the "active_from" field.
func ActiveFromGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldActiveFrom, v))
}

// ActiveFromGTE applies the GTE predicate on the "active_from" field.
func ActiveFromGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldActiveFrom, v))
}

// ActiveFromLT applies the LT predicate on the "active_from" field.
func ActiveFromLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldActiveFrom, v))
}

// ActiveFromLTE applies the LTE predicate on the "active_from" field.
func ActiveFromLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldActiveFrom, v))
}

// ActiveToEQ applies the EQ predicate on the "active_to" field.
func ActiveToEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldActiveTo, v))
}

// ActiveToNEQ applies the NEQ predicate on the "active_to" field.
func ActiveToNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldActiveTo, v))
}

// ActiveToIn applies the In predicate on the "active_to" field.
func ActiveToIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldActiveTo, vs...))
}

// ActiveToNotIn applies the NotIn predicate on the "active_to" field.
func ActiveToNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldActiveTo, vs...))
}

// ActiveToGT applies the GT predicate on the "active_to" field.
func ActiveToGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldActiveTo, v))
}

// ActiveToGTE applies the GTE predicate on the "active_to" field.
func ActiveToGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldActiveTo, v))
}

// ActiveToLT applies the LT predicate on the "active_to" field.
func ActiveToLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldActiveTo, v))
}

// ActiveToLTE applies the LTE predicate on the "active_to" field.
func ActiveToLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldActiveTo, v))
}

// ActiveToIsNil applies the IsNil predicate on the "active_to" field.
func ActiveToIsNil() predicate.Price {
	return predicate.Price(sql.FieldIsNull(FieldActiveTo))
}

// ActiveToNotNil applies the NotNil predicate on the "active_to" field.
func ActiveToNotNil() predicate.Price {
	return predicate.Price(sql.FieldNotNull(FieldActiveTo))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldKey, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// PhaseKeyEQ applies the EQ predicate on the "phase_key" field.
func PhaseKeyEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPhaseKey, v))
}

// PhaseKeyNEQ applies the NEQ predicate on the "phase_key" field.
func PhaseKeyNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldPhaseKey, v))
}

// PhaseKeyIn applies the In predicate on the "phase_key" field.
func PhaseKeyIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldPhaseKey, vs...))
}

// PhaseKeyNotIn applies the NotIn predicate on the "phase_key" field.
func PhaseKeyNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldPhaseKey, vs...))
}

// PhaseKeyGT applies the GT predicate on the "phase_key" field.
func PhaseKeyGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldPhaseKey, v))
}

// PhaseKeyGTE applies the GTE predicate on the "phase_key" field.
func PhaseKeyGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldPhaseKey, v))
}

// PhaseKeyLT applies the LT predicate on the "phase_key" field.
func PhaseKeyLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldPhaseKey, v))
}

// PhaseKeyLTE applies the LTE predicate on the "phase_key" field.
func PhaseKeyLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldPhaseKey, v))
}

// PhaseKeyContains applies the Contains predicate on the "phase_key" field.
func PhaseKeyContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldPhaseKey, v))
}

// PhaseKeyHasPrefix applies the HasPrefix predicate on the "phase_key" field.
func PhaseKeyHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldPhaseKey, v))
}

// PhaseKeyHasSuffix applies the HasSuffix predicate on the "phase_key" field.
func PhaseKeyHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldPhaseKey, v))
}

// PhaseKeyEqualFold applies the EqualFold predicate on the "phase_key" field.
func PhaseKeyEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldPhaseKey, v))
}

// PhaseKeyContainsFold applies the ContainsFold predicate on the "phase_key" field.
func PhaseKeyContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldPhaseKey, v))
}

// ItemKeyEQ applies the EQ predicate on the "item_key" field.
func ItemKeyEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldItemKey, v))
}

// ItemKeyNEQ applies the NEQ predicate on the "item_key" field.
func ItemKeyNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldItemKey, v))
}

// ItemKeyIn applies the In predicate on the "item_key" field.
func ItemKeyIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldItemKey, vs...))
}

// ItemKeyNotIn applies the NotIn predicate on the "item_key" field.
func ItemKeyNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldItemKey, vs...))
}

// ItemKeyGT applies the GT predicate on the "item_key" field.
func ItemKeyGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldItemKey, v))
}

// ItemKeyGTE applies the GTE predicate on the "item_key" field.
func ItemKeyGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldItemKey, v))
}

// ItemKeyLT applies the LT predicate on the "item_key" field.
func ItemKeyLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldItemKey, v))
}

// ItemKeyLTE applies the LTE predicate on the "item_key" field.
func ItemKeyLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldItemKey, v))
}

// ItemKeyContains applies the Contains predicate on the "item_key" field.
func ItemKeyContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldItemKey, v))
}

// ItemKeyHasPrefix applies the HasPrefix predicate on the "item_key" field.
func ItemKeyHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldItemKey, v))
}

// ItemKeyHasSuffix applies the HasSuffix predicate on the "item_key" field.
func ItemKeyHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldItemKey, v))
}

// ItemKeyEqualFold applies the EqualFold predicate on the "item_key" field.
func ItemKeyEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldItemKey, v))
}

// ItemKeyContainsFold applies the ContainsFold predicate on the "item_key" field.
func ItemKeyContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldItemKey, v))
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(sql.NotPredicates(p))
}

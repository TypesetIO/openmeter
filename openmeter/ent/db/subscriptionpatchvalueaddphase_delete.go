// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueaddphase"
)

// SubscriptionPatchValueAddPhaseDelete is the builder for deleting a SubscriptionPatchValueAddPhase entity.
type SubscriptionPatchValueAddPhaseDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionPatchValueAddPhaseMutation
}

// Where appends a list predicates to the SubscriptionPatchValueAddPhaseDelete builder.
func (spvapd *SubscriptionPatchValueAddPhaseDelete) Where(ps ...predicate.SubscriptionPatchValueAddPhase) *SubscriptionPatchValueAddPhaseDelete {
	spvapd.mutation.Where(ps...)
	return spvapd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (spvapd *SubscriptionPatchValueAddPhaseDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, spvapd.sqlExec, spvapd.mutation, spvapd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (spvapd *SubscriptionPatchValueAddPhaseDelete) ExecX(ctx context.Context) int {
	n, err := spvapd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (spvapd *SubscriptionPatchValueAddPhaseDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionpatchvalueaddphase.Table, sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString))
	if ps := spvapd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, spvapd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	spvapd.mutation.done = true
	return affected, err
}

// SubscriptionPatchValueAddPhaseDeleteOne is the builder for deleting a single SubscriptionPatchValueAddPhase entity.
type SubscriptionPatchValueAddPhaseDeleteOne struct {
	spvapd *SubscriptionPatchValueAddPhaseDelete
}

// Where appends a list predicates to the SubscriptionPatchValueAddPhaseDelete builder.
func (spvapdo *SubscriptionPatchValueAddPhaseDeleteOne) Where(ps ...predicate.SubscriptionPatchValueAddPhase) *SubscriptionPatchValueAddPhaseDeleteOne {
	spvapdo.spvapd.mutation.Where(ps...)
	return spvapdo
}

// Exec executes the deletion query.
func (spvapdo *SubscriptionPatchValueAddPhaseDeleteOne) Exec(ctx context.Context) error {
	n, err := spvapdo.spvapd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionpatchvalueaddphase.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (spvapdo *SubscriptionPatchValueAddPhaseDeleteOne) ExecX(ctx context.Context) {
	if err := spvapdo.Exec(ctx); err != nil {
		panic(err)
	}
}

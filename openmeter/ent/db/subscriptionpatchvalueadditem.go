// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueadditem"
)

// SubscriptionPatchValueAddItem is the model entity for the SubscriptionPatchValueAddItem schema.
type SubscriptionPatchValueAddItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// SubscriptionPatchID holds the value of the "subscription_patch_id" field.
	SubscriptionPatchID string `json:"subscription_patch_id,omitempty"`
	// PhaseKey holds the value of the "phase_key" field.
	PhaseKey string `json:"phase_key,omitempty"`
	// ItemKey holds the value of the "item_key" field.
	ItemKey string `json:"item_key,omitempty"`
	// FeatureKey holds the value of the "feature_key" field.
	FeatureKey *string `json:"feature_key,omitempty"`
	// CreateEntitlementEntitlementType holds the value of the "create_entitlement_entitlement_type" field.
	CreateEntitlementEntitlementType *string `json:"create_entitlement_entitlement_type,omitempty"`
	// CreateEntitlementMeasureUsageFrom holds the value of the "create_entitlement_measure_usage_from" field.
	CreateEntitlementMeasureUsageFrom *time.Time `json:"create_entitlement_measure_usage_from,omitempty"`
	// CreateEntitlementIssueAfterReset holds the value of the "create_entitlement_issue_after_reset" field.
	CreateEntitlementIssueAfterReset *float64 `json:"create_entitlement_issue_after_reset,omitempty"`
	// CreateEntitlementIssueAfterResetPriority holds the value of the "create_entitlement_issue_after_reset_priority" field.
	CreateEntitlementIssueAfterResetPriority *uint8 `json:"create_entitlement_issue_after_reset_priority,omitempty"`
	// CreateEntitlementIsSoftLimit holds the value of the "create_entitlement_is_soft_limit" field.
	CreateEntitlementIsSoftLimit *bool `json:"create_entitlement_is_soft_limit,omitempty"`
	// CreateEntitlementPreserveOverageAtReset holds the value of the "create_entitlement_preserve_overage_at_reset" field.
	CreateEntitlementPreserveOverageAtReset *bool `json:"create_entitlement_preserve_overage_at_reset,omitempty"`
	// CreateEntitlementConfig holds the value of the "create_entitlement_config" field.
	CreateEntitlementConfig []uint8 `json:"create_entitlement_config,omitempty"`
	// CreateEntitlementUsagePeriodInterval holds the value of the "create_entitlement_usage_period_interval" field.
	CreateEntitlementUsagePeriodInterval *string `json:"create_entitlement_usage_period_interval,omitempty"`
	// CreateEntitlementUsagePeriodAnchor holds the value of the "create_entitlement_usage_period_anchor" field.
	CreateEntitlementUsagePeriodAnchor *time.Time `json:"create_entitlement_usage_period_anchor,omitempty"`
	// CreatePriceValue holds the value of the "create_price_value" field.
	CreatePriceValue *string `json:"create_price_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionPatchValueAddItemQuery when eager-loading is set.
	Edges        SubscriptionPatchValueAddItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionPatchValueAddItemEdges holds the relations/edges for other nodes in the graph.
type SubscriptionPatchValueAddItemEdges struct {
	// SubscriptionPatch holds the value of the subscription_patch edge.
	SubscriptionPatch *SubscriptionPatch `json:"subscription_patch,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionPatchOrErr returns the SubscriptionPatch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionPatchValueAddItemEdges) SubscriptionPatchOrErr() (*SubscriptionPatch, error) {
	if e.SubscriptionPatch != nil {
		return e.SubscriptionPatch, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscriptionpatch.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_patch"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionPatchValueAddItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionpatchvalueadditem.FieldCreateEntitlementConfig:
			values[i] = new([]byte)
		case subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit, subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset:
			values[i] = new(sql.NullBool)
		case subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset:
			values[i] = new(sql.NullFloat64)
		case subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority:
			values[i] = new(sql.NullInt64)
		case subscriptionpatchvalueadditem.FieldID, subscriptionpatchvalueadditem.FieldNamespace, subscriptionpatchvalueadditem.FieldSubscriptionPatchID, subscriptionpatchvalueadditem.FieldPhaseKey, subscriptionpatchvalueadditem.FieldItemKey, subscriptionpatchvalueadditem.FieldFeatureKey, subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType, subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval, subscriptionpatchvalueadditem.FieldCreatePriceValue:
			values[i] = new(sql.NullString)
		case subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom, subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionPatchValueAddItem fields.
func (spvai *SubscriptionPatchValueAddItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionpatchvalueadditem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				spvai.ID = value.String
			}
		case subscriptionpatchvalueadditem.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				spvai.Namespace = value.String
			}
		case subscriptionpatchvalueadditem.FieldSubscriptionPatchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_patch_id", values[i])
			} else if value.Valid {
				spvai.SubscriptionPatchID = value.String
			}
		case subscriptionpatchvalueadditem.FieldPhaseKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phase_key", values[i])
			} else if value.Valid {
				spvai.PhaseKey = value.String
			}
		case subscriptionpatchvalueadditem.FieldItemKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_key", values[i])
			} else if value.Valid {
				spvai.ItemKey = value.String
			}
		case subscriptionpatchvalueadditem.FieldFeatureKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_key", values[i])
			} else if value.Valid {
				spvai.FeatureKey = new(string)
				*spvai.FeatureKey = value.String
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_entitlement_type", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementEntitlementType = new(string)
				*spvai.CreateEntitlementEntitlementType = value.String
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_measure_usage_from", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementMeasureUsageFrom = new(time.Time)
				*spvai.CreateEntitlementMeasureUsageFrom = value.Time
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_issue_after_reset", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementIssueAfterReset = new(float64)
				*spvai.CreateEntitlementIssueAfterReset = value.Float64
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_issue_after_reset_priority", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementIssueAfterResetPriority = new(uint8)
				*spvai.CreateEntitlementIssueAfterResetPriority = uint8(value.Int64)
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_is_soft_limit", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementIsSoftLimit = new(bool)
				*spvai.CreateEntitlementIsSoftLimit = value.Bool
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_preserve_overage_at_reset", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementPreserveOverageAtReset = new(bool)
				*spvai.CreateEntitlementPreserveOverageAtReset = value.Bool
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &spvai.CreateEntitlementConfig); err != nil {
					return fmt.Errorf("unmarshal field create_entitlement_config: %w", err)
				}
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_usage_period_interval", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementUsagePeriodInterval = new(string)
				*spvai.CreateEntitlementUsagePeriodInterval = value.String
			}
		case subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_entitlement_usage_period_anchor", values[i])
			} else if value.Valid {
				spvai.CreateEntitlementUsagePeriodAnchor = new(time.Time)
				*spvai.CreateEntitlementUsagePeriodAnchor = value.Time
			}
		case subscriptionpatchvalueadditem.FieldCreatePriceValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_price_value", values[i])
			} else if value.Valid {
				spvai.CreatePriceValue = new(string)
				*spvai.CreatePriceValue = value.String
			}
		default:
			spvai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionPatchValueAddItem.
// This includes values selected through modifiers, order, etc.
func (spvai *SubscriptionPatchValueAddItem) Value(name string) (ent.Value, error) {
	return spvai.selectValues.Get(name)
}

// QuerySubscriptionPatch queries the "subscription_patch" edge of the SubscriptionPatchValueAddItem entity.
func (spvai *SubscriptionPatchValueAddItem) QuerySubscriptionPatch() *SubscriptionPatchQuery {
	return NewSubscriptionPatchValueAddItemClient(spvai.config).QuerySubscriptionPatch(spvai)
}

// Update returns a builder for updating this SubscriptionPatchValueAddItem.
// Note that you need to call SubscriptionPatchValueAddItem.Unwrap() before calling this method if this SubscriptionPatchValueAddItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (spvai *SubscriptionPatchValueAddItem) Update() *SubscriptionPatchValueAddItemUpdateOne {
	return NewSubscriptionPatchValueAddItemClient(spvai.config).UpdateOne(spvai)
}

// Unwrap unwraps the SubscriptionPatchValueAddItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spvai *SubscriptionPatchValueAddItem) Unwrap() *SubscriptionPatchValueAddItem {
	_tx, ok := spvai.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionPatchValueAddItem is not a transactional entity")
	}
	spvai.config.driver = _tx.drv
	return spvai
}

// String implements the fmt.Stringer.
func (spvai *SubscriptionPatchValueAddItem) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionPatchValueAddItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", spvai.ID))
	builder.WriteString("namespace=")
	builder.WriteString(spvai.Namespace)
	builder.WriteString(", ")
	builder.WriteString("subscription_patch_id=")
	builder.WriteString(spvai.SubscriptionPatchID)
	builder.WriteString(", ")
	builder.WriteString("phase_key=")
	builder.WriteString(spvai.PhaseKey)
	builder.WriteString(", ")
	builder.WriteString("item_key=")
	builder.WriteString(spvai.ItemKey)
	builder.WriteString(", ")
	if v := spvai.FeatureKey; v != nil {
		builder.WriteString("feature_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementEntitlementType; v != nil {
		builder.WriteString("create_entitlement_entitlement_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementMeasureUsageFrom; v != nil {
		builder.WriteString("create_entitlement_measure_usage_from=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementIssueAfterReset; v != nil {
		builder.WriteString("create_entitlement_issue_after_reset=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementIssueAfterResetPriority; v != nil {
		builder.WriteString("create_entitlement_issue_after_reset_priority=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementIsSoftLimit; v != nil {
		builder.WriteString("create_entitlement_is_soft_limit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementPreserveOverageAtReset; v != nil {
		builder.WriteString("create_entitlement_preserve_overage_at_reset=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("create_entitlement_config=")
	builder.WriteString(fmt.Sprintf("%v", spvai.CreateEntitlementConfig))
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementUsagePeriodInterval; v != nil {
		builder.WriteString("create_entitlement_usage_period_interval=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := spvai.CreateEntitlementUsagePeriodAnchor; v != nil {
		builder.WriteString("create_entitlement_usage_period_anchor=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := spvai.CreatePriceValue; v != nil {
		builder.WriteString("create_price_value=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionPatchValueAddItems is a parsable slice of SubscriptionPatchValueAddItem.
type SubscriptionPatchValueAddItems []*SubscriptionPatchValueAddItem

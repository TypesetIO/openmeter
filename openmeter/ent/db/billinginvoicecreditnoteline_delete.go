// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicecreditnoteline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceCreditNoteLineDelete is the builder for deleting a BillingInvoiceCreditNoteLine entity.
type BillingInvoiceCreditNoteLineDelete struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceCreditNoteLineMutation
}

// Where appends a list predicates to the BillingInvoiceCreditNoteLineDelete builder.
func (bicnld *BillingInvoiceCreditNoteLineDelete) Where(ps ...predicate.BillingInvoiceCreditNoteLine) *BillingInvoiceCreditNoteLineDelete {
	bicnld.mutation.Where(ps...)
	return bicnld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bicnld *BillingInvoiceCreditNoteLineDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bicnld.sqlExec, bicnld.mutation, bicnld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bicnld *BillingInvoiceCreditNoteLineDelete) ExecX(ctx context.Context) int {
	n, err := bicnld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bicnld *BillingInvoiceCreditNoteLineDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billinginvoicecreditnoteline.Table, sqlgraph.NewFieldSpec(billinginvoicecreditnoteline.FieldID, field.TypeString))
	if ps := bicnld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bicnld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bicnld.mutation.done = true
	return affected, err
}

// BillingInvoiceCreditNoteLineDeleteOne is the builder for deleting a single BillingInvoiceCreditNoteLine entity.
type BillingInvoiceCreditNoteLineDeleteOne struct {
	bicnld *BillingInvoiceCreditNoteLineDelete
}

// Where appends a list predicates to the BillingInvoiceCreditNoteLineDelete builder.
func (bicnldo *BillingInvoiceCreditNoteLineDeleteOne) Where(ps ...predicate.BillingInvoiceCreditNoteLine) *BillingInvoiceCreditNoteLineDeleteOne {
	bicnldo.bicnld.mutation.Where(ps...)
	return bicnldo
}

// Exec executes the deletion query.
func (bicnldo *BillingInvoiceCreditNoteLineDeleteOne) Exec(ctx context.Context) error {
	n, err := bicnldo.bicnld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billinginvoicecreditnoteline.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bicnldo *BillingInvoiceCreditNoteLineDeleteOne) ExecX(ctx context.Context) {
	if err := bicnldo.Exec(ctx); err != nil {
		panic(err)
	}
}

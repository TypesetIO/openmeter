// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/price"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PriceUpdate) SetUpdatedAt(t time.Time) *PriceUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PriceUpdate) SetDeletedAt(t time.Time) *PriceUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableDeletedAt(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PriceUpdate) ClearDeletedAt() *PriceUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetActiveTo sets the "active_to" field.
func (pu *PriceUpdate) SetActiveTo(t time.Time) *PriceUpdate {
	pu.mutation.SetActiveTo(t)
	return pu
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableActiveTo(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetActiveTo(*t)
	}
	return pu
}

// ClearActiveTo clears the value of the "active_to" field.
func (pu *PriceUpdate) ClearActiveTo() *PriceUpdate {
	pu.mutation.ClearActiveTo()
	return pu
}

// Mutation returns the PriceMutation object of the builder.
func (pu *PriceUpdate) Mutation() *PriceMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PriceUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := price.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PriceUpdate) check() error {
	if pu.mutation.SubscriptionCleared() && len(pu.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Price.subscription"`)
	}
	return nil
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(price.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(price.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(price.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.ActiveTo(); ok {
		_spec.SetField(price.FieldActiveTo, field.TypeTime, value)
	}
	if pu.mutation.ActiveToCleared() {
		_spec.ClearField(price.FieldActiveTo, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PriceUpdateOne) SetUpdatedAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PriceUpdateOne) SetDeletedAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableDeletedAt(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PriceUpdateOne) ClearDeletedAt() *PriceUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetActiveTo sets the "active_to" field.
func (puo *PriceUpdateOne) SetActiveTo(t time.Time) *PriceUpdateOne {
	puo.mutation.SetActiveTo(t)
	return puo
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableActiveTo(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetActiveTo(*t)
	}
	return puo
}

// ClearActiveTo clears the value of the "active_to" field.
func (puo *PriceUpdateOne) ClearActiveTo() *PriceUpdateOne {
	puo.mutation.ClearActiveTo()
	return puo
}

// Mutation returns the PriceMutation object of the builder.
func (puo *PriceUpdateOne) Mutation() *PriceMutation {
	return puo.mutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (puo *PriceUpdateOne) Where(ps ...predicate.Price) *PriceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PriceUpdateOne) Select(field string, fields ...string) *PriceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Price entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PriceUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := price.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PriceUpdateOne) check() error {
	if puo.mutation.SubscriptionCleared() && len(puo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Price.subscription"`)
	}
	return nil
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (_node *Price, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Price.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, price.FieldID)
		for _, f := range fields {
			if !price.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != price.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(price.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(price.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(price.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.ActiveTo(); ok {
		_spec.SetField(price.FieldActiveTo, field.TypeTime, value)
	}
	if puo.mutation.ActiveToCleared() {
		_spec.ClearField(price.FieldActiveTo, field.TypeTime)
	}
	_node = &Price{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingProfileUpdate is the builder for updating BillingProfile entities.
type BillingProfileUpdate struct {
	config
	hooks    []Hook
	mutation *BillingProfileMutation
}

// Where appends a list predicates to the BillingProfileUpdate builder.
func (bpu *BillingProfileUpdate) Where(ps ...predicate.BillingProfile) *BillingProfileUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetMetadata sets the "metadata" field.
func (bpu *BillingProfileUpdate) SetMetadata(m map[string]string) *BillingProfileUpdate {
	bpu.mutation.SetMetadata(m)
	return bpu
}

// ClearMetadata clears the value of the "metadata" field.
func (bpu *BillingProfileUpdate) ClearMetadata() *BillingProfileUpdate {
	bpu.mutation.ClearMetadata()
	return bpu
}

// SetUpdatedAt sets the "updated_at" field.
func (bpu *BillingProfileUpdate) SetUpdatedAt(t time.Time) *BillingProfileUpdate {
	bpu.mutation.SetUpdatedAt(t)
	return bpu
}

// SetDeletedAt sets the "deleted_at" field.
func (bpu *BillingProfileUpdate) SetDeletedAt(t time.Time) *BillingProfileUpdate {
	bpu.mutation.SetDeletedAt(t)
	return bpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableDeletedAt(t *time.Time) *BillingProfileUpdate {
	if t != nil {
		bpu.SetDeletedAt(*t)
	}
	return bpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bpu *BillingProfileUpdate) ClearDeletedAt() *BillingProfileUpdate {
	bpu.mutation.ClearDeletedAt()
	return bpu
}

// SetTaxProvider sets the "tax_provider" field.
func (bpu *BillingProfileUpdate) SetTaxProvider(pp provider.TaxProvider) *BillingProfileUpdate {
	bpu.mutation.SetTaxProvider(pp)
	return bpu
}

// SetNillableTaxProvider sets the "tax_provider" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableTaxProvider(pp *provider.TaxProvider) *BillingProfileUpdate {
	if pp != nil {
		bpu.SetTaxProvider(*pp)
	}
	return bpu
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (bpu *BillingProfileUpdate) ClearTaxProvider() *BillingProfileUpdate {
	bpu.mutation.ClearTaxProvider()
	return bpu
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (bpu *BillingProfileUpdate) SetTaxProviderConfig(pc provider.TaxConfiguration) *BillingProfileUpdate {
	bpu.mutation.SetTaxProviderConfig(pc)
	return bpu
}

// SetNillableTaxProviderConfig sets the "tax_provider_config" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableTaxProviderConfig(pc *provider.TaxConfiguration) *BillingProfileUpdate {
	if pc != nil {
		bpu.SetTaxProviderConfig(*pc)
	}
	return bpu
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (bpu *BillingProfileUpdate) ClearTaxProviderConfig() *BillingProfileUpdate {
	bpu.mutation.ClearTaxProviderConfig()
	return bpu
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (bpu *BillingProfileUpdate) SetInvoicingProvider(pp provider.InvoicingProvider) *BillingProfileUpdate {
	bpu.mutation.SetInvoicingProvider(pp)
	return bpu
}

// SetNillableInvoicingProvider sets the "invoicing_provider" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableInvoicingProvider(pp *provider.InvoicingProvider) *BillingProfileUpdate {
	if pp != nil {
		bpu.SetInvoicingProvider(*pp)
	}
	return bpu
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (bpu *BillingProfileUpdate) ClearInvoicingProvider() *BillingProfileUpdate {
	bpu.mutation.ClearInvoicingProvider()
	return bpu
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (bpu *BillingProfileUpdate) SetInvoicingProviderConfig(pc provider.InvoicingConfiguration) *BillingProfileUpdate {
	bpu.mutation.SetInvoicingProviderConfig(pc)
	return bpu
}

// SetNillableInvoicingProviderConfig sets the "invoicing_provider_config" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableInvoicingProviderConfig(pc *provider.InvoicingConfiguration) *BillingProfileUpdate {
	if pc != nil {
		bpu.SetInvoicingProviderConfig(*pc)
	}
	return bpu
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (bpu *BillingProfileUpdate) ClearInvoicingProviderConfig() *BillingProfileUpdate {
	bpu.mutation.ClearInvoicingProviderConfig()
	return bpu
}

// SetPaymentProvider sets the "payment_provider" field.
func (bpu *BillingProfileUpdate) SetPaymentProvider(pp provider.PaymentProvider) *BillingProfileUpdate {
	bpu.mutation.SetPaymentProvider(pp)
	return bpu
}

// SetNillablePaymentProvider sets the "payment_provider" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillablePaymentProvider(pp *provider.PaymentProvider) *BillingProfileUpdate {
	if pp != nil {
		bpu.SetPaymentProvider(*pp)
	}
	return bpu
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (bpu *BillingProfileUpdate) ClearPaymentProvider() *BillingProfileUpdate {
	bpu.mutation.ClearPaymentProvider()
	return bpu
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (bpu *BillingProfileUpdate) SetPaymentProviderConfig(pc provider.PaymentConfiguration) *BillingProfileUpdate {
	bpu.mutation.SetPaymentProviderConfig(pc)
	return bpu
}

// SetNillablePaymentProviderConfig sets the "payment_provider_config" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillablePaymentProviderConfig(pc *provider.PaymentConfiguration) *BillingProfileUpdate {
	if pc != nil {
		bpu.SetPaymentProviderConfig(*pc)
	}
	return bpu
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (bpu *BillingProfileUpdate) ClearPaymentProviderConfig() *BillingProfileUpdate {
	bpu.mutation.ClearPaymentProviderConfig()
	return bpu
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bpu *BillingProfileUpdate) SetWorkflowConfigID(s string) *BillingProfileUpdate {
	bpu.mutation.SetWorkflowConfigID(s)
	return bpu
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableWorkflowConfigID(s *string) *BillingProfileUpdate {
	if s != nil {
		bpu.SetWorkflowConfigID(*s)
	}
	return bpu
}

// SetDefault sets the "default" field.
func (bpu *BillingProfileUpdate) SetDefault(b bool) *BillingProfileUpdate {
	bpu.mutation.SetDefault(b)
	return bpu
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (bpu *BillingProfileUpdate) SetNillableDefault(b *bool) *BillingProfileUpdate {
	if b != nil {
		bpu.SetDefault(*b)
	}
	return bpu
}

// AddBillingInvoiceIDs adds the "billing_invoices" edge to the BillingInvoice entity by IDs.
func (bpu *BillingProfileUpdate) AddBillingInvoiceIDs(ids ...string) *BillingProfileUpdate {
	bpu.mutation.AddBillingInvoiceIDs(ids...)
	return bpu
}

// AddBillingInvoices adds the "billing_invoices" edges to the BillingInvoice entity.
func (bpu *BillingProfileUpdate) AddBillingInvoices(b ...*BillingInvoice) *BillingProfileUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.AddBillingInvoiceIDs(ids...)
}

// SetWorkflowConfig sets the "workflow_config" edge to the BillingWorkflowConfig entity.
func (bpu *BillingProfileUpdate) SetWorkflowConfig(b *BillingWorkflowConfig) *BillingProfileUpdate {
	return bpu.SetWorkflowConfigID(b.ID)
}

// Mutation returns the BillingProfileMutation object of the builder.
func (bpu *BillingProfileUpdate) Mutation() *BillingProfileMutation {
	return bpu.mutation
}

// ClearBillingInvoices clears all "billing_invoices" edges to the BillingInvoice entity.
func (bpu *BillingProfileUpdate) ClearBillingInvoices() *BillingProfileUpdate {
	bpu.mutation.ClearBillingInvoices()
	return bpu
}

// RemoveBillingInvoiceIDs removes the "billing_invoices" edge to BillingInvoice entities by IDs.
func (bpu *BillingProfileUpdate) RemoveBillingInvoiceIDs(ids ...string) *BillingProfileUpdate {
	bpu.mutation.RemoveBillingInvoiceIDs(ids...)
	return bpu
}

// RemoveBillingInvoices removes "billing_invoices" edges to BillingInvoice entities.
func (bpu *BillingProfileUpdate) RemoveBillingInvoices(b ...*BillingInvoice) *BillingProfileUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.RemoveBillingInvoiceIDs(ids...)
}

// ClearWorkflowConfig clears the "workflow_config" edge to the BillingWorkflowConfig entity.
func (bpu *BillingProfileUpdate) ClearWorkflowConfig() *BillingProfileUpdate {
	bpu.mutation.ClearWorkflowConfig()
	return bpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BillingProfileUpdate) Save(ctx context.Context) (int, error) {
	bpu.defaults()
	return withHooks(ctx, bpu.sqlSave, bpu.mutation, bpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BillingProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BillingProfileUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BillingProfileUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpu *BillingProfileUpdate) defaults() {
	if _, ok := bpu.mutation.UpdatedAt(); !ok {
		v := billingprofile.UpdateDefaultUpdatedAt()
		bpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpu *BillingProfileUpdate) check() error {
	if v, ok := bpu.mutation.TaxProvider(); ok {
		if err := billingprofile.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.tax_provider": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.TaxProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingProfile.tax_provider_config": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.InvoicingProvider(); ok {
		if err := billingprofile.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.invoicing_provider": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.InvoicingProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoicing_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingProfile.invoicing_provider_config": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.PaymentProvider(); ok {
		if err := billingprofile.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.payment_provider": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.PaymentProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "payment_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingProfile.payment_provider_config": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.WorkflowConfigID(); ok {
		if err := billingprofile.WorkflowConfigIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_config_id", err: fmt.Errorf(`db: validator failed for field "BillingProfile.workflow_config_id": %w`, err)}
		}
	}
	if bpu.mutation.WorkflowConfigCleared() && len(bpu.mutation.WorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.workflow_config"`)
	}
	return nil
}

func (bpu *BillingProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingprofile.Table, billingprofile.Columns, sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString))
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.Metadata(); ok {
		_spec.SetField(billingprofile.FieldMetadata, field.TypeJSON, value)
	}
	if bpu.mutation.MetadataCleared() {
		_spec.ClearField(billingprofile.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bpu.mutation.UpdatedAt(); ok {
		_spec.SetField(billingprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bpu.mutation.DeletedAt(); ok {
		_spec.SetField(billingprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if bpu.mutation.DeletedAtCleared() {
		_spec.ClearField(billingprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bpu.mutation.TaxProvider(); ok {
		_spec.SetField(billingprofile.FieldTaxProvider, field.TypeEnum, value)
	}
	if bpu.mutation.TaxProviderCleared() {
		_spec.ClearField(billingprofile.FieldTaxProvider, field.TypeEnum)
	}
	if value, ok := bpu.mutation.TaxProviderConfig(); ok {
		vv, err := billingprofile.ValueScanner.TaxProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billingprofile.FieldTaxProviderConfig, field.TypeString, vv)
	}
	if bpu.mutation.TaxProviderConfigCleared() {
		_spec.ClearField(billingprofile.FieldTaxProviderConfig, field.TypeString)
	}
	if value, ok := bpu.mutation.InvoicingProvider(); ok {
		_spec.SetField(billingprofile.FieldInvoicingProvider, field.TypeEnum, value)
	}
	if bpu.mutation.InvoicingProviderCleared() {
		_spec.ClearField(billingprofile.FieldInvoicingProvider, field.TypeEnum)
	}
	if value, ok := bpu.mutation.InvoicingProviderConfig(); ok {
		vv, err := billingprofile.ValueScanner.InvoicingProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billingprofile.FieldInvoicingProviderConfig, field.TypeString, vv)
	}
	if bpu.mutation.InvoicingProviderConfigCleared() {
		_spec.ClearField(billingprofile.FieldInvoicingProviderConfig, field.TypeString)
	}
	if value, ok := bpu.mutation.PaymentProvider(); ok {
		_spec.SetField(billingprofile.FieldPaymentProvider, field.TypeEnum, value)
	}
	if bpu.mutation.PaymentProviderCleared() {
		_spec.ClearField(billingprofile.FieldPaymentProvider, field.TypeEnum)
	}
	if value, ok := bpu.mutation.PaymentProviderConfig(); ok {
		vv, err := billingprofile.ValueScanner.PaymentProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billingprofile.FieldPaymentProviderConfig, field.TypeString, vv)
	}
	if bpu.mutation.PaymentProviderConfigCleared() {
		_spec.ClearField(billingprofile.FieldPaymentProviderConfig, field.TypeString)
	}
	if value, ok := bpu.mutation.Default(); ok {
		_spec.SetField(billingprofile.FieldDefault, field.TypeBool, value)
	}
	if bpu.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedBillingInvoicesIDs(); len(nodes) > 0 && !bpu.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.BillingInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.WorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.WorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bpu.mutation.done = true
	return n, nil
}

// BillingProfileUpdateOne is the builder for updating a single BillingProfile entity.
type BillingProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingProfileMutation
}

// SetMetadata sets the "metadata" field.
func (bpuo *BillingProfileUpdateOne) SetMetadata(m map[string]string) *BillingProfileUpdateOne {
	bpuo.mutation.SetMetadata(m)
	return bpuo
}

// ClearMetadata clears the value of the "metadata" field.
func (bpuo *BillingProfileUpdateOne) ClearMetadata() *BillingProfileUpdateOne {
	bpuo.mutation.ClearMetadata()
	return bpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bpuo *BillingProfileUpdateOne) SetUpdatedAt(t time.Time) *BillingProfileUpdateOne {
	bpuo.mutation.SetUpdatedAt(t)
	return bpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bpuo *BillingProfileUpdateOne) SetDeletedAt(t time.Time) *BillingProfileUpdateOne {
	bpuo.mutation.SetDeletedAt(t)
	return bpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingProfileUpdateOne {
	if t != nil {
		bpuo.SetDeletedAt(*t)
	}
	return bpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bpuo *BillingProfileUpdateOne) ClearDeletedAt() *BillingProfileUpdateOne {
	bpuo.mutation.ClearDeletedAt()
	return bpuo
}

// SetTaxProvider sets the "tax_provider" field.
func (bpuo *BillingProfileUpdateOne) SetTaxProvider(pp provider.TaxProvider) *BillingProfileUpdateOne {
	bpuo.mutation.SetTaxProvider(pp)
	return bpuo
}

// SetNillableTaxProvider sets the "tax_provider" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableTaxProvider(pp *provider.TaxProvider) *BillingProfileUpdateOne {
	if pp != nil {
		bpuo.SetTaxProvider(*pp)
	}
	return bpuo
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (bpuo *BillingProfileUpdateOne) ClearTaxProvider() *BillingProfileUpdateOne {
	bpuo.mutation.ClearTaxProvider()
	return bpuo
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (bpuo *BillingProfileUpdateOne) SetTaxProviderConfig(pc provider.TaxConfiguration) *BillingProfileUpdateOne {
	bpuo.mutation.SetTaxProviderConfig(pc)
	return bpuo
}

// SetNillableTaxProviderConfig sets the "tax_provider_config" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableTaxProviderConfig(pc *provider.TaxConfiguration) *BillingProfileUpdateOne {
	if pc != nil {
		bpuo.SetTaxProviderConfig(*pc)
	}
	return bpuo
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (bpuo *BillingProfileUpdateOne) ClearTaxProviderConfig() *BillingProfileUpdateOne {
	bpuo.mutation.ClearTaxProviderConfig()
	return bpuo
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (bpuo *BillingProfileUpdateOne) SetInvoicingProvider(pp provider.InvoicingProvider) *BillingProfileUpdateOne {
	bpuo.mutation.SetInvoicingProvider(pp)
	return bpuo
}

// SetNillableInvoicingProvider sets the "invoicing_provider" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableInvoicingProvider(pp *provider.InvoicingProvider) *BillingProfileUpdateOne {
	if pp != nil {
		bpuo.SetInvoicingProvider(*pp)
	}
	return bpuo
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (bpuo *BillingProfileUpdateOne) ClearInvoicingProvider() *BillingProfileUpdateOne {
	bpuo.mutation.ClearInvoicingProvider()
	return bpuo
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (bpuo *BillingProfileUpdateOne) SetInvoicingProviderConfig(pc provider.InvoicingConfiguration) *BillingProfileUpdateOne {
	bpuo.mutation.SetInvoicingProviderConfig(pc)
	return bpuo
}

// SetNillableInvoicingProviderConfig sets the "invoicing_provider_config" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableInvoicingProviderConfig(pc *provider.InvoicingConfiguration) *BillingProfileUpdateOne {
	if pc != nil {
		bpuo.SetInvoicingProviderConfig(*pc)
	}
	return bpuo
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (bpuo *BillingProfileUpdateOne) ClearInvoicingProviderConfig() *BillingProfileUpdateOne {
	bpuo.mutation.ClearInvoicingProviderConfig()
	return bpuo
}

// SetPaymentProvider sets the "payment_provider" field.
func (bpuo *BillingProfileUpdateOne) SetPaymentProvider(pp provider.PaymentProvider) *BillingProfileUpdateOne {
	bpuo.mutation.SetPaymentProvider(pp)
	return bpuo
}

// SetNillablePaymentProvider sets the "payment_provider" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillablePaymentProvider(pp *provider.PaymentProvider) *BillingProfileUpdateOne {
	if pp != nil {
		bpuo.SetPaymentProvider(*pp)
	}
	return bpuo
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (bpuo *BillingProfileUpdateOne) ClearPaymentProvider() *BillingProfileUpdateOne {
	bpuo.mutation.ClearPaymentProvider()
	return bpuo
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (bpuo *BillingProfileUpdateOne) SetPaymentProviderConfig(pc provider.PaymentConfiguration) *BillingProfileUpdateOne {
	bpuo.mutation.SetPaymentProviderConfig(pc)
	return bpuo
}

// SetNillablePaymentProviderConfig sets the "payment_provider_config" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillablePaymentProviderConfig(pc *provider.PaymentConfiguration) *BillingProfileUpdateOne {
	if pc != nil {
		bpuo.SetPaymentProviderConfig(*pc)
	}
	return bpuo
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (bpuo *BillingProfileUpdateOne) ClearPaymentProviderConfig() *BillingProfileUpdateOne {
	bpuo.mutation.ClearPaymentProviderConfig()
	return bpuo
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bpuo *BillingProfileUpdateOne) SetWorkflowConfigID(s string) *BillingProfileUpdateOne {
	bpuo.mutation.SetWorkflowConfigID(s)
	return bpuo
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableWorkflowConfigID(s *string) *BillingProfileUpdateOne {
	if s != nil {
		bpuo.SetWorkflowConfigID(*s)
	}
	return bpuo
}

// SetDefault sets the "default" field.
func (bpuo *BillingProfileUpdateOne) SetDefault(b bool) *BillingProfileUpdateOne {
	bpuo.mutation.SetDefault(b)
	return bpuo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (bpuo *BillingProfileUpdateOne) SetNillableDefault(b *bool) *BillingProfileUpdateOne {
	if b != nil {
		bpuo.SetDefault(*b)
	}
	return bpuo
}

// AddBillingInvoiceIDs adds the "billing_invoices" edge to the BillingInvoice entity by IDs.
func (bpuo *BillingProfileUpdateOne) AddBillingInvoiceIDs(ids ...string) *BillingProfileUpdateOne {
	bpuo.mutation.AddBillingInvoiceIDs(ids...)
	return bpuo
}

// AddBillingInvoices adds the "billing_invoices" edges to the BillingInvoice entity.
func (bpuo *BillingProfileUpdateOne) AddBillingInvoices(b ...*BillingInvoice) *BillingProfileUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.AddBillingInvoiceIDs(ids...)
}

// SetWorkflowConfig sets the "workflow_config" edge to the BillingWorkflowConfig entity.
func (bpuo *BillingProfileUpdateOne) SetWorkflowConfig(b *BillingWorkflowConfig) *BillingProfileUpdateOne {
	return bpuo.SetWorkflowConfigID(b.ID)
}

// Mutation returns the BillingProfileMutation object of the builder.
func (bpuo *BillingProfileUpdateOne) Mutation() *BillingProfileMutation {
	return bpuo.mutation
}

// ClearBillingInvoices clears all "billing_invoices" edges to the BillingInvoice entity.
func (bpuo *BillingProfileUpdateOne) ClearBillingInvoices() *BillingProfileUpdateOne {
	bpuo.mutation.ClearBillingInvoices()
	return bpuo
}

// RemoveBillingInvoiceIDs removes the "billing_invoices" edge to BillingInvoice entities by IDs.
func (bpuo *BillingProfileUpdateOne) RemoveBillingInvoiceIDs(ids ...string) *BillingProfileUpdateOne {
	bpuo.mutation.RemoveBillingInvoiceIDs(ids...)
	return bpuo
}

// RemoveBillingInvoices removes "billing_invoices" edges to BillingInvoice entities.
func (bpuo *BillingProfileUpdateOne) RemoveBillingInvoices(b ...*BillingInvoice) *BillingProfileUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.RemoveBillingInvoiceIDs(ids...)
}

// ClearWorkflowConfig clears the "workflow_config" edge to the BillingWorkflowConfig entity.
func (bpuo *BillingProfileUpdateOne) ClearWorkflowConfig() *BillingProfileUpdateOne {
	bpuo.mutation.ClearWorkflowConfig()
	return bpuo
}

// Where appends a list predicates to the BillingProfileUpdate builder.
func (bpuo *BillingProfileUpdateOne) Where(ps ...predicate.BillingProfile) *BillingProfileUpdateOne {
	bpuo.mutation.Where(ps...)
	return bpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BillingProfileUpdateOne) Select(field string, fields ...string) *BillingProfileUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BillingProfile entity.
func (bpuo *BillingProfileUpdateOne) Save(ctx context.Context) (*BillingProfile, error) {
	bpuo.defaults()
	return withHooks(ctx, bpuo.sqlSave, bpuo.mutation, bpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BillingProfileUpdateOne) SaveX(ctx context.Context) *BillingProfile {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BillingProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BillingProfileUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpuo *BillingProfileUpdateOne) defaults() {
	if _, ok := bpuo.mutation.UpdatedAt(); !ok {
		v := billingprofile.UpdateDefaultUpdatedAt()
		bpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpuo *BillingProfileUpdateOne) check() error {
	if v, ok := bpuo.mutation.TaxProvider(); ok {
		if err := billingprofile.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.tax_provider": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.TaxProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingProfile.tax_provider_config": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.InvoicingProvider(); ok {
		if err := billingprofile.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.invoicing_provider": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.InvoicingProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoicing_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingProfile.invoicing_provider_config": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.PaymentProvider(); ok {
		if err := billingprofile.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.payment_provider": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.PaymentProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "payment_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingProfile.payment_provider_config": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.WorkflowConfigID(); ok {
		if err := billingprofile.WorkflowConfigIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_config_id", err: fmt.Errorf(`db: validator failed for field "BillingProfile.workflow_config_id": %w`, err)}
		}
	}
	if bpuo.mutation.WorkflowConfigCleared() && len(bpuo.mutation.WorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.workflow_config"`)
	}
	return nil
}

func (bpuo *BillingProfileUpdateOne) sqlSave(ctx context.Context) (_node *BillingProfile, err error) {
	if err := bpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingprofile.Table, billingprofile.Columns, sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString))
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingprofile.FieldID)
		for _, f := range fields {
			if !billingprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpuo.mutation.Metadata(); ok {
		_spec.SetField(billingprofile.FieldMetadata, field.TypeJSON, value)
	}
	if bpuo.mutation.MetadataCleared() {
		_spec.ClearField(billingprofile.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bpuo.mutation.DeletedAt(); ok {
		_spec.SetField(billingprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if bpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bpuo.mutation.TaxProvider(); ok {
		_spec.SetField(billingprofile.FieldTaxProvider, field.TypeEnum, value)
	}
	if bpuo.mutation.TaxProviderCleared() {
		_spec.ClearField(billingprofile.FieldTaxProvider, field.TypeEnum)
	}
	if value, ok := bpuo.mutation.TaxProviderConfig(); ok {
		vv, err := billingprofile.ValueScanner.TaxProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billingprofile.FieldTaxProviderConfig, field.TypeString, vv)
	}
	if bpuo.mutation.TaxProviderConfigCleared() {
		_spec.ClearField(billingprofile.FieldTaxProviderConfig, field.TypeString)
	}
	if value, ok := bpuo.mutation.InvoicingProvider(); ok {
		_spec.SetField(billingprofile.FieldInvoicingProvider, field.TypeEnum, value)
	}
	if bpuo.mutation.InvoicingProviderCleared() {
		_spec.ClearField(billingprofile.FieldInvoicingProvider, field.TypeEnum)
	}
	if value, ok := bpuo.mutation.InvoicingProviderConfig(); ok {
		vv, err := billingprofile.ValueScanner.InvoicingProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billingprofile.FieldInvoicingProviderConfig, field.TypeString, vv)
	}
	if bpuo.mutation.InvoicingProviderConfigCleared() {
		_spec.ClearField(billingprofile.FieldInvoicingProviderConfig, field.TypeString)
	}
	if value, ok := bpuo.mutation.PaymentProvider(); ok {
		_spec.SetField(billingprofile.FieldPaymentProvider, field.TypeEnum, value)
	}
	if bpuo.mutation.PaymentProviderCleared() {
		_spec.ClearField(billingprofile.FieldPaymentProvider, field.TypeEnum)
	}
	if value, ok := bpuo.mutation.PaymentProviderConfig(); ok {
		vv, err := billingprofile.ValueScanner.PaymentProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billingprofile.FieldPaymentProviderConfig, field.TypeString, vv)
	}
	if bpuo.mutation.PaymentProviderConfigCleared() {
		_spec.ClearField(billingprofile.FieldPaymentProviderConfig, field.TypeString)
	}
	if value, ok := bpuo.mutation.Default(); ok {
		_spec.SetField(billingprofile.FieldDefault, field.TypeBool, value)
	}
	if bpuo.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedBillingInvoicesIDs(); len(nodes) > 0 && !bpuo.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.BillingInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.WorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.WorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingProfile{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bpuo.mutation.done = true
	return _node, nil
}

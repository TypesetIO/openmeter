// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingLedgerUpdate is the builder for updating BillingLedger entities.
type BillingLedgerUpdate struct {
	config
	hooks    []Hook
	mutation *BillingLedgerMutation
}

// Where appends a list predicates to the BillingLedgerUpdate builder.
func (blu *BillingLedgerUpdate) Where(ps ...predicate.BillingLedger) *BillingLedgerUpdate {
	blu.mutation.Where(ps...)
	return blu
}

// SetUpdatedAt sets the "updated_at" field.
func (blu *BillingLedgerUpdate) SetUpdatedAt(t time.Time) *BillingLedgerUpdate {
	blu.mutation.SetUpdatedAt(t)
	return blu
}

// SetDeletedAt sets the "deleted_at" field.
func (blu *BillingLedgerUpdate) SetDeletedAt(t time.Time) *BillingLedgerUpdate {
	blu.mutation.SetDeletedAt(t)
	return blu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (blu *BillingLedgerUpdate) SetNillableDeletedAt(t *time.Time) *BillingLedgerUpdate {
	if t != nil {
		blu.SetDeletedAt(*t)
	}
	return blu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (blu *BillingLedgerUpdate) ClearDeletedAt() *BillingLedgerUpdate {
	blu.mutation.ClearDeletedAt()
	return blu
}

// AddSubledgerIDs adds the "subledgers" edge to the BillingSubledger entity by IDs.
func (blu *BillingLedgerUpdate) AddSubledgerIDs(ids ...string) *BillingLedgerUpdate {
	blu.mutation.AddSubledgerIDs(ids...)
	return blu
}

// AddSubledgers adds the "subledgers" edges to the BillingSubledger entity.
func (blu *BillingLedgerUpdate) AddSubledgers(b ...*BillingSubledger) *BillingLedgerUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blu.AddSubledgerIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the BillingSubledgerTransaction entity by IDs.
func (blu *BillingLedgerUpdate) AddTransactionIDs(ids ...string) *BillingLedgerUpdate {
	blu.mutation.AddTransactionIDs(ids...)
	return blu
}

// AddTransactions adds the "transactions" edges to the BillingSubledgerTransaction entity.
func (blu *BillingLedgerUpdate) AddTransactions(b ...*BillingSubledgerTransaction) *BillingLedgerUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blu.AddTransactionIDs(ids...)
}

// Mutation returns the BillingLedgerMutation object of the builder.
func (blu *BillingLedgerUpdate) Mutation() *BillingLedgerMutation {
	return blu.mutation
}

// ClearSubledgers clears all "subledgers" edges to the BillingSubledger entity.
func (blu *BillingLedgerUpdate) ClearSubledgers() *BillingLedgerUpdate {
	blu.mutation.ClearSubledgers()
	return blu
}

// RemoveSubledgerIDs removes the "subledgers" edge to BillingSubledger entities by IDs.
func (blu *BillingLedgerUpdate) RemoveSubledgerIDs(ids ...string) *BillingLedgerUpdate {
	blu.mutation.RemoveSubledgerIDs(ids...)
	return blu
}

// RemoveSubledgers removes "subledgers" edges to BillingSubledger entities.
func (blu *BillingLedgerUpdate) RemoveSubledgers(b ...*BillingSubledger) *BillingLedgerUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blu.RemoveSubledgerIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the BillingSubledgerTransaction entity.
func (blu *BillingLedgerUpdate) ClearTransactions() *BillingLedgerUpdate {
	blu.mutation.ClearTransactions()
	return blu
}

// RemoveTransactionIDs removes the "transactions" edge to BillingSubledgerTransaction entities by IDs.
func (blu *BillingLedgerUpdate) RemoveTransactionIDs(ids ...string) *BillingLedgerUpdate {
	blu.mutation.RemoveTransactionIDs(ids...)
	return blu
}

// RemoveTransactions removes "transactions" edges to BillingSubledgerTransaction entities.
func (blu *BillingLedgerUpdate) RemoveTransactions(b ...*BillingSubledgerTransaction) *BillingLedgerUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blu *BillingLedgerUpdate) Save(ctx context.Context) (int, error) {
	blu.defaults()
	return withHooks(ctx, blu.sqlSave, blu.mutation, blu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (blu *BillingLedgerUpdate) SaveX(ctx context.Context) int {
	affected, err := blu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blu *BillingLedgerUpdate) Exec(ctx context.Context) error {
	_, err := blu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blu *BillingLedgerUpdate) ExecX(ctx context.Context) {
	if err := blu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blu *BillingLedgerUpdate) defaults() {
	if _, ok := blu.mutation.UpdatedAt(); !ok {
		v := billingledger.UpdateDefaultUpdatedAt()
		blu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blu *BillingLedgerUpdate) check() error {
	if blu.mutation.CustomerCleared() && len(blu.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingLedger.customer"`)
	}
	return nil
}

func (blu *BillingLedgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := blu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingledger.Table, billingledger.Columns, sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString))
	if ps := blu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blu.mutation.UpdatedAt(); ok {
		_spec.SetField(billingledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := blu.mutation.DeletedAt(); ok {
		_spec.SetField(billingledger.FieldDeletedAt, field.TypeTime, value)
	}
	if blu.mutation.DeletedAtCleared() {
		_spec.ClearField(billingledger.FieldDeletedAt, field.TypeTime)
	}
	if blu.mutation.SubledgersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.RemovedSubledgersIDs(); len(nodes) > 0 && !blu.mutation.SubledgersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.SubledgersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if blu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !blu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	blu.mutation.done = true
	return n, nil
}

// BillingLedgerUpdateOne is the builder for updating a single BillingLedger entity.
type BillingLedgerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingLedgerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bluo *BillingLedgerUpdateOne) SetUpdatedAt(t time.Time) *BillingLedgerUpdateOne {
	bluo.mutation.SetUpdatedAt(t)
	return bluo
}

// SetDeletedAt sets the "deleted_at" field.
func (bluo *BillingLedgerUpdateOne) SetDeletedAt(t time.Time) *BillingLedgerUpdateOne {
	bluo.mutation.SetDeletedAt(t)
	return bluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bluo *BillingLedgerUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingLedgerUpdateOne {
	if t != nil {
		bluo.SetDeletedAt(*t)
	}
	return bluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bluo *BillingLedgerUpdateOne) ClearDeletedAt() *BillingLedgerUpdateOne {
	bluo.mutation.ClearDeletedAt()
	return bluo
}

// AddSubledgerIDs adds the "subledgers" edge to the BillingSubledger entity by IDs.
func (bluo *BillingLedgerUpdateOne) AddSubledgerIDs(ids ...string) *BillingLedgerUpdateOne {
	bluo.mutation.AddSubledgerIDs(ids...)
	return bluo
}

// AddSubledgers adds the "subledgers" edges to the BillingSubledger entity.
func (bluo *BillingLedgerUpdateOne) AddSubledgers(b ...*BillingSubledger) *BillingLedgerUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bluo.AddSubledgerIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the BillingSubledgerTransaction entity by IDs.
func (bluo *BillingLedgerUpdateOne) AddTransactionIDs(ids ...string) *BillingLedgerUpdateOne {
	bluo.mutation.AddTransactionIDs(ids...)
	return bluo
}

// AddTransactions adds the "transactions" edges to the BillingSubledgerTransaction entity.
func (bluo *BillingLedgerUpdateOne) AddTransactions(b ...*BillingSubledgerTransaction) *BillingLedgerUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bluo.AddTransactionIDs(ids...)
}

// Mutation returns the BillingLedgerMutation object of the builder.
func (bluo *BillingLedgerUpdateOne) Mutation() *BillingLedgerMutation {
	return bluo.mutation
}

// ClearSubledgers clears all "subledgers" edges to the BillingSubledger entity.
func (bluo *BillingLedgerUpdateOne) ClearSubledgers() *BillingLedgerUpdateOne {
	bluo.mutation.ClearSubledgers()
	return bluo
}

// RemoveSubledgerIDs removes the "subledgers" edge to BillingSubledger entities by IDs.
func (bluo *BillingLedgerUpdateOne) RemoveSubledgerIDs(ids ...string) *BillingLedgerUpdateOne {
	bluo.mutation.RemoveSubledgerIDs(ids...)
	return bluo
}

// RemoveSubledgers removes "subledgers" edges to BillingSubledger entities.
func (bluo *BillingLedgerUpdateOne) RemoveSubledgers(b ...*BillingSubledger) *BillingLedgerUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bluo.RemoveSubledgerIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the BillingSubledgerTransaction entity.
func (bluo *BillingLedgerUpdateOne) ClearTransactions() *BillingLedgerUpdateOne {
	bluo.mutation.ClearTransactions()
	return bluo
}

// RemoveTransactionIDs removes the "transactions" edge to BillingSubledgerTransaction entities by IDs.
func (bluo *BillingLedgerUpdateOne) RemoveTransactionIDs(ids ...string) *BillingLedgerUpdateOne {
	bluo.mutation.RemoveTransactionIDs(ids...)
	return bluo
}

// RemoveTransactions removes "transactions" edges to BillingSubledgerTransaction entities.
func (bluo *BillingLedgerUpdateOne) RemoveTransactions(b ...*BillingSubledgerTransaction) *BillingLedgerUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bluo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the BillingLedgerUpdate builder.
func (bluo *BillingLedgerUpdateOne) Where(ps ...predicate.BillingLedger) *BillingLedgerUpdateOne {
	bluo.mutation.Where(ps...)
	return bluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bluo *BillingLedgerUpdateOne) Select(field string, fields ...string) *BillingLedgerUpdateOne {
	bluo.fields = append([]string{field}, fields...)
	return bluo
}

// Save executes the query and returns the updated BillingLedger entity.
func (bluo *BillingLedgerUpdateOne) Save(ctx context.Context) (*BillingLedger, error) {
	bluo.defaults()
	return withHooks(ctx, bluo.sqlSave, bluo.mutation, bluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bluo *BillingLedgerUpdateOne) SaveX(ctx context.Context) *BillingLedger {
	node, err := bluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bluo *BillingLedgerUpdateOne) Exec(ctx context.Context) error {
	_, err := bluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bluo *BillingLedgerUpdateOne) ExecX(ctx context.Context) {
	if err := bluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bluo *BillingLedgerUpdateOne) defaults() {
	if _, ok := bluo.mutation.UpdatedAt(); !ok {
		v := billingledger.UpdateDefaultUpdatedAt()
		bluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bluo *BillingLedgerUpdateOne) check() error {
	if bluo.mutation.CustomerCleared() && len(bluo.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingLedger.customer"`)
	}
	return nil
}

func (bluo *BillingLedgerUpdateOne) sqlSave(ctx context.Context) (_node *BillingLedger, err error) {
	if err := bluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingledger.Table, billingledger.Columns, sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString))
	id, ok := bluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingLedger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingledger.FieldID)
		for _, f := range fields {
			if !billingledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bluo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bluo.mutation.DeletedAt(); ok {
		_spec.SetField(billingledger.FieldDeletedAt, field.TypeTime, value)
	}
	if bluo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingledger.FieldDeletedAt, field.TypeTime)
	}
	if bluo.mutation.SubledgersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.RemovedSubledgersIDs(); len(nodes) > 0 && !bluo.mutation.SubledgersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.SubledgersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bluo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !bluo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingLedger{config: bluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bluo.mutation.done = true
	return _node, nil
}

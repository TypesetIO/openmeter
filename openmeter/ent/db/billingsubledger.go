// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
)

// BillingSubledger is the model entity for the BillingSubledger schema.
type BillingSubledger struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// LedgerID holds the value of the "ledger_id" field.
	LedgerID string `json:"ledger_id,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int64 `json:"priority,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingSubledgerQuery when eager-loading is set.
	Edges        BillingSubledgerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingSubledgerEdges holds the relations/edges for other nodes in the graph.
type BillingSubledgerEdges struct {
	// Ledger holds the value of the ledger edge.
	Ledger *BillingLedger `json:"ledger,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*BillingSubledgerTransaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LedgerOrErr returns the Ledger value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingSubledgerEdges) LedgerOrErr() (*BillingLedger, error) {
	if e.Ledger != nil {
		return e.Ledger, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billingledger.Label}
	}
	return nil, &NotLoadedError{edge: "ledger"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e BillingSubledgerEdges) TransactionsOrErr() ([]*BillingSubledgerTransaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingSubledger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingsubledger.FieldMetadata:
			values[i] = new([]byte)
		case billingsubledger.FieldPriority:
			values[i] = new(sql.NullInt64)
		case billingsubledger.FieldID, billingsubledger.FieldNamespace, billingsubledger.FieldName, billingsubledger.FieldDescription, billingsubledger.FieldKey, billingsubledger.FieldLedgerID:
			values[i] = new(sql.NullString)
		case billingsubledger.FieldCreatedAt, billingsubledger.FieldUpdatedAt, billingsubledger.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingSubledger fields.
func (bs *BillingSubledger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingsubledger.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bs.ID = value.String
			}
		case billingsubledger.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bs.Namespace = value.String
			}
		case billingsubledger.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bs.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billingsubledger.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bs.CreatedAt = value.Time
			}
		case billingsubledger.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bs.UpdatedAt = value.Time
			}
		case billingsubledger.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bs.DeletedAt = new(time.Time)
				*bs.DeletedAt = value.Time
			}
		case billingsubledger.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bs.Name = value.String
			}
		case billingsubledger.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bs.Description = new(string)
				*bs.Description = value.String
			}
		case billingsubledger.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				bs.Key = value.String
			}
		case billingsubledger.FieldLedgerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ledger_id", values[i])
			} else if value.Valid {
				bs.LedgerID = value.String
			}
		case billingsubledger.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				bs.Priority = value.Int64
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingSubledger.
// This includes values selected through modifiers, order, etc.
func (bs *BillingSubledger) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// QueryLedger queries the "ledger" edge of the BillingSubledger entity.
func (bs *BillingSubledger) QueryLedger() *BillingLedgerQuery {
	return NewBillingSubledgerClient(bs.config).QueryLedger(bs)
}

// QueryTransactions queries the "transactions" edge of the BillingSubledger entity.
func (bs *BillingSubledger) QueryTransactions() *BillingSubledgerTransactionQuery {
	return NewBillingSubledgerClient(bs.config).QueryTransactions(bs)
}

// Update returns a builder for updating this BillingSubledger.
// Note that you need to call BillingSubledger.Unwrap() before calling this method if this BillingSubledger
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BillingSubledger) Update() *BillingSubledgerUpdateOne {
	return NewBillingSubledgerClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BillingSubledger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BillingSubledger) Unwrap() *BillingSubledger {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingSubledger is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BillingSubledger) String() string {
	var builder strings.Builder
	builder.WriteString("BillingSubledger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bs.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bs.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bs.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bs.Name)
	builder.WriteString(", ")
	if v := bs.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(bs.Key)
	builder.WriteString(", ")
	builder.WriteString("ledger_id=")
	builder.WriteString(bs.LedgerID)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", bs.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// BillingSubledgers is a parsable slice of BillingSubledger.
type BillingSubledgers []*BillingSubledger

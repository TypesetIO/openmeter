// Code generated by ent, DO NOT EDIT.

package subscriptionpatchvalueextendphase

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldNamespace, v))
}

// SubscriptionPatchID applies equality check predicate on the "subscription_patch_id" field. It's identical to SubscriptionPatchIDEQ.
func SubscriptionPatchID(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldSubscriptionPatchID, v))
}

// PhaseKey applies equality check predicate on the "phase_key" field. It's identical to PhaseKeyEQ.
func PhaseKey(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldPhaseKey, v))
}

// ExtendDurationIso applies equality check predicate on the "extend_duration_iso" field. It's identical to ExtendDurationIsoEQ.
func ExtendDurationIso(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldExtendDurationIso, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContainsFold(FieldNamespace, v))
}

// SubscriptionPatchIDEQ applies the EQ predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDNEQ applies the NEQ predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDNEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNEQ(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDIn applies the In predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldIn(FieldSubscriptionPatchID, vs...))
}

// SubscriptionPatchIDNotIn applies the NotIn predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDNotIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNotIn(FieldSubscriptionPatchID, vs...))
}

// SubscriptionPatchIDGT applies the GT predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDGT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGT(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDGTE applies the GTE predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDGTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGTE(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDLT applies the LT predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDLT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLT(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDLTE applies the LTE predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDLTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLTE(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDContains applies the Contains predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDContains(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContains(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDHasPrefix applies the HasPrefix predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDHasPrefix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasPrefix(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDHasSuffix applies the HasSuffix predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDHasSuffix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasSuffix(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDEqualFold applies the EqualFold predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDEqualFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEqualFold(FieldSubscriptionPatchID, v))
}

// SubscriptionPatchIDContainsFold applies the ContainsFold predicate on the "subscription_patch_id" field.
func SubscriptionPatchIDContainsFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContainsFold(FieldSubscriptionPatchID, v))
}

// PhaseKeyEQ applies the EQ predicate on the "phase_key" field.
func PhaseKeyEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldPhaseKey, v))
}

// PhaseKeyNEQ applies the NEQ predicate on the "phase_key" field.
func PhaseKeyNEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNEQ(FieldPhaseKey, v))
}

// PhaseKeyIn applies the In predicate on the "phase_key" field.
func PhaseKeyIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldIn(FieldPhaseKey, vs...))
}

// PhaseKeyNotIn applies the NotIn predicate on the "phase_key" field.
func PhaseKeyNotIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNotIn(FieldPhaseKey, vs...))
}

// PhaseKeyGT applies the GT predicate on the "phase_key" field.
func PhaseKeyGT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGT(FieldPhaseKey, v))
}

// PhaseKeyGTE applies the GTE predicate on the "phase_key" field.
func PhaseKeyGTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGTE(FieldPhaseKey, v))
}

// PhaseKeyLT applies the LT predicate on the "phase_key" field.
func PhaseKeyLT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLT(FieldPhaseKey, v))
}

// PhaseKeyLTE applies the LTE predicate on the "phase_key" field.
func PhaseKeyLTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLTE(FieldPhaseKey, v))
}

// PhaseKeyContains applies the Contains predicate on the "phase_key" field.
func PhaseKeyContains(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContains(FieldPhaseKey, v))
}

// PhaseKeyHasPrefix applies the HasPrefix predicate on the "phase_key" field.
func PhaseKeyHasPrefix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasPrefix(FieldPhaseKey, v))
}

// PhaseKeyHasSuffix applies the HasSuffix predicate on the "phase_key" field.
func PhaseKeyHasSuffix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasSuffix(FieldPhaseKey, v))
}

// PhaseKeyEqualFold applies the EqualFold predicate on the "phase_key" field.
func PhaseKeyEqualFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEqualFold(FieldPhaseKey, v))
}

// PhaseKeyContainsFold applies the ContainsFold predicate on the "phase_key" field.
func PhaseKeyContainsFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContainsFold(FieldPhaseKey, v))
}

// ExtendDurationIsoEQ applies the EQ predicate on the "extend_duration_iso" field.
func ExtendDurationIsoEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEQ(FieldExtendDurationIso, v))
}

// ExtendDurationIsoNEQ applies the NEQ predicate on the "extend_duration_iso" field.
func ExtendDurationIsoNEQ(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNEQ(FieldExtendDurationIso, v))
}

// ExtendDurationIsoIn applies the In predicate on the "extend_duration_iso" field.
func ExtendDurationIsoIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldIn(FieldExtendDurationIso, vs...))
}

// ExtendDurationIsoNotIn applies the NotIn predicate on the "extend_duration_iso" field.
func ExtendDurationIsoNotIn(vs ...string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldNotIn(FieldExtendDurationIso, vs...))
}

// ExtendDurationIsoGT applies the GT predicate on the "extend_duration_iso" field.
func ExtendDurationIsoGT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGT(FieldExtendDurationIso, v))
}

// ExtendDurationIsoGTE applies the GTE predicate on the "extend_duration_iso" field.
func ExtendDurationIsoGTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldGTE(FieldExtendDurationIso, v))
}

// ExtendDurationIsoLT applies the LT predicate on the "extend_duration_iso" field.
func ExtendDurationIsoLT(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLT(FieldExtendDurationIso, v))
}

// ExtendDurationIsoLTE applies the LTE predicate on the "extend_duration_iso" field.
func ExtendDurationIsoLTE(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldLTE(FieldExtendDurationIso, v))
}

// ExtendDurationIsoContains applies the Contains predicate on the "extend_duration_iso" field.
func ExtendDurationIsoContains(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContains(FieldExtendDurationIso, v))
}

// ExtendDurationIsoHasPrefix applies the HasPrefix predicate on the "extend_duration_iso" field.
func ExtendDurationIsoHasPrefix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasPrefix(FieldExtendDurationIso, v))
}

// ExtendDurationIsoHasSuffix applies the HasSuffix predicate on the "extend_duration_iso" field.
func ExtendDurationIsoHasSuffix(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldHasSuffix(FieldExtendDurationIso, v))
}

// ExtendDurationIsoEqualFold applies the EqualFold predicate on the "extend_duration_iso" field.
func ExtendDurationIsoEqualFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldEqualFold(FieldExtendDurationIso, v))
}

// ExtendDurationIsoContainsFold applies the ContainsFold predicate on the "extend_duration_iso" field.
func ExtendDurationIsoContainsFold(v string) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.FieldContainsFold(FieldExtendDurationIso, v))
}

// HasSubscriptionPatch applies the HasEdge predicate on the "subscription_patch" edge.
func HasSubscriptionPatch() predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SubscriptionPatchTable, SubscriptionPatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionPatchWith applies the HasEdge predicate on the "subscription_patch" edge with a given conditions (other predicates).
func HasSubscriptionPatchWith(preds ...predicate.SubscriptionPatch) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(func(s *sql.Selector) {
		step := newSubscriptionPatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionPatchValueExtendPhase) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionPatchValueExtendPhase) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionPatchValueExtendPhase) predicate.SubscriptionPatchValueExtendPhase {
	return predicate.SubscriptionPatchValueExtendPhase(sql.NotPredicates(p))
}

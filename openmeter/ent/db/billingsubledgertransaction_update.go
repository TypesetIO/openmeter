// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingSubledgerTransactionUpdate is the builder for updating BillingSubledgerTransaction entities.
type BillingSubledgerTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *BillingSubledgerTransactionMutation
}

// Where appends a list predicates to the BillingSubledgerTransactionUpdate builder.
func (bstu *BillingSubledgerTransactionUpdate) Where(ps ...predicate.BillingSubledgerTransaction) *BillingSubledgerTransactionUpdate {
	bstu.mutation.Where(ps...)
	return bstu
}

// SetMetadata sets the "metadata" field.
func (bstu *BillingSubledgerTransactionUpdate) SetMetadata(m map[string]string) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetMetadata(m)
	return bstu
}

// ClearMetadata clears the value of the "metadata" field.
func (bstu *BillingSubledgerTransactionUpdate) ClearMetadata() *BillingSubledgerTransactionUpdate {
	bstu.mutation.ClearMetadata()
	return bstu
}

// SetUpdatedAt sets the "updated_at" field.
func (bstu *BillingSubledgerTransactionUpdate) SetUpdatedAt(t time.Time) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetUpdatedAt(t)
	return bstu
}

// SetDeletedAt sets the "deleted_at" field.
func (bstu *BillingSubledgerTransactionUpdate) SetDeletedAt(t time.Time) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetDeletedAt(t)
	return bstu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bstu *BillingSubledgerTransactionUpdate) SetNillableDeletedAt(t *time.Time) *BillingSubledgerTransactionUpdate {
	if t != nil {
		bstu.SetDeletedAt(*t)
	}
	return bstu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bstu *BillingSubledgerTransactionUpdate) ClearDeletedAt() *BillingSubledgerTransactionUpdate {
	bstu.mutation.ClearDeletedAt()
	return bstu
}

// SetName sets the "name" field.
func (bstu *BillingSubledgerTransactionUpdate) SetName(s string) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetName(s)
	return bstu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bstu *BillingSubledgerTransactionUpdate) SetNillableName(s *string) *BillingSubledgerTransactionUpdate {
	if s != nil {
		bstu.SetName(*s)
	}
	return bstu
}

// SetDescription sets the "description" field.
func (bstu *BillingSubledgerTransactionUpdate) SetDescription(s string) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetDescription(s)
	return bstu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bstu *BillingSubledgerTransactionUpdate) SetNillableDescription(s *string) *BillingSubledgerTransactionUpdate {
	if s != nil {
		bstu.SetDescription(*s)
	}
	return bstu
}

// ClearDescription clears the value of the "description" field.
func (bstu *BillingSubledgerTransactionUpdate) ClearDescription() *BillingSubledgerTransactionUpdate {
	bstu.mutation.ClearDescription()
	return bstu
}

// SetOwnerType sets the "owner_type" field.
func (bstu *BillingSubledgerTransactionUpdate) SetOwnerType(s string) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetOwnerType(s)
	return bstu
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (bstu *BillingSubledgerTransactionUpdate) SetNillableOwnerType(s *string) *BillingSubledgerTransactionUpdate {
	if s != nil {
		bstu.SetOwnerType(*s)
	}
	return bstu
}

// ClearOwnerType clears the value of the "owner_type" field.
func (bstu *BillingSubledgerTransactionUpdate) ClearOwnerType() *BillingSubledgerTransactionUpdate {
	bstu.mutation.ClearOwnerType()
	return bstu
}

// SetOwnerID sets the "owner_id" field.
func (bstu *BillingSubledgerTransactionUpdate) SetOwnerID(s string) *BillingSubledgerTransactionUpdate {
	bstu.mutation.SetOwnerID(s)
	return bstu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (bstu *BillingSubledgerTransactionUpdate) SetNillableOwnerID(s *string) *BillingSubledgerTransactionUpdate {
	if s != nil {
		bstu.SetOwnerID(*s)
	}
	return bstu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (bstu *BillingSubledgerTransactionUpdate) ClearOwnerID() *BillingSubledgerTransactionUpdate {
	bstu.mutation.ClearOwnerID()
	return bstu
}

// Mutation returns the BillingSubledgerTransactionMutation object of the builder.
func (bstu *BillingSubledgerTransactionUpdate) Mutation() *BillingSubledgerTransactionMutation {
	return bstu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bstu *BillingSubledgerTransactionUpdate) Save(ctx context.Context) (int, error) {
	bstu.defaults()
	return withHooks(ctx, bstu.sqlSave, bstu.mutation, bstu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bstu *BillingSubledgerTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := bstu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bstu *BillingSubledgerTransactionUpdate) Exec(ctx context.Context) error {
	_, err := bstu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bstu *BillingSubledgerTransactionUpdate) ExecX(ctx context.Context) {
	if err := bstu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bstu *BillingSubledgerTransactionUpdate) defaults() {
	if _, ok := bstu.mutation.UpdatedAt(); !ok {
		v := billingsubledgertransaction.UpdateDefaultUpdatedAt()
		bstu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bstu *BillingSubledgerTransactionUpdate) check() error {
	if bstu.mutation.SubledgerCleared() && len(bstu.mutation.SubledgerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingSubledgerTransaction.subledger"`)
	}
	if bstu.mutation.LedgerCleared() && len(bstu.mutation.LedgerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingSubledgerTransaction.ledger"`)
	}
	return nil
}

func (bstu *BillingSubledgerTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bstu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingsubledgertransaction.Table, billingsubledgertransaction.Columns, sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString))
	if ps := bstu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bstu.mutation.Metadata(); ok {
		_spec.SetField(billingsubledgertransaction.FieldMetadata, field.TypeJSON, value)
	}
	if bstu.mutation.MetadataCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bstu.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bstu.mutation.DeletedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldDeletedAt, field.TypeTime, value)
	}
	if bstu.mutation.DeletedAtCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bstu.mutation.Name(); ok {
		_spec.SetField(billingsubledgertransaction.FieldName, field.TypeString, value)
	}
	if value, ok := bstu.mutation.Description(); ok {
		_spec.SetField(billingsubledgertransaction.FieldDescription, field.TypeString, value)
	}
	if bstu.mutation.DescriptionCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldDescription, field.TypeString)
	}
	if value, ok := bstu.mutation.OwnerType(); ok {
		_spec.SetField(billingsubledgertransaction.FieldOwnerType, field.TypeString, value)
	}
	if bstu.mutation.OwnerTypeCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldOwnerType, field.TypeString)
	}
	if value, ok := bstu.mutation.OwnerID(); ok {
		_spec.SetField(billingsubledgertransaction.FieldOwnerID, field.TypeString, value)
	}
	if bstu.mutation.OwnerIDCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldOwnerID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bstu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsubledgertransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bstu.mutation.done = true
	return n, nil
}

// BillingSubledgerTransactionUpdateOne is the builder for updating a single BillingSubledgerTransaction entity.
type BillingSubledgerTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingSubledgerTransactionMutation
}

// SetMetadata sets the "metadata" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetMetadata(m map[string]string) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetMetadata(m)
	return bstuo
}

// ClearMetadata clears the value of the "metadata" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) ClearMetadata() *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.ClearMetadata()
	return bstuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetUpdatedAt(t time.Time) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetUpdatedAt(t)
	return bstuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetDeletedAt(t time.Time) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetDeletedAt(t)
	return bstuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingSubledgerTransactionUpdateOne {
	if t != nil {
		bstuo.SetDeletedAt(*t)
	}
	return bstuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) ClearDeletedAt() *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.ClearDeletedAt()
	return bstuo
}

// SetName sets the "name" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetName(s string) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetName(s)
	return bstuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetNillableName(s *string) *BillingSubledgerTransactionUpdateOne {
	if s != nil {
		bstuo.SetName(*s)
	}
	return bstuo
}

// SetDescription sets the "description" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetDescription(s string) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetDescription(s)
	return bstuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetNillableDescription(s *string) *BillingSubledgerTransactionUpdateOne {
	if s != nil {
		bstuo.SetDescription(*s)
	}
	return bstuo
}

// ClearDescription clears the value of the "description" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) ClearDescription() *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.ClearDescription()
	return bstuo
}

// SetOwnerType sets the "owner_type" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetOwnerType(s string) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetOwnerType(s)
	return bstuo
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetNillableOwnerType(s *string) *BillingSubledgerTransactionUpdateOne {
	if s != nil {
		bstuo.SetOwnerType(*s)
	}
	return bstuo
}

// ClearOwnerType clears the value of the "owner_type" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) ClearOwnerType() *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.ClearOwnerType()
	return bstuo
}

// SetOwnerID sets the "owner_id" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetOwnerID(s string) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.SetOwnerID(s)
	return bstuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (bstuo *BillingSubledgerTransactionUpdateOne) SetNillableOwnerID(s *string) *BillingSubledgerTransactionUpdateOne {
	if s != nil {
		bstuo.SetOwnerID(*s)
	}
	return bstuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (bstuo *BillingSubledgerTransactionUpdateOne) ClearOwnerID() *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.ClearOwnerID()
	return bstuo
}

// Mutation returns the BillingSubledgerTransactionMutation object of the builder.
func (bstuo *BillingSubledgerTransactionUpdateOne) Mutation() *BillingSubledgerTransactionMutation {
	return bstuo.mutation
}

// Where appends a list predicates to the BillingSubledgerTransactionUpdate builder.
func (bstuo *BillingSubledgerTransactionUpdateOne) Where(ps ...predicate.BillingSubledgerTransaction) *BillingSubledgerTransactionUpdateOne {
	bstuo.mutation.Where(ps...)
	return bstuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bstuo *BillingSubledgerTransactionUpdateOne) Select(field string, fields ...string) *BillingSubledgerTransactionUpdateOne {
	bstuo.fields = append([]string{field}, fields...)
	return bstuo
}

// Save executes the query and returns the updated BillingSubledgerTransaction entity.
func (bstuo *BillingSubledgerTransactionUpdateOne) Save(ctx context.Context) (*BillingSubledgerTransaction, error) {
	bstuo.defaults()
	return withHooks(ctx, bstuo.sqlSave, bstuo.mutation, bstuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bstuo *BillingSubledgerTransactionUpdateOne) SaveX(ctx context.Context) *BillingSubledgerTransaction {
	node, err := bstuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bstuo *BillingSubledgerTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := bstuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bstuo *BillingSubledgerTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := bstuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bstuo *BillingSubledgerTransactionUpdateOne) defaults() {
	if _, ok := bstuo.mutation.UpdatedAt(); !ok {
		v := billingsubledgertransaction.UpdateDefaultUpdatedAt()
		bstuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bstuo *BillingSubledgerTransactionUpdateOne) check() error {
	if bstuo.mutation.SubledgerCleared() && len(bstuo.mutation.SubledgerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingSubledgerTransaction.subledger"`)
	}
	if bstuo.mutation.LedgerCleared() && len(bstuo.mutation.LedgerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingSubledgerTransaction.ledger"`)
	}
	return nil
}

func (bstuo *BillingSubledgerTransactionUpdateOne) sqlSave(ctx context.Context) (_node *BillingSubledgerTransaction, err error) {
	if err := bstuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingsubledgertransaction.Table, billingsubledgertransaction.Columns, sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString))
	id, ok := bstuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingSubledgerTransaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bstuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingsubledgertransaction.FieldID)
		for _, f := range fields {
			if !billingsubledgertransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingsubledgertransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bstuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bstuo.mutation.Metadata(); ok {
		_spec.SetField(billingsubledgertransaction.FieldMetadata, field.TypeJSON, value)
	}
	if bstuo.mutation.MetadataCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bstuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bstuo.mutation.DeletedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldDeletedAt, field.TypeTime, value)
	}
	if bstuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bstuo.mutation.Name(); ok {
		_spec.SetField(billingsubledgertransaction.FieldName, field.TypeString, value)
	}
	if value, ok := bstuo.mutation.Description(); ok {
		_spec.SetField(billingsubledgertransaction.FieldDescription, field.TypeString, value)
	}
	if bstuo.mutation.DescriptionCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldDescription, field.TypeString)
	}
	if value, ok := bstuo.mutation.OwnerType(); ok {
		_spec.SetField(billingsubledgertransaction.FieldOwnerType, field.TypeString, value)
	}
	if bstuo.mutation.OwnerTypeCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldOwnerType, field.TypeString)
	}
	if value, ok := bstuo.mutation.OwnerID(); ok {
		_spec.SetField(billingsubledgertransaction.FieldOwnerID, field.TypeString, value)
	}
	if bstuo.mutation.OwnerIDCleared() {
		_spec.ClearField(billingsubledgertransaction.FieldOwnerID, field.TypeString)
	}
	_node = &BillingSubledgerTransaction{config: bstuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bstuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsubledgertransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bstuo.mutation.done = true
	return _node, nil
}

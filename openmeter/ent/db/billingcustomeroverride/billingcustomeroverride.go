// Code generated by ent, DO NOT EDIT.

package billingcustomeroverride

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
)

const (
	// Label holds the string label denoting the billingcustomeroverride type in the database.
	Label = "billing_customer_override"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldBillingProfileID holds the string denoting the billing_profile_id field in the database.
	FieldBillingProfileID = "billing_profile_id"
	// FieldTaxProvider holds the string denoting the tax_provider field in the database.
	FieldTaxProvider = "tax_provider"
	// FieldTaxProviderConfig holds the string denoting the tax_provider_config field in the database.
	FieldTaxProviderConfig = "tax_provider_config"
	// FieldInvoicingProvider holds the string denoting the invoicing_provider field in the database.
	FieldInvoicingProvider = "invoicing_provider"
	// FieldInvoicingProviderConfig holds the string denoting the invoicing_provider_config field in the database.
	FieldInvoicingProviderConfig = "invoicing_provider_config"
	// FieldPaymentProvider holds the string denoting the payment_provider field in the database.
	FieldPaymentProvider = "payment_provider"
	// FieldPaymentProviderConfig holds the string denoting the payment_provider_config field in the database.
	FieldPaymentProviderConfig = "payment_provider_config"
	// FieldWorkflowConfigID holds the string denoting the workflow_config_id field in the database.
	FieldWorkflowConfigID = "workflow_config_id"
	// Table holds the table name of the billingcustomeroverride in the database.
	Table = "billing_customer_overrides"
)

// Columns holds all SQL columns for billingcustomeroverride fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCustomerID,
	FieldBillingProfileID,
	FieldTaxProvider,
	FieldTaxProviderConfig,
	FieldInvoicingProvider,
	FieldInvoicingProviderConfig,
	FieldPaymentProvider,
	FieldPaymentProviderConfig,
	FieldWorkflowConfigID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CustomerIDValidator is a validator for the "customer_id" field. It is called by the builders before save.
	CustomerIDValidator func(string) error
	// BillingProfileIDValidator is a validator for the "billing_profile_id" field. It is called by the builders before save.
	BillingProfileIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// ValueScanner of all BillingCustomerOverride fields.
	ValueScanner struct {
		TaxProviderConfig       field.TypeValueScanner[*provider.TaxConfiguration]
		InvoicingProviderConfig field.TypeValueScanner[*provider.InvoicingConfiguration]
		PaymentProviderConfig   field.TypeValueScanner[*provider.PaymentConfiguration]
	}
)

// TaxProviderValidator is a validator for the "tax_provider" field enum values. It is called by the builders before save.
func TaxProviderValidator(tp provider.TaxProvider) error {
	switch tp {
	case "openmeter_sandbox", "stripe":
		return nil
	default:
		return fmt.Errorf("billingcustomeroverride: invalid enum value for tax_provider field: %q", tp)
	}
}

// InvoicingProviderValidator is a validator for the "invoicing_provider" field enum values. It is called by the builders before save.
func InvoicingProviderValidator(ip provider.InvoicingProvider) error {
	switch ip {
	case "openmeter_sandbox", "stripe":
		return nil
	default:
		return fmt.Errorf("billingcustomeroverride: invalid enum value for invoicing_provider field: %q", ip)
	}
}

// PaymentProviderValidator is a validator for the "payment_provider" field enum values. It is called by the builders before save.
func PaymentProviderValidator(pp provider.PaymentProvider) error {
	switch pp {
	case "openmeter_sandbox", "stripe_payments":
		return nil
	default:
		return fmt.Errorf("billingcustomeroverride: invalid enum value for payment_provider field: %q", pp)
	}
}

// OrderOption defines the ordering options for the BillingCustomerOverride queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByBillingProfileID orders the results by the billing_profile_id field.
func ByBillingProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingProfileID, opts...).ToFunc()
}

// ByTaxProvider orders the results by the tax_provider field.
func ByTaxProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxProvider, opts...).ToFunc()
}

// ByTaxProviderConfig orders the results by the tax_provider_config field.
func ByTaxProviderConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxProviderConfig, opts...).ToFunc()
}

// ByInvoicingProvider orders the results by the invoicing_provider field.
func ByInvoicingProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoicingProvider, opts...).ToFunc()
}

// ByInvoicingProviderConfig orders the results by the invoicing_provider_config field.
func ByInvoicingProviderConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoicingProviderConfig, opts...).ToFunc()
}

// ByPaymentProvider orders the results by the payment_provider field.
func ByPaymentProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentProvider, opts...).ToFunc()
}

// ByPaymentProviderConfig orders the results by the payment_provider_config field.
func ByPaymentProviderConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentProviderConfig, opts...).ToFunc()
}

// ByWorkflowConfigID orders the results by the workflow_config_id field.
func ByWorkflowConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowConfigID, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package billingcustomeroverride

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldDeletedAt, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldCustomerID, v))
}

// BillingProfileID applies equality check predicate on the "billing_profile_id" field. It's identical to BillingProfileIDEQ.
func BillingProfileID(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldBillingProfileID, v))
}

// WorkflowConfigID applies equality check predicate on the "workflow_config_id" field. It's identical to WorkflowConfigIDEQ.
func WorkflowConfigID(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldWorkflowConfigID, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldDeletedAt))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContainsFold(FieldCustomerID, v))
}

// BillingProfileIDEQ applies the EQ predicate on the "billing_profile_id" field.
func BillingProfileIDEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldBillingProfileID, v))
}

// BillingProfileIDNEQ applies the NEQ predicate on the "billing_profile_id" field.
func BillingProfileIDNEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldBillingProfileID, v))
}

// BillingProfileIDIn applies the In predicate on the "billing_profile_id" field.
func BillingProfileIDIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldBillingProfileID, vs...))
}

// BillingProfileIDNotIn applies the NotIn predicate on the "billing_profile_id" field.
func BillingProfileIDNotIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldBillingProfileID, vs...))
}

// BillingProfileIDGT applies the GT predicate on the "billing_profile_id" field.
func BillingProfileIDGT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldBillingProfileID, v))
}

// BillingProfileIDGTE applies the GTE predicate on the "billing_profile_id" field.
func BillingProfileIDGTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldBillingProfileID, v))
}

// BillingProfileIDLT applies the LT predicate on the "billing_profile_id" field.
func BillingProfileIDLT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldBillingProfileID, v))
}

// BillingProfileIDLTE applies the LTE predicate on the "billing_profile_id" field.
func BillingProfileIDLTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldBillingProfileID, v))
}

// BillingProfileIDContains applies the Contains predicate on the "billing_profile_id" field.
func BillingProfileIDContains(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContains(FieldBillingProfileID, v))
}

// BillingProfileIDHasPrefix applies the HasPrefix predicate on the "billing_profile_id" field.
func BillingProfileIDHasPrefix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasPrefix(FieldBillingProfileID, v))
}

// BillingProfileIDHasSuffix applies the HasSuffix predicate on the "billing_profile_id" field.
func BillingProfileIDHasSuffix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasSuffix(FieldBillingProfileID, v))
}

// BillingProfileIDEqualFold applies the EqualFold predicate on the "billing_profile_id" field.
func BillingProfileIDEqualFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEqualFold(FieldBillingProfileID, v))
}

// BillingProfileIDContainsFold applies the ContainsFold predicate on the "billing_profile_id" field.
func BillingProfileIDContainsFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContainsFold(FieldBillingProfileID, v))
}

// TaxProviderEQ applies the EQ predicate on the "tax_provider" field.
func TaxProviderEQ(v provider.TaxProvider) predicate.BillingCustomerOverride {
	vc := v
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldTaxProvider, vc))
}

// TaxProviderNEQ applies the NEQ predicate on the "tax_provider" field.
func TaxProviderNEQ(v provider.TaxProvider) predicate.BillingCustomerOverride {
	vc := v
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldTaxProvider, vc))
}

// TaxProviderIn applies the In predicate on the "tax_provider" field.
func TaxProviderIn(vs ...provider.TaxProvider) predicate.BillingCustomerOverride {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldTaxProvider, v...))
}

// TaxProviderNotIn applies the NotIn predicate on the "tax_provider" field.
func TaxProviderNotIn(vs ...provider.TaxProvider) predicate.BillingCustomerOverride {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldTaxProvider, v...))
}

// TaxProviderIsNil applies the IsNil predicate on the "tax_provider" field.
func TaxProviderIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldTaxProvider))
}

// TaxProviderNotNil applies the NotNil predicate on the "tax_provider" field.
func TaxProviderNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldTaxProvider))
}

// TaxProviderConfigIsNil applies the IsNil predicate on the "tax_provider_config" field.
func TaxProviderConfigIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldTaxProviderConfig))
}

// TaxProviderConfigNotNil applies the NotNil predicate on the "tax_provider_config" field.
func TaxProviderConfigNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldTaxProviderConfig))
}

// InvoicingProviderEQ applies the EQ predicate on the "invoicing_provider" field.
func InvoicingProviderEQ(v provider.InvoicingProvider) predicate.BillingCustomerOverride {
	vc := v
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldInvoicingProvider, vc))
}

// InvoicingProviderNEQ applies the NEQ predicate on the "invoicing_provider" field.
func InvoicingProviderNEQ(v provider.InvoicingProvider) predicate.BillingCustomerOverride {
	vc := v
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldInvoicingProvider, vc))
}

// InvoicingProviderIn applies the In predicate on the "invoicing_provider" field.
func InvoicingProviderIn(vs ...provider.InvoicingProvider) predicate.BillingCustomerOverride {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldInvoicingProvider, v...))
}

// InvoicingProviderNotIn applies the NotIn predicate on the "invoicing_provider" field.
func InvoicingProviderNotIn(vs ...provider.InvoicingProvider) predicate.BillingCustomerOverride {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldInvoicingProvider, v...))
}

// InvoicingProviderIsNil applies the IsNil predicate on the "invoicing_provider" field.
func InvoicingProviderIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldInvoicingProvider))
}

// InvoicingProviderNotNil applies the NotNil predicate on the "invoicing_provider" field.
func InvoicingProviderNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldInvoicingProvider))
}

// InvoicingProviderConfigIsNil applies the IsNil predicate on the "invoicing_provider_config" field.
func InvoicingProviderConfigIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldInvoicingProviderConfig))
}

// InvoicingProviderConfigNotNil applies the NotNil predicate on the "invoicing_provider_config" field.
func InvoicingProviderConfigNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldInvoicingProviderConfig))
}

// PaymentProviderEQ applies the EQ predicate on the "payment_provider" field.
func PaymentProviderEQ(v provider.PaymentProvider) predicate.BillingCustomerOverride {
	vc := v
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldPaymentProvider, vc))
}

// PaymentProviderNEQ applies the NEQ predicate on the "payment_provider" field.
func PaymentProviderNEQ(v provider.PaymentProvider) predicate.BillingCustomerOverride {
	vc := v
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldPaymentProvider, vc))
}

// PaymentProviderIn applies the In predicate on the "payment_provider" field.
func PaymentProviderIn(vs ...provider.PaymentProvider) predicate.BillingCustomerOverride {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldPaymentProvider, v...))
}

// PaymentProviderNotIn applies the NotIn predicate on the "payment_provider" field.
func PaymentProviderNotIn(vs ...provider.PaymentProvider) predicate.BillingCustomerOverride {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldPaymentProvider, v...))
}

// PaymentProviderIsNil applies the IsNil predicate on the "payment_provider" field.
func PaymentProviderIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldPaymentProvider))
}

// PaymentProviderNotNil applies the NotNil predicate on the "payment_provider" field.
func PaymentProviderNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldPaymentProvider))
}

// PaymentProviderConfigIsNil applies the IsNil predicate on the "payment_provider_config" field.
func PaymentProviderConfigIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldPaymentProviderConfig))
}

// PaymentProviderConfigNotNil applies the NotNil predicate on the "payment_provider_config" field.
func PaymentProviderConfigNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldPaymentProviderConfig))
}

// WorkflowConfigIDEQ applies the EQ predicate on the "workflow_config_id" field.
func WorkflowConfigIDEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEQ(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDNEQ applies the NEQ predicate on the "workflow_config_id" field.
func WorkflowConfigIDNEQ(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNEQ(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDIn applies the In predicate on the "workflow_config_id" field.
func WorkflowConfigIDIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIn(FieldWorkflowConfigID, vs...))
}

// WorkflowConfigIDNotIn applies the NotIn predicate on the "workflow_config_id" field.
func WorkflowConfigIDNotIn(vs ...string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotIn(FieldWorkflowConfigID, vs...))
}

// WorkflowConfigIDGT applies the GT predicate on the "workflow_config_id" field.
func WorkflowConfigIDGT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGT(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDGTE applies the GTE predicate on the "workflow_config_id" field.
func WorkflowConfigIDGTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldGTE(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDLT applies the LT predicate on the "workflow_config_id" field.
func WorkflowConfigIDLT(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLT(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDLTE applies the LTE predicate on the "workflow_config_id" field.
func WorkflowConfigIDLTE(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldLTE(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDContains applies the Contains predicate on the "workflow_config_id" field.
func WorkflowConfigIDContains(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContains(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDHasPrefix applies the HasPrefix predicate on the "workflow_config_id" field.
func WorkflowConfigIDHasPrefix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasPrefix(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDHasSuffix applies the HasSuffix predicate on the "workflow_config_id" field.
func WorkflowConfigIDHasSuffix(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldHasSuffix(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDIsNil applies the IsNil predicate on the "workflow_config_id" field.
func WorkflowConfigIDIsNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldIsNull(FieldWorkflowConfigID))
}

// WorkflowConfigIDNotNil applies the NotNil predicate on the "workflow_config_id" field.
func WorkflowConfigIDNotNil() predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldNotNull(FieldWorkflowConfigID))
}

// WorkflowConfigIDEqualFold applies the EqualFold predicate on the "workflow_config_id" field.
func WorkflowConfigIDEqualFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldEqualFold(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDContainsFold applies the ContainsFold predicate on the "workflow_config_id" field.
func WorkflowConfigIDContainsFold(v string) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.FieldContainsFold(FieldWorkflowConfigID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingCustomerOverride) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingCustomerOverride) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingCustomerOverride) predicate.BillingCustomerOverride {
	return predicate.BillingCustomerOverride(sql.NotPredicates(p))
}

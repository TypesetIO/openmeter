// Code generated by ent, DO NOT EDIT.

package billinginvoice

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing/invoice"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
)

const (
	// Label holds the string label denoting the billinginvoice type in the database.
	Label = "billing_invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldBillingAddressCountry holds the string denoting the billing_address_country field in the database.
	FieldBillingAddressCountry = "billing_address_country"
	// FieldBillingAddressPostalCode holds the string denoting the billing_address_postal_code field in the database.
	FieldBillingAddressPostalCode = "billing_address_postal_code"
	// FieldBillingAddressState holds the string denoting the billing_address_state field in the database.
	FieldBillingAddressState = "billing_address_state"
	// FieldBillingAddressCity holds the string denoting the billing_address_city field in the database.
	FieldBillingAddressCity = "billing_address_city"
	// FieldBillingAddressLine1 holds the string denoting the billing_address_line1 field in the database.
	FieldBillingAddressLine1 = "billing_address_line1"
	// FieldBillingAddressLine2 holds the string denoting the billing_address_line2 field in the database.
	FieldBillingAddressLine2 = "billing_address_line2"
	// FieldBillingAddressPhoneNumber holds the string denoting the billing_address_phone_number field in the database.
	FieldBillingAddressPhoneNumber = "billing_address_phone_number"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldKeySeries holds the string denoting the key_series field in the database.
	FieldKeySeries = "key_series"
	// FieldKeyNumber holds the string denoting the key_number field in the database.
	FieldKeyNumber = "key_number"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldCustomerSnapshotTaken holds the string denoting the customer_snapshot_taken field in the database.
	FieldCustomerSnapshotTaken = "customer_snapshot_taken"
	// FieldCustomerName holds the string denoting the customer_name field in the database.
	FieldCustomerName = "customer_name"
	// FieldCustomerPrimaryEmail holds the string denoting the customer_primary_email field in the database.
	FieldCustomerPrimaryEmail = "customer_primary_email"
	// FieldBillingProfileID holds the string denoting the billing_profile_id field in the database.
	FieldBillingProfileID = "billing_profile_id"
	// FieldPrecedingInvoiceIds holds the string denoting the preceding_invoice_ids field in the database.
	FieldPrecedingInvoiceIds = "preceding_invoice_ids"
	// FieldIssuedAt holds the string denoting the issued_at field in the database.
	FieldIssuedAt = "issued_at"
	// FieldVoidedAt holds the string denoting the voided_at field in the database.
	FieldVoidedAt = "voided_at"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProviderConfig holds the string denoting the provider_config field in the database.
	FieldProviderConfig = "provider_config"
	// FieldWorkflowConfigID holds the string denoting the workflow_config_id field in the database.
	FieldWorkflowConfigID = "workflow_config_id"
	// FieldProviderReference holds the string denoting the provider_reference field in the database.
	FieldProviderReference = "provider_reference"
	// FieldPeriodStart holds the string denoting the period_start field in the database.
	FieldPeriodStart = "period_start"
	// FieldPeriodEnd holds the string denoting the period_end field in the database.
	FieldPeriodEnd = "period_end"
	// EdgeBillingProfile holds the string denoting the billing_profile edge name in mutations.
	EdgeBillingProfile = "billing_profile"
	// EdgeBillingWorkflowConfig holds the string denoting the billing_workflow_config edge name in mutations.
	EdgeBillingWorkflowConfig = "billing_workflow_config"
	// EdgeBillingInvoiceItems holds the string denoting the billing_invoice_items edge name in mutations.
	EdgeBillingInvoiceItems = "billing_invoice_items"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the billinginvoice in the database.
	Table = "billing_invoices"
	// BillingProfileTable is the table that holds the billing_profile relation/edge.
	BillingProfileTable = "billing_invoices"
	// BillingProfileInverseTable is the table name for the BillingProfile entity.
	// It exists in this package in order to avoid circular dependency with the "billingprofile" package.
	BillingProfileInverseTable = "billing_profiles"
	// BillingProfileColumn is the table column denoting the billing_profile relation/edge.
	BillingProfileColumn = "billing_profile_id"
	// BillingWorkflowConfigTable is the table that holds the billing_workflow_config relation/edge.
	BillingWorkflowConfigTable = "billing_invoices"
	// BillingWorkflowConfigInverseTable is the table name for the BillingWorkflowConfig entity.
	// It exists in this package in order to avoid circular dependency with the "billingworkflowconfig" package.
	BillingWorkflowConfigInverseTable = "billing_workflow_configs"
	// BillingWorkflowConfigColumn is the table column denoting the billing_workflow_config relation/edge.
	BillingWorkflowConfigColumn = "workflow_config_id"
	// BillingInvoiceItemsTable is the table that holds the billing_invoice_items relation/edge.
	BillingInvoiceItemsTable = "billing_invoice_items"
	// BillingInvoiceItemsInverseTable is the table name for the BillingInvoiceItem entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoiceitem" package.
	BillingInvoiceItemsInverseTable = "billing_invoice_items"
	// BillingInvoiceItemsColumn is the table column denoting the billing_invoice_items relation/edge.
	BillingInvoiceItemsColumn = "invoice_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "billing_invoices"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
)

// Columns holds all SQL columns for billinginvoice fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMetadata,
	FieldBillingAddressCountry,
	FieldBillingAddressPostalCode,
	FieldBillingAddressState,
	FieldBillingAddressCity,
	FieldBillingAddressLine1,
	FieldBillingAddressLine2,
	FieldBillingAddressPhoneNumber,
	FieldKey,
	FieldKeySeries,
	FieldKeyNumber,
	FieldType,
	FieldCustomerID,
	FieldCustomerSnapshotTaken,
	FieldCustomerName,
	FieldCustomerPrimaryEmail,
	FieldBillingProfileID,
	FieldPrecedingInvoiceIds,
	FieldIssuedAt,
	FieldVoidedAt,
	FieldCurrency,
	FieldTimezone,
	FieldDueDate,
	FieldStatus,
	FieldProviderConfig,
	FieldWorkflowConfigID,
	FieldProviderReference,
	FieldPeriodStart,
	FieldPeriodEnd,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// BillingAddressCountryValidator is a validator for the "billing_address_country" field. It is called by the builders before save.
	BillingAddressCountryValidator func(string) error
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// KeySeriesValidator is a validator for the "key_series" field. It is called by the builders before save.
	KeySeriesValidator func(string) error
	// KeyNumberValidator is a validator for the "key_number" field. It is called by the builders before save.
	KeyNumberValidator func(string) error
	// CustomerIDValidator is a validator for the "customer_id" field. It is called by the builders before save.
	CustomerIDValidator func(string) error
	// DefaultCustomerSnapshotTaken holds the default value on creation for the "customer_snapshot_taken" field.
	DefaultCustomerSnapshotTaken bool
	// BillingProfileIDValidator is a validator for the "billing_profile_id" field. It is called by the builders before save.
	BillingProfileIDValidator func(string) error
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// ValueScanner of all BillingInvoice fields.
	ValueScanner struct {
		ProviderConfig    field.TypeValueScanner[provider.Configuration]
		ProviderReference field.TypeValueScanner[provider.Reference]
	}
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type invoice.InvoiceType) error {
	switch _type {
	case "standard", "credit-note":
		return nil
	default:
		return fmt.Errorf("billinginvoice: invalid enum value for type field: %q", _type)
	}
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s invoice.InvoiceStatus) error {
	switch s {
	case "created", "draft", "draft_sync", "draft_sync_failed", "issuing", "issued", "issuing_failed", "manual_approval_needed":
		return nil
	default:
		return fmt.Errorf("billinginvoice: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the BillingInvoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByBillingAddressCountry orders the results by the billing_address_country field.
func ByBillingAddressCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressCountry, opts...).ToFunc()
}

// ByBillingAddressPostalCode orders the results by the billing_address_postal_code field.
func ByBillingAddressPostalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressPostalCode, opts...).ToFunc()
}

// ByBillingAddressState orders the results by the billing_address_state field.
func ByBillingAddressState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressState, opts...).ToFunc()
}

// ByBillingAddressCity orders the results by the billing_address_city field.
func ByBillingAddressCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressCity, opts...).ToFunc()
}

// ByBillingAddressLine1 orders the results by the billing_address_line1 field.
func ByBillingAddressLine1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressLine1, opts...).ToFunc()
}

// ByBillingAddressLine2 orders the results by the billing_address_line2 field.
func ByBillingAddressLine2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressLine2, opts...).ToFunc()
}

// ByBillingAddressPhoneNumber orders the results by the billing_address_phone_number field.
func ByBillingAddressPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddressPhoneNumber, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByKeySeries orders the results by the key_series field.
func ByKeySeries(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeySeries, opts...).ToFunc()
}

// ByKeyNumber orders the results by the key_number field.
func ByKeyNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyNumber, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByCustomerSnapshotTaken orders the results by the customer_snapshot_taken field.
func ByCustomerSnapshotTaken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerSnapshotTaken, opts...).ToFunc()
}

// ByCustomerName orders the results by the customer_name field.
func ByCustomerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerName, opts...).ToFunc()
}

// ByCustomerPrimaryEmail orders the results by the customer_primary_email field.
func ByCustomerPrimaryEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerPrimaryEmail, opts...).ToFunc()
}

// ByBillingProfileID orders the results by the billing_profile_id field.
func ByBillingProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingProfileID, opts...).ToFunc()
}

// ByIssuedAt orders the results by the issued_at field.
func ByIssuedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuedAt, opts...).ToFunc()
}

// ByVoidedAt orders the results by the voided_at field.
func ByVoidedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoidedAt, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProviderConfig orders the results by the provider_config field.
func ByProviderConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderConfig, opts...).ToFunc()
}

// ByWorkflowConfigID orders the results by the workflow_config_id field.
func ByWorkflowConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowConfigID, opts...).ToFunc()
}

// ByProviderReference orders the results by the provider_reference field.
func ByProviderReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderReference, opts...).ToFunc()
}

// ByPeriodStart orders the results by the period_start field.
func ByPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodStart, opts...).ToFunc()
}

// ByPeriodEnd orders the results by the period_end field.
func ByPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodEnd, opts...).ToFunc()
}

// ByBillingProfileField orders the results by billing_profile field.
func ByBillingProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingWorkflowConfigField orders the results by billing_workflow_config field.
func ByBillingWorkflowConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingWorkflowConfigStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingInvoiceItemsCount orders the results by billing_invoice_items count.
func ByBillingInvoiceItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingInvoiceItemsStep(), opts...)
	}
}

// ByBillingInvoiceItems orders the results by billing_invoice_items terms.
func ByBillingInvoiceItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newBillingProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BillingProfileTable, BillingProfileColumn),
	)
}
func newBillingWorkflowConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingWorkflowConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BillingWorkflowConfigTable, BillingWorkflowConfigColumn),
	)
}
func newBillingInvoiceItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingInvoiceItemsTable, BillingInvoiceItemsColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}

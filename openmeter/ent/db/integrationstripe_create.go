// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/integrationstripe"
)

// IntegrationStripeCreate is the builder for creating a IntegrationStripe entity.
type IntegrationStripeCreate struct {
	config
	mutation *IntegrationStripeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (isc *IntegrationStripeCreate) SetNamespace(s string) *IntegrationStripeCreate {
	isc.mutation.SetNamespace(s)
	return isc
}

// SetCreatedAt sets the "created_at" field.
func (isc *IntegrationStripeCreate) SetCreatedAt(t time.Time) *IntegrationStripeCreate {
	isc.mutation.SetCreatedAt(t)
	return isc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (isc *IntegrationStripeCreate) SetNillableCreatedAt(t *time.Time) *IntegrationStripeCreate {
	if t != nil {
		isc.SetCreatedAt(*t)
	}
	return isc
}

// SetUpdatedAt sets the "updated_at" field.
func (isc *IntegrationStripeCreate) SetUpdatedAt(t time.Time) *IntegrationStripeCreate {
	isc.mutation.SetUpdatedAt(t)
	return isc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (isc *IntegrationStripeCreate) SetNillableUpdatedAt(t *time.Time) *IntegrationStripeCreate {
	if t != nil {
		isc.SetUpdatedAt(*t)
	}
	return isc
}

// SetDeletedAt sets the "deleted_at" field.
func (isc *IntegrationStripeCreate) SetDeletedAt(t time.Time) *IntegrationStripeCreate {
	isc.mutation.SetDeletedAt(t)
	return isc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (isc *IntegrationStripeCreate) SetNillableDeletedAt(t *time.Time) *IntegrationStripeCreate {
	if t != nil {
		isc.SetDeletedAt(*t)
	}
	return isc
}

// SetAppID sets the "app_id" field.
func (isc *IntegrationStripeCreate) SetAppID(s string) *IntegrationStripeCreate {
	isc.mutation.SetAppID(s)
	return isc
}

// SetStripeAccountID sets the "stripe_account_id" field.
func (isc *IntegrationStripeCreate) SetStripeAccountID(s string) *IntegrationStripeCreate {
	isc.mutation.SetStripeAccountID(s)
	return isc
}

// SetNillableStripeAccountID sets the "stripe_account_id" field if the given value is not nil.
func (isc *IntegrationStripeCreate) SetNillableStripeAccountID(s *string) *IntegrationStripeCreate {
	if s != nil {
		isc.SetStripeAccountID(*s)
	}
	return isc
}

// SetStripeLivemode sets the "stripe_livemode" field.
func (isc *IntegrationStripeCreate) SetStripeLivemode(b bool) *IntegrationStripeCreate {
	isc.mutation.SetStripeLivemode(b)
	return isc
}

// SetNillableStripeLivemode sets the "stripe_livemode" field if the given value is not nil.
func (isc *IntegrationStripeCreate) SetNillableStripeLivemode(b *bool) *IntegrationStripeCreate {
	if b != nil {
		isc.SetStripeLivemode(*b)
	}
	return isc
}

// Mutation returns the IntegrationStripeMutation object of the builder.
func (isc *IntegrationStripeCreate) Mutation() *IntegrationStripeMutation {
	return isc.mutation
}

// Save creates the IntegrationStripe in the database.
func (isc *IntegrationStripeCreate) Save(ctx context.Context) (*IntegrationStripe, error) {
	isc.defaults()
	return withHooks(ctx, isc.sqlSave, isc.mutation, isc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (isc *IntegrationStripeCreate) SaveX(ctx context.Context) *IntegrationStripe {
	v, err := isc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isc *IntegrationStripeCreate) Exec(ctx context.Context) error {
	_, err := isc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isc *IntegrationStripeCreate) ExecX(ctx context.Context) {
	if err := isc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isc *IntegrationStripeCreate) defaults() {
	if _, ok := isc.mutation.CreatedAt(); !ok {
		v := integrationstripe.DefaultCreatedAt()
		isc.mutation.SetCreatedAt(v)
	}
	if _, ok := isc.mutation.UpdatedAt(); !ok {
		v := integrationstripe.DefaultUpdatedAt()
		isc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isc *IntegrationStripeCreate) check() error {
	if _, ok := isc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "IntegrationStripe.namespace"`)}
	}
	if v, ok := isc.mutation.Namespace(); ok {
		if err := integrationstripe.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "IntegrationStripe.namespace": %w`, err)}
		}
	}
	if _, ok := isc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "IntegrationStripe.created_at"`)}
	}
	if _, ok := isc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "IntegrationStripe.updated_at"`)}
	}
	if _, ok := isc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`db: missing required field "IntegrationStripe.app_id"`)}
	}
	return nil
}

func (isc *IntegrationStripeCreate) sqlSave(ctx context.Context) (*IntegrationStripe, error) {
	if err := isc.check(); err != nil {
		return nil, err
	}
	_node, _spec := isc.createSpec()
	if err := sqlgraph.CreateNode(ctx, isc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	isc.mutation.id = &_node.ID
	isc.mutation.done = true
	return _node, nil
}

func (isc *IntegrationStripeCreate) createSpec() (*IntegrationStripe, *sqlgraph.CreateSpec) {
	var (
		_node = &IntegrationStripe{config: isc.config}
		_spec = sqlgraph.NewCreateSpec(integrationstripe.Table, sqlgraph.NewFieldSpec(integrationstripe.FieldID, field.TypeInt))
	)
	_spec.OnConflict = isc.conflict
	if value, ok := isc.mutation.Namespace(); ok {
		_spec.SetField(integrationstripe.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := isc.mutation.CreatedAt(); ok {
		_spec.SetField(integrationstripe.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := isc.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationstripe.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := isc.mutation.DeletedAt(); ok {
		_spec.SetField(integrationstripe.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := isc.mutation.AppID(); ok {
		_spec.SetField(integrationstripe.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := isc.mutation.StripeAccountID(); ok {
		_spec.SetField(integrationstripe.FieldStripeAccountID, field.TypeString, value)
		_node.StripeAccountID = &value
	}
	if value, ok := isc.mutation.StripeLivemode(); ok {
		_spec.SetField(integrationstripe.FieldStripeLivemode, field.TypeBool, value)
		_node.StripeLivemode = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IntegrationStripe.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IntegrationStripeUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (isc *IntegrationStripeCreate) OnConflict(opts ...sql.ConflictOption) *IntegrationStripeUpsertOne {
	isc.conflict = opts
	return &IntegrationStripeUpsertOne{
		create: isc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IntegrationStripe.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (isc *IntegrationStripeCreate) OnConflictColumns(columns ...string) *IntegrationStripeUpsertOne {
	isc.conflict = append(isc.conflict, sql.ConflictColumns(columns...))
	return &IntegrationStripeUpsertOne{
		create: isc,
	}
}

type (
	// IntegrationStripeUpsertOne is the builder for "upsert"-ing
	//  one IntegrationStripe node.
	IntegrationStripeUpsertOne struct {
		create *IntegrationStripeCreate
	}

	// IntegrationStripeUpsert is the "OnConflict" setter.
	IntegrationStripeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IntegrationStripeUpsert) SetUpdatedAt(v time.Time) *IntegrationStripeUpsert {
	u.Set(integrationstripe.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IntegrationStripeUpsert) UpdateUpdatedAt() *IntegrationStripeUpsert {
	u.SetExcluded(integrationstripe.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IntegrationStripeUpsert) SetDeletedAt(v time.Time) *IntegrationStripeUpsert {
	u.Set(integrationstripe.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IntegrationStripeUpsert) UpdateDeletedAt() *IntegrationStripeUpsert {
	u.SetExcluded(integrationstripe.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IntegrationStripeUpsert) ClearDeletedAt() *IntegrationStripeUpsert {
	u.SetNull(integrationstripe.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IntegrationStripe.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IntegrationStripeUpsertOne) UpdateNewValues() *IntegrationStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(integrationstripe.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(integrationstripe.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(integrationstripe.FieldAppID)
		}
		if _, exists := u.create.mutation.StripeAccountID(); exists {
			s.SetIgnore(integrationstripe.FieldStripeAccountID)
		}
		if _, exists := u.create.mutation.StripeLivemode(); exists {
			s.SetIgnore(integrationstripe.FieldStripeLivemode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IntegrationStripe.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IntegrationStripeUpsertOne) Ignore() *IntegrationStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IntegrationStripeUpsertOne) DoNothing() *IntegrationStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IntegrationStripeCreate.OnConflict
// documentation for more info.
func (u *IntegrationStripeUpsertOne) Update(set func(*IntegrationStripeUpsert)) *IntegrationStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IntegrationStripeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IntegrationStripeUpsertOne) SetUpdatedAt(v time.Time) *IntegrationStripeUpsertOne {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IntegrationStripeUpsertOne) UpdateUpdatedAt() *IntegrationStripeUpsertOne {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IntegrationStripeUpsertOne) SetDeletedAt(v time.Time) *IntegrationStripeUpsertOne {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IntegrationStripeUpsertOne) UpdateDeletedAt() *IntegrationStripeUpsertOne {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IntegrationStripeUpsertOne) ClearDeletedAt() *IntegrationStripeUpsertOne {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *IntegrationStripeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for IntegrationStripeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IntegrationStripeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IntegrationStripeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IntegrationStripeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IntegrationStripeCreateBulk is the builder for creating many IntegrationStripe entities in bulk.
type IntegrationStripeCreateBulk struct {
	config
	err      error
	builders []*IntegrationStripeCreate
	conflict []sql.ConflictOption
}

// Save creates the IntegrationStripe entities in the database.
func (iscb *IntegrationStripeCreateBulk) Save(ctx context.Context) ([]*IntegrationStripe, error) {
	if iscb.err != nil {
		return nil, iscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iscb.builders))
	nodes := make([]*IntegrationStripe, len(iscb.builders))
	mutators := make([]Mutator, len(iscb.builders))
	for i := range iscb.builders {
		func(i int, root context.Context) {
			builder := iscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IntegrationStripeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iscb *IntegrationStripeCreateBulk) SaveX(ctx context.Context) []*IntegrationStripe {
	v, err := iscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscb *IntegrationStripeCreateBulk) Exec(ctx context.Context) error {
	_, err := iscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscb *IntegrationStripeCreateBulk) ExecX(ctx context.Context) {
	if err := iscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IntegrationStripe.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IntegrationStripeUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (iscb *IntegrationStripeCreateBulk) OnConflict(opts ...sql.ConflictOption) *IntegrationStripeUpsertBulk {
	iscb.conflict = opts
	return &IntegrationStripeUpsertBulk{
		create: iscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IntegrationStripe.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iscb *IntegrationStripeCreateBulk) OnConflictColumns(columns ...string) *IntegrationStripeUpsertBulk {
	iscb.conflict = append(iscb.conflict, sql.ConflictColumns(columns...))
	return &IntegrationStripeUpsertBulk{
		create: iscb,
	}
}

// IntegrationStripeUpsertBulk is the builder for "upsert"-ing
// a bulk of IntegrationStripe nodes.
type IntegrationStripeUpsertBulk struct {
	create *IntegrationStripeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IntegrationStripe.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IntegrationStripeUpsertBulk) UpdateNewValues() *IntegrationStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(integrationstripe.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(integrationstripe.FieldCreatedAt)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(integrationstripe.FieldAppID)
			}
			if _, exists := b.mutation.StripeAccountID(); exists {
				s.SetIgnore(integrationstripe.FieldStripeAccountID)
			}
			if _, exists := b.mutation.StripeLivemode(); exists {
				s.SetIgnore(integrationstripe.FieldStripeLivemode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IntegrationStripe.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IntegrationStripeUpsertBulk) Ignore() *IntegrationStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IntegrationStripeUpsertBulk) DoNothing() *IntegrationStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IntegrationStripeCreateBulk.OnConflict
// documentation for more info.
func (u *IntegrationStripeUpsertBulk) Update(set func(*IntegrationStripeUpsert)) *IntegrationStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IntegrationStripeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IntegrationStripeUpsertBulk) SetUpdatedAt(v time.Time) *IntegrationStripeUpsertBulk {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IntegrationStripeUpsertBulk) UpdateUpdatedAt() *IntegrationStripeUpsertBulk {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IntegrationStripeUpsertBulk) SetDeletedAt(v time.Time) *IntegrationStripeUpsertBulk {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IntegrationStripeUpsertBulk) UpdateDeletedAt() *IntegrationStripeUpsertBulk {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IntegrationStripeUpsertBulk) ClearDeletedAt() *IntegrationStripeUpsertBulk {
	return u.Update(func(s *IntegrationStripeUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *IntegrationStripeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the IntegrationStripeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for IntegrationStripeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IntegrationStripeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

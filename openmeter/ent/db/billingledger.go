// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingLedger is the model entity for the BillingLedger schema.
type BillingLedger struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingLedgerQuery when eager-loading is set.
	Edges        BillingLedgerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingLedgerEdges holds the relations/edges for other nodes in the graph.
type BillingLedgerEdges struct {
	// Subledgers holds the value of the subledgers edge.
	Subledgers []*BillingSubledger `json:"subledgers,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*BillingSubledgerTransaction `json:"transactions,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SubledgersOrErr returns the Subledgers value or an error if the edge
// was not loaded in eager-loading.
func (e BillingLedgerEdges) SubledgersOrErr() ([]*BillingSubledger, error) {
	if e.loadedTypes[0] {
		return e.Subledgers, nil
	}
	return nil, &NotLoadedError{edge: "subledgers"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e BillingLedgerEdges) TransactionsOrErr() ([]*BillingSubledgerTransaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingLedgerEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingLedger) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingledger.FieldID, billingledger.FieldNamespace, billingledger.FieldCustomerID, billingledger.FieldCurrency:
			values[i] = new(sql.NullString)
		case billingledger.FieldCreatedAt, billingledger.FieldUpdatedAt, billingledger.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingLedger fields.
func (bl *BillingLedger) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingledger.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bl.ID = value.String
			}
		case billingledger.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bl.Namespace = value.String
			}
		case billingledger.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bl.CreatedAt = value.Time
			}
		case billingledger.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bl.UpdatedAt = value.Time
			}
		case billingledger.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bl.DeletedAt = new(time.Time)
				*bl.DeletedAt = value.Time
			}
		case billingledger.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bl.CustomerID = value.String
			}
		case billingledger.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				bl.Currency = currencyx.Code(value.String)
			}
		default:
			bl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingLedger.
// This includes values selected through modifiers, order, etc.
func (bl *BillingLedger) Value(name string) (ent.Value, error) {
	return bl.selectValues.Get(name)
}

// QuerySubledgers queries the "subledgers" edge of the BillingLedger entity.
func (bl *BillingLedger) QuerySubledgers() *BillingSubledgerQuery {
	return NewBillingLedgerClient(bl.config).QuerySubledgers(bl)
}

// QueryTransactions queries the "transactions" edge of the BillingLedger entity.
func (bl *BillingLedger) QueryTransactions() *BillingSubledgerTransactionQuery {
	return NewBillingLedgerClient(bl.config).QueryTransactions(bl)
}

// QueryCustomer queries the "customer" edge of the BillingLedger entity.
func (bl *BillingLedger) QueryCustomer() *CustomerQuery {
	return NewBillingLedgerClient(bl.config).QueryCustomer(bl)
}

// Update returns a builder for updating this BillingLedger.
// Note that you need to call BillingLedger.Unwrap() before calling this method if this BillingLedger
// was returned from a transaction, and the transaction was committed or rolled back.
func (bl *BillingLedger) Update() *BillingLedgerUpdateOne {
	return NewBillingLedgerClient(bl.config).UpdateOne(bl)
}

// Unwrap unwraps the BillingLedger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bl *BillingLedger) Unwrap() *BillingLedger {
	_tx, ok := bl.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingLedger is not a transactional entity")
	}
	bl.config.driver = _tx.drv
	return bl
}

// String implements the fmt.Stringer.
func (bl *BillingLedger) String() string {
	var builder strings.Builder
	builder.WriteString("BillingLedger(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bl.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bl.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(bl.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", bl.Currency))
	builder.WriteByte(')')
	return builder.String()
}

// BillingLedgers is a parsable slice of BillingLedger.
type BillingLedgers []*BillingLedger

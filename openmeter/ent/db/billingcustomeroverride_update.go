// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingCustomerOverrideUpdate is the builder for updating BillingCustomerOverride entities.
type BillingCustomerOverrideUpdate struct {
	config
	hooks    []Hook
	mutation *BillingCustomerOverrideMutation
}

// Where appends a list predicates to the BillingCustomerOverrideUpdate builder.
func (bcou *BillingCustomerOverrideUpdate) Where(ps ...predicate.BillingCustomerOverride) *BillingCustomerOverrideUpdate {
	bcou.mutation.Where(ps...)
	return bcou
}

// SetUpdatedAt sets the "updated_at" field.
func (bcou *BillingCustomerOverrideUpdate) SetUpdatedAt(t time.Time) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetUpdatedAt(t)
	return bcou
}

// SetDeletedAt sets the "deleted_at" field.
func (bcou *BillingCustomerOverrideUpdate) SetDeletedAt(t time.Time) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetDeletedAt(t)
	return bcou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableDeletedAt(t *time.Time) *BillingCustomerOverrideUpdate {
	if t != nil {
		bcou.SetDeletedAt(*t)
	}
	return bcou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcou *BillingCustomerOverrideUpdate) ClearDeletedAt() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearDeletedAt()
	return bcou
}

// SetCustomerID sets the "customer_id" field.
func (bcou *BillingCustomerOverrideUpdate) SetCustomerID(s string) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetCustomerID(s)
	return bcou
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableCustomerID(s *string) *BillingCustomerOverrideUpdate {
	if s != nil {
		bcou.SetCustomerID(*s)
	}
	return bcou
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (bcou *BillingCustomerOverrideUpdate) SetBillingProfileID(s string) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetBillingProfileID(s)
	return bcou
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableBillingProfileID(s *string) *BillingCustomerOverrideUpdate {
	if s != nil {
		bcou.SetBillingProfileID(*s)
	}
	return bcou
}

// SetTaxProvider sets the "tax_provider" field.
func (bcou *BillingCustomerOverrideUpdate) SetTaxProvider(pp provider.TaxProvider) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetTaxProvider(pp)
	return bcou
}

// SetNillableTaxProvider sets the "tax_provider" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableTaxProvider(pp *provider.TaxProvider) *BillingCustomerOverrideUpdate {
	if pp != nil {
		bcou.SetTaxProvider(*pp)
	}
	return bcou
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (bcou *BillingCustomerOverrideUpdate) ClearTaxProvider() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearTaxProvider()
	return bcou
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (bcou *BillingCustomerOverrideUpdate) SetTaxProviderConfig(pc *provider.TaxConfiguration) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetTaxProviderConfig(pc)
	return bcou
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (bcou *BillingCustomerOverrideUpdate) ClearTaxProviderConfig() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearTaxProviderConfig()
	return bcou
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoicingProvider(pp provider.InvoicingProvider) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetInvoicingProvider(pp)
	return bcou
}

// SetNillableInvoicingProvider sets the "invoicing_provider" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoicingProvider(pp *provider.InvoicingProvider) *BillingCustomerOverrideUpdate {
	if pp != nil {
		bcou.SetInvoicingProvider(*pp)
	}
	return bcou
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoicingProvider() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoicingProvider()
	return bcou
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoicingProviderConfig(pc *provider.InvoicingConfiguration) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetInvoicingProviderConfig(pc)
	return bcou
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoicingProviderConfig() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoicingProviderConfig()
	return bcou
}

// SetPaymentProvider sets the "payment_provider" field.
func (bcou *BillingCustomerOverrideUpdate) SetPaymentProvider(pp provider.PaymentProvider) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetPaymentProvider(pp)
	return bcou
}

// SetNillablePaymentProvider sets the "payment_provider" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillablePaymentProvider(pp *provider.PaymentProvider) *BillingCustomerOverrideUpdate {
	if pp != nil {
		bcou.SetPaymentProvider(*pp)
	}
	return bcou
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (bcou *BillingCustomerOverrideUpdate) ClearPaymentProvider() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearPaymentProvider()
	return bcou
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (bcou *BillingCustomerOverrideUpdate) SetPaymentProviderConfig(pc *provider.PaymentConfiguration) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetPaymentProviderConfig(pc)
	return bcou
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (bcou *BillingCustomerOverrideUpdate) ClearPaymentProviderConfig() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearPaymentProviderConfig()
	return bcou
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bcou *BillingCustomerOverrideUpdate) SetWorkflowConfigID(s string) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetWorkflowConfigID(s)
	return bcou
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableWorkflowConfigID(s *string) *BillingCustomerOverrideUpdate {
	if s != nil {
		bcou.SetWorkflowConfigID(*s)
	}
	return bcou
}

// ClearWorkflowConfigID clears the value of the "workflow_config_id" field.
func (bcou *BillingCustomerOverrideUpdate) ClearWorkflowConfigID() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearWorkflowConfigID()
	return bcou
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (bcou *BillingCustomerOverrideUpdate) Mutation() *BillingCustomerOverrideMutation {
	return bcou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcou *BillingCustomerOverrideUpdate) Save(ctx context.Context) (int, error) {
	bcou.defaults()
	return withHooks(ctx, bcou.sqlSave, bcou.mutation, bcou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcou *BillingCustomerOverrideUpdate) SaveX(ctx context.Context) int {
	affected, err := bcou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcou *BillingCustomerOverrideUpdate) Exec(ctx context.Context) error {
	_, err := bcou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcou *BillingCustomerOverrideUpdate) ExecX(ctx context.Context) {
	if err := bcou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcou *BillingCustomerOverrideUpdate) defaults() {
	if _, ok := bcou.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.UpdateDefaultUpdatedAt()
		bcou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcou *BillingCustomerOverrideUpdate) check() error {
	if v, ok := bcou.mutation.CustomerID(); ok {
		if err := billingcustomeroverride.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.customer_id": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.BillingProfileID(); ok {
		if err := billingcustomeroverride.BillingProfileIDValidator(v); err != nil {
			return &ValidationError{Name: "billing_profile_id", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.billing_profile_id": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.TaxProvider(); ok {
		if err := billingcustomeroverride.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.tax_provider": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.TaxProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.tax_provider_config": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.InvoicingProvider(); ok {
		if err := billingcustomeroverride.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoicing_provider": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.InvoicingProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoicing_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoicing_provider_config": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.PaymentProvider(); ok {
		if err := billingcustomeroverride.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.payment_provider": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.PaymentProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "payment_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.payment_provider_config": %w`, err)}
		}
	}
	return nil
}

func (bcou *BillingCustomerOverrideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcustomeroverride.Table, billingcustomeroverride.Columns, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	if ps := bcou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcou.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcou.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
	}
	if bcou.mutation.DeletedAtCleared() {
		_spec.ClearField(billingcustomeroverride.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bcou.mutation.CustomerID(); ok {
		_spec.SetField(billingcustomeroverride.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := bcou.mutation.BillingProfileID(); ok {
		_spec.SetField(billingcustomeroverride.FieldBillingProfileID, field.TypeString, value)
	}
	if value, ok := bcou.mutation.TaxProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldTaxProvider, field.TypeEnum, value)
	}
	if bcou.mutation.TaxProviderCleared() {
		_spec.ClearField(billingcustomeroverride.FieldTaxProvider, field.TypeEnum)
	}
	if value, ok := bcou.mutation.TaxProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.TaxProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billingcustomeroverride.FieldTaxProviderConfig, field.TypeString, vv)
	}
	if bcou.mutation.TaxProviderConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldTaxProviderConfig, field.TypeString)
	}
	if value, ok := bcou.mutation.InvoicingProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoicingProvider, field.TypeEnum, value)
	}
	if bcou.mutation.InvoicingProviderCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoicingProvider, field.TypeEnum)
	}
	if value, ok := bcou.mutation.InvoicingProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.InvoicingProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billingcustomeroverride.FieldInvoicingProviderConfig, field.TypeString, vv)
	}
	if bcou.mutation.InvoicingProviderConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoicingProviderConfig, field.TypeString)
	}
	if value, ok := bcou.mutation.PaymentProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldPaymentProvider, field.TypeEnum, value)
	}
	if bcou.mutation.PaymentProviderCleared() {
		_spec.ClearField(billingcustomeroverride.FieldPaymentProvider, field.TypeEnum)
	}
	if value, ok := bcou.mutation.PaymentProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.PaymentProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billingcustomeroverride.FieldPaymentProviderConfig, field.TypeString, vv)
	}
	if bcou.mutation.PaymentProviderConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldPaymentProviderConfig, field.TypeString)
	}
	if value, ok := bcou.mutation.WorkflowConfigID(); ok {
		_spec.SetField(billingcustomeroverride.FieldWorkflowConfigID, field.TypeString, value)
	}
	if bcou.mutation.WorkflowConfigIDCleared() {
		_spec.ClearField(billingcustomeroverride.FieldWorkflowConfigID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcustomeroverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcou.mutation.done = true
	return n, nil
}

// BillingCustomerOverrideUpdateOne is the builder for updating a single BillingCustomerOverride entity.
type BillingCustomerOverrideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingCustomerOverrideMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetUpdatedAt(t time.Time) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetUpdatedAt(t)
	return bcouo
}

// SetDeletedAt sets the "deleted_at" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetDeletedAt(t time.Time) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetDeletedAt(t)
	return bcouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingCustomerOverrideUpdateOne {
	if t != nil {
		bcouo.SetDeletedAt(*t)
	}
	return bcouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearDeletedAt() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearDeletedAt()
	return bcouo
}

// SetCustomerID sets the "customer_id" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetCustomerID(s string) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetCustomerID(s)
	return bcouo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableCustomerID(s *string) *BillingCustomerOverrideUpdateOne {
	if s != nil {
		bcouo.SetCustomerID(*s)
	}
	return bcouo
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetBillingProfileID(s string) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetBillingProfileID(s)
	return bcouo
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableBillingProfileID(s *string) *BillingCustomerOverrideUpdateOne {
	if s != nil {
		bcouo.SetBillingProfileID(*s)
	}
	return bcouo
}

// SetTaxProvider sets the "tax_provider" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetTaxProvider(pp provider.TaxProvider) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetTaxProvider(pp)
	return bcouo
}

// SetNillableTaxProvider sets the "tax_provider" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableTaxProvider(pp *provider.TaxProvider) *BillingCustomerOverrideUpdateOne {
	if pp != nil {
		bcouo.SetTaxProvider(*pp)
	}
	return bcouo
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearTaxProvider() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearTaxProvider()
	return bcouo
}

// SetTaxProviderConfig sets the "tax_provider_config" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetTaxProviderConfig(pc *provider.TaxConfiguration) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetTaxProviderConfig(pc)
	return bcouo
}

// ClearTaxProviderConfig clears the value of the "tax_provider_config" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearTaxProviderConfig() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearTaxProviderConfig()
	return bcouo
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoicingProvider(pp provider.InvoicingProvider) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetInvoicingProvider(pp)
	return bcouo
}

// SetNillableInvoicingProvider sets the "invoicing_provider" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoicingProvider(pp *provider.InvoicingProvider) *BillingCustomerOverrideUpdateOne {
	if pp != nil {
		bcouo.SetInvoicingProvider(*pp)
	}
	return bcouo
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoicingProvider() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoicingProvider()
	return bcouo
}

// SetInvoicingProviderConfig sets the "invoicing_provider_config" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoicingProviderConfig(pc *provider.InvoicingConfiguration) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetInvoicingProviderConfig(pc)
	return bcouo
}

// ClearInvoicingProviderConfig clears the value of the "invoicing_provider_config" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoicingProviderConfig() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoicingProviderConfig()
	return bcouo
}

// SetPaymentProvider sets the "payment_provider" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetPaymentProvider(pp provider.PaymentProvider) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetPaymentProvider(pp)
	return bcouo
}

// SetNillablePaymentProvider sets the "payment_provider" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillablePaymentProvider(pp *provider.PaymentProvider) *BillingCustomerOverrideUpdateOne {
	if pp != nil {
		bcouo.SetPaymentProvider(*pp)
	}
	return bcouo
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearPaymentProvider() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearPaymentProvider()
	return bcouo
}

// SetPaymentProviderConfig sets the "payment_provider_config" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetPaymentProviderConfig(pc *provider.PaymentConfiguration) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetPaymentProviderConfig(pc)
	return bcouo
}

// ClearPaymentProviderConfig clears the value of the "payment_provider_config" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearPaymentProviderConfig() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearPaymentProviderConfig()
	return bcouo
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetWorkflowConfigID(s string) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetWorkflowConfigID(s)
	return bcouo
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableWorkflowConfigID(s *string) *BillingCustomerOverrideUpdateOne {
	if s != nil {
		bcouo.SetWorkflowConfigID(*s)
	}
	return bcouo
}

// ClearWorkflowConfigID clears the value of the "workflow_config_id" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearWorkflowConfigID() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearWorkflowConfigID()
	return bcouo
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (bcouo *BillingCustomerOverrideUpdateOne) Mutation() *BillingCustomerOverrideMutation {
	return bcouo.mutation
}

// Where appends a list predicates to the BillingCustomerOverrideUpdate builder.
func (bcouo *BillingCustomerOverrideUpdateOne) Where(ps ...predicate.BillingCustomerOverride) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.Where(ps...)
	return bcouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcouo *BillingCustomerOverrideUpdateOne) Select(field string, fields ...string) *BillingCustomerOverrideUpdateOne {
	bcouo.fields = append([]string{field}, fields...)
	return bcouo
}

// Save executes the query and returns the updated BillingCustomerOverride entity.
func (bcouo *BillingCustomerOverrideUpdateOne) Save(ctx context.Context) (*BillingCustomerOverride, error) {
	bcouo.defaults()
	return withHooks(ctx, bcouo.sqlSave, bcouo.mutation, bcouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcouo *BillingCustomerOverrideUpdateOne) SaveX(ctx context.Context) *BillingCustomerOverride {
	node, err := bcouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcouo *BillingCustomerOverrideUpdateOne) Exec(ctx context.Context) error {
	_, err := bcouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcouo *BillingCustomerOverrideUpdateOne) ExecX(ctx context.Context) {
	if err := bcouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcouo *BillingCustomerOverrideUpdateOne) defaults() {
	if _, ok := bcouo.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.UpdateDefaultUpdatedAt()
		bcouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcouo *BillingCustomerOverrideUpdateOne) check() error {
	if v, ok := bcouo.mutation.CustomerID(); ok {
		if err := billingcustomeroverride.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.customer_id": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.BillingProfileID(); ok {
		if err := billingcustomeroverride.BillingProfileIDValidator(v); err != nil {
			return &ValidationError{Name: "billing_profile_id", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.billing_profile_id": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.TaxProvider(); ok {
		if err := billingcustomeroverride.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.tax_provider": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.TaxProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.tax_provider_config": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.InvoicingProvider(); ok {
		if err := billingcustomeroverride.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoicing_provider": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.InvoicingProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoicing_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoicing_provider_config": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.PaymentProvider(); ok {
		if err := billingcustomeroverride.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.payment_provider": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.PaymentProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "payment_provider_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.payment_provider_config": %w`, err)}
		}
	}
	return nil
}

func (bcouo *BillingCustomerOverrideUpdateOne) sqlSave(ctx context.Context) (_node *BillingCustomerOverride, err error) {
	if err := bcouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcustomeroverride.Table, billingcustomeroverride.Columns, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	id, ok := bcouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingCustomerOverride.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingcustomeroverride.FieldID)
		for _, f := range fields {
			if !billingcustomeroverride.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingcustomeroverride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcouo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcouo.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
	}
	if bcouo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingcustomeroverride.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bcouo.mutation.CustomerID(); ok {
		_spec.SetField(billingcustomeroverride.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := bcouo.mutation.BillingProfileID(); ok {
		_spec.SetField(billingcustomeroverride.FieldBillingProfileID, field.TypeString, value)
	}
	if value, ok := bcouo.mutation.TaxProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldTaxProvider, field.TypeEnum, value)
	}
	if bcouo.mutation.TaxProviderCleared() {
		_spec.ClearField(billingcustomeroverride.FieldTaxProvider, field.TypeEnum)
	}
	if value, ok := bcouo.mutation.TaxProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.TaxProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billingcustomeroverride.FieldTaxProviderConfig, field.TypeString, vv)
	}
	if bcouo.mutation.TaxProviderConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldTaxProviderConfig, field.TypeString)
	}
	if value, ok := bcouo.mutation.InvoicingProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoicingProvider, field.TypeEnum, value)
	}
	if bcouo.mutation.InvoicingProviderCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoicingProvider, field.TypeEnum)
	}
	if value, ok := bcouo.mutation.InvoicingProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.InvoicingProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billingcustomeroverride.FieldInvoicingProviderConfig, field.TypeString, vv)
	}
	if bcouo.mutation.InvoicingProviderConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoicingProviderConfig, field.TypeString)
	}
	if value, ok := bcouo.mutation.PaymentProvider(); ok {
		_spec.SetField(billingcustomeroverride.FieldPaymentProvider, field.TypeEnum, value)
	}
	if bcouo.mutation.PaymentProviderCleared() {
		_spec.ClearField(billingcustomeroverride.FieldPaymentProvider, field.TypeEnum)
	}
	if value, ok := bcouo.mutation.PaymentProviderConfig(); ok {
		vv, err := billingcustomeroverride.ValueScanner.PaymentProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billingcustomeroverride.FieldPaymentProviderConfig, field.TypeString, vv)
	}
	if bcouo.mutation.PaymentProviderConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldPaymentProviderConfig, field.TypeString)
	}
	if value, ok := bcouo.mutation.WorkflowConfigID(); ok {
		_spec.SetField(billingcustomeroverride.FieldWorkflowConfigID, field.TypeString, value)
	}
	if bcouo.mutation.WorkflowConfigIDCleared() {
		_spec.ClearField(billingcustomeroverride.FieldWorkflowConfigID, field.TypeString)
	}
	_node = &BillingCustomerOverride{config: bcouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcustomeroverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcouo.mutation.done = true
	return _node, nil
}

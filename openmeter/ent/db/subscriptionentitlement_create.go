// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionentitlement"
)

// SubscriptionEntitlementCreate is the builder for creating a SubscriptionEntitlement entity.
type SubscriptionEntitlementCreate struct {
	config
	mutation *SubscriptionEntitlementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (sec *SubscriptionEntitlementCreate) SetNamespace(s string) *SubscriptionEntitlementCreate {
	sec.mutation.SetNamespace(s)
	return sec
}

// SetCreatedAt sets the "created_at" field.
func (sec *SubscriptionEntitlementCreate) SetCreatedAt(t time.Time) *SubscriptionEntitlementCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sec *SubscriptionEntitlementCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionEntitlementCreate {
	if t != nil {
		sec.SetCreatedAt(*t)
	}
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SubscriptionEntitlementCreate) SetUpdatedAt(t time.Time) *SubscriptionEntitlementCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sec *SubscriptionEntitlementCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionEntitlementCreate {
	if t != nil {
		sec.SetUpdatedAt(*t)
	}
	return sec
}

// SetDeletedAt sets the "deleted_at" field.
func (sec *SubscriptionEntitlementCreate) SetDeletedAt(t time.Time) *SubscriptionEntitlementCreate {
	sec.mutation.SetDeletedAt(t)
	return sec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sec *SubscriptionEntitlementCreate) SetNillableDeletedAt(t *time.Time) *SubscriptionEntitlementCreate {
	if t != nil {
		sec.SetDeletedAt(*t)
	}
	return sec
}

// SetEntitlementID sets the "entitlement_id" field.
func (sec *SubscriptionEntitlementCreate) SetEntitlementID(s string) *SubscriptionEntitlementCreate {
	sec.mutation.SetEntitlementID(s)
	return sec
}

// SetSubscriptionID sets the "subscription_id" field.
func (sec *SubscriptionEntitlementCreate) SetSubscriptionID(s string) *SubscriptionEntitlementCreate {
	sec.mutation.SetSubscriptionID(s)
	return sec
}

// SetSubscriptionPhaseKey sets the "subscription_phase_key" field.
func (sec *SubscriptionEntitlementCreate) SetSubscriptionPhaseKey(s string) *SubscriptionEntitlementCreate {
	sec.mutation.SetSubscriptionPhaseKey(s)
	return sec
}

// SetSubscriptionItemKey sets the "subscription_item_key" field.
func (sec *SubscriptionEntitlementCreate) SetSubscriptionItemKey(s string) *SubscriptionEntitlementCreate {
	sec.mutation.SetSubscriptionItemKey(s)
	return sec
}

// SetID sets the "id" field.
func (sec *SubscriptionEntitlementCreate) SetID(s string) *SubscriptionEntitlementCreate {
	sec.mutation.SetID(s)
	return sec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sec *SubscriptionEntitlementCreate) SetNillableID(s *string) *SubscriptionEntitlementCreate {
	if s != nil {
		sec.SetID(*s)
	}
	return sec
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (sec *SubscriptionEntitlementCreate) SetSubscription(s *Subscription) *SubscriptionEntitlementCreate {
	return sec.SetSubscriptionID(s.ID)
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (sec *SubscriptionEntitlementCreate) SetEntitlement(e *Entitlement) *SubscriptionEntitlementCreate {
	return sec.SetEntitlementID(e.ID)
}

// Mutation returns the SubscriptionEntitlementMutation object of the builder.
func (sec *SubscriptionEntitlementCreate) Mutation() *SubscriptionEntitlementMutation {
	return sec.mutation
}

// Save creates the SubscriptionEntitlement in the database.
func (sec *SubscriptionEntitlementCreate) Save(ctx context.Context) (*SubscriptionEntitlement, error) {
	sec.defaults()
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SubscriptionEntitlementCreate) SaveX(ctx context.Context) *SubscriptionEntitlement {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SubscriptionEntitlementCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SubscriptionEntitlementCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SubscriptionEntitlementCreate) defaults() {
	if _, ok := sec.mutation.CreatedAt(); !ok {
		v := subscriptionentitlement.DefaultCreatedAt()
		sec.mutation.SetCreatedAt(v)
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		v := subscriptionentitlement.DefaultUpdatedAt()
		sec.mutation.SetUpdatedAt(v)
	}
	if _, ok := sec.mutation.ID(); !ok {
		v := subscriptionentitlement.DefaultID()
		sec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SubscriptionEntitlementCreate) check() error {
	if _, ok := sec.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionEntitlement.namespace"`)}
	}
	if v, ok := sec.mutation.Namespace(); ok {
		if err := subscriptionentitlement.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionEntitlement.namespace": %w`, err)}
		}
	}
	if _, ok := sec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SubscriptionEntitlement.created_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SubscriptionEntitlement.updated_at"`)}
	}
	if _, ok := sec.mutation.EntitlementID(); !ok {
		return &ValidationError{Name: "entitlement_id", err: errors.New(`db: missing required field "SubscriptionEntitlement.entitlement_id"`)}
	}
	if v, ok := sec.mutation.EntitlementID(); ok {
		if err := subscriptionentitlement.EntitlementIDValidator(v); err != nil {
			return &ValidationError{Name: "entitlement_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionEntitlement.entitlement_id": %w`, err)}
		}
	}
	if _, ok := sec.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`db: missing required field "SubscriptionEntitlement.subscription_id"`)}
	}
	if v, ok := sec.mutation.SubscriptionID(); ok {
		if err := subscriptionentitlement.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionEntitlement.subscription_id": %w`, err)}
		}
	}
	if _, ok := sec.mutation.SubscriptionPhaseKey(); !ok {
		return &ValidationError{Name: "subscription_phase_key", err: errors.New(`db: missing required field "SubscriptionEntitlement.subscription_phase_key"`)}
	}
	if v, ok := sec.mutation.SubscriptionPhaseKey(); ok {
		if err := subscriptionentitlement.SubscriptionPhaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "subscription_phase_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionEntitlement.subscription_phase_key": %w`, err)}
		}
	}
	if _, ok := sec.mutation.SubscriptionItemKey(); !ok {
		return &ValidationError{Name: "subscription_item_key", err: errors.New(`db: missing required field "SubscriptionEntitlement.subscription_item_key"`)}
	}
	if v, ok := sec.mutation.SubscriptionItemKey(); ok {
		if err := subscriptionentitlement.SubscriptionItemKeyValidator(v); err != nil {
			return &ValidationError{Name: "subscription_item_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionEntitlement.subscription_item_key": %w`, err)}
		}
	}
	if len(sec.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`db: missing required edge "SubscriptionEntitlement.subscription"`)}
	}
	if len(sec.mutation.EntitlementIDs()) == 0 {
		return &ValidationError{Name: "entitlement", err: errors.New(`db: missing required edge "SubscriptionEntitlement.entitlement"`)}
	}
	return nil
}

func (sec *SubscriptionEntitlementCreate) sqlSave(ctx context.Context) (*SubscriptionEntitlement, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionEntitlement.ID type: %T", _spec.ID.Value)
		}
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SubscriptionEntitlementCreate) createSpec() (*SubscriptionEntitlement, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionEntitlement{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionentitlement.Table, sqlgraph.NewFieldSpec(subscriptionentitlement.FieldID, field.TypeString))
	)
	_spec.OnConflict = sec.conflict
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.Namespace(); ok {
		_spec.SetField(subscriptionentitlement.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sec.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sec.mutation.SubscriptionPhaseKey(); ok {
		_spec.SetField(subscriptionentitlement.FieldSubscriptionPhaseKey, field.TypeString, value)
		_node.SubscriptionPhaseKey = value
	}
	if value, ok := sec.mutation.SubscriptionItemKey(); ok {
		_spec.SetField(subscriptionentitlement.FieldSubscriptionItemKey, field.TypeString, value)
		_node.SubscriptionItemKey = value
	}
	if nodes := sec.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionentitlement.SubscriptionTable,
			Columns: []string{subscriptionentitlement.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sec.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionentitlement.EntitlementTable,
			Columns: []string{subscriptionentitlement.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntitlementID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionEntitlement.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionEntitlementUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (sec *SubscriptionEntitlementCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionEntitlementUpsertOne {
	sec.conflict = opts
	return &SubscriptionEntitlementUpsertOne{
		create: sec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionEntitlement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sec *SubscriptionEntitlementCreate) OnConflictColumns(columns ...string) *SubscriptionEntitlementUpsertOne {
	sec.conflict = append(sec.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionEntitlementUpsertOne{
		create: sec,
	}
}

type (
	// SubscriptionEntitlementUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionEntitlement node.
	SubscriptionEntitlementUpsertOne struct {
		create *SubscriptionEntitlementCreate
	}

	// SubscriptionEntitlementUpsert is the "OnConflict" setter.
	SubscriptionEntitlementUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionEntitlementUpsert) SetUpdatedAt(v time.Time) *SubscriptionEntitlementUpsert {
	u.Set(subscriptionentitlement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionEntitlementUpsert) UpdateUpdatedAt() *SubscriptionEntitlementUpsert {
	u.SetExcluded(subscriptionentitlement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionEntitlementUpsert) SetDeletedAt(v time.Time) *SubscriptionEntitlementUpsert {
	u.Set(subscriptionentitlement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionEntitlementUpsert) UpdateDeletedAt() *SubscriptionEntitlementUpsert {
	u.SetExcluded(subscriptionentitlement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionEntitlementUpsert) ClearDeletedAt() *SubscriptionEntitlementUpsert {
	u.SetNull(subscriptionentitlement.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionEntitlement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionentitlement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionEntitlementUpsertOne) UpdateNewValues() *SubscriptionEntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionentitlement.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionentitlement.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscriptionentitlement.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.EntitlementID(); exists {
			s.SetIgnore(subscriptionentitlement.FieldEntitlementID)
		}
		if _, exists := u.create.mutation.SubscriptionID(); exists {
			s.SetIgnore(subscriptionentitlement.FieldSubscriptionID)
		}
		if _, exists := u.create.mutation.SubscriptionPhaseKey(); exists {
			s.SetIgnore(subscriptionentitlement.FieldSubscriptionPhaseKey)
		}
		if _, exists := u.create.mutation.SubscriptionItemKey(); exists {
			s.SetIgnore(subscriptionentitlement.FieldSubscriptionItemKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionEntitlement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionEntitlementUpsertOne) Ignore() *SubscriptionEntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionEntitlementUpsertOne) DoNothing() *SubscriptionEntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionEntitlementCreate.OnConflict
// documentation for more info.
func (u *SubscriptionEntitlementUpsertOne) Update(set func(*SubscriptionEntitlementUpsert)) *SubscriptionEntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionEntitlementUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionEntitlementUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionEntitlementUpsertOne {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionEntitlementUpsertOne) UpdateUpdatedAt() *SubscriptionEntitlementUpsertOne {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionEntitlementUpsertOne) SetDeletedAt(v time.Time) *SubscriptionEntitlementUpsertOne {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionEntitlementUpsertOne) UpdateDeletedAt() *SubscriptionEntitlementUpsertOne {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionEntitlementUpsertOne) ClearDeletedAt() *SubscriptionEntitlementUpsertOne {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionEntitlementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionEntitlementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionEntitlementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionEntitlementUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionEntitlementUpsertOne.ID is not supported by MySQL driver. Use SubscriptionEntitlementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionEntitlementUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionEntitlementCreateBulk is the builder for creating many SubscriptionEntitlement entities in bulk.
type SubscriptionEntitlementCreateBulk struct {
	config
	err      error
	builders []*SubscriptionEntitlementCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionEntitlement entities in the database.
func (secb *SubscriptionEntitlementCreateBulk) Save(ctx context.Context) ([]*SubscriptionEntitlement, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SubscriptionEntitlement, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionEntitlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = secb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SubscriptionEntitlementCreateBulk) SaveX(ctx context.Context) []*SubscriptionEntitlement {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SubscriptionEntitlementCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SubscriptionEntitlementCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionEntitlement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionEntitlementUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (secb *SubscriptionEntitlementCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionEntitlementUpsertBulk {
	secb.conflict = opts
	return &SubscriptionEntitlementUpsertBulk{
		create: secb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionEntitlement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (secb *SubscriptionEntitlementCreateBulk) OnConflictColumns(columns ...string) *SubscriptionEntitlementUpsertBulk {
	secb.conflict = append(secb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionEntitlementUpsertBulk{
		create: secb,
	}
}

// SubscriptionEntitlementUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionEntitlement nodes.
type SubscriptionEntitlementUpsertBulk struct {
	create *SubscriptionEntitlementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionEntitlement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionentitlement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionEntitlementUpsertBulk) UpdateNewValues() *SubscriptionEntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionentitlement.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionentitlement.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscriptionentitlement.FieldCreatedAt)
			}
			if _, exists := b.mutation.EntitlementID(); exists {
				s.SetIgnore(subscriptionentitlement.FieldEntitlementID)
			}
			if _, exists := b.mutation.SubscriptionID(); exists {
				s.SetIgnore(subscriptionentitlement.FieldSubscriptionID)
			}
			if _, exists := b.mutation.SubscriptionPhaseKey(); exists {
				s.SetIgnore(subscriptionentitlement.FieldSubscriptionPhaseKey)
			}
			if _, exists := b.mutation.SubscriptionItemKey(); exists {
				s.SetIgnore(subscriptionentitlement.FieldSubscriptionItemKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionEntitlement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionEntitlementUpsertBulk) Ignore() *SubscriptionEntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionEntitlementUpsertBulk) DoNothing() *SubscriptionEntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionEntitlementCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionEntitlementUpsertBulk) Update(set func(*SubscriptionEntitlementUpsert)) *SubscriptionEntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionEntitlementUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionEntitlementUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionEntitlementUpsertBulk {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionEntitlementUpsertBulk) UpdateUpdatedAt() *SubscriptionEntitlementUpsertBulk {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionEntitlementUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionEntitlementUpsertBulk {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionEntitlementUpsertBulk) UpdateDeletedAt() *SubscriptionEntitlementUpsertBulk {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionEntitlementUpsertBulk) ClearDeletedAt() *SubscriptionEntitlementUpsertBulk {
	return u.Update(func(s *SubscriptionEntitlementUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionEntitlementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionEntitlementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionEntitlementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionEntitlementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

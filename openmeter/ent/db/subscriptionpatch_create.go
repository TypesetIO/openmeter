// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueadditem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueaddphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueextendphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueremovephase"
)

// SubscriptionPatchCreate is the builder for creating a SubscriptionPatch entity.
type SubscriptionPatchCreate struct {
	config
	mutation *SubscriptionPatchMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (spc *SubscriptionPatchCreate) SetNamespace(s string) *SubscriptionPatchCreate {
	spc.mutation.SetNamespace(s)
	return spc
}

// SetCreatedAt sets the "created_at" field.
func (spc *SubscriptionPatchCreate) SetCreatedAt(t time.Time) *SubscriptionPatchCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionPatchCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SubscriptionPatchCreate) SetUpdatedAt(t time.Time) *SubscriptionPatchCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionPatchCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetDeletedAt sets the "deleted_at" field.
func (spc *SubscriptionPatchCreate) SetDeletedAt(t time.Time) *SubscriptionPatchCreate {
	spc.mutation.SetDeletedAt(t)
	return spc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableDeletedAt(t *time.Time) *SubscriptionPatchCreate {
	if t != nil {
		spc.SetDeletedAt(*t)
	}
	return spc
}

// SetMetadata sets the "metadata" field.
func (spc *SubscriptionPatchCreate) SetMetadata(m map[string]string) *SubscriptionPatchCreate {
	spc.mutation.SetMetadata(m)
	return spc
}

// SetSubscriptionID sets the "subscription_id" field.
func (spc *SubscriptionPatchCreate) SetSubscriptionID(s string) *SubscriptionPatchCreate {
	spc.mutation.SetSubscriptionID(s)
	return spc
}

// SetAppliedAt sets the "applied_at" field.
func (spc *SubscriptionPatchCreate) SetAppliedAt(t time.Time) *SubscriptionPatchCreate {
	spc.mutation.SetAppliedAt(t)
	return spc
}

// SetBatchIndex sets the "batch_index" field.
func (spc *SubscriptionPatchCreate) SetBatchIndex(i int) *SubscriptionPatchCreate {
	spc.mutation.SetBatchIndex(i)
	return spc
}

// SetOperation sets the "operation" field.
func (spc *SubscriptionPatchCreate) SetOperation(s string) *SubscriptionPatchCreate {
	spc.mutation.SetOperation(s)
	return spc
}

// SetPath sets the "path" field.
func (spc *SubscriptionPatchCreate) SetPath(s string) *SubscriptionPatchCreate {
	spc.mutation.SetPath(s)
	return spc
}

// SetID sets the "id" field.
func (spc *SubscriptionPatchCreate) SetID(s string) *SubscriptionPatchCreate {
	spc.mutation.SetID(s)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableID(s *string) *SubscriptionPatchCreate {
	if s != nil {
		spc.SetID(*s)
	}
	return spc
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (spc *SubscriptionPatchCreate) SetSubscription(s *Subscription) *SubscriptionPatchCreate {
	return spc.SetSubscriptionID(s.ID)
}

// SetValueAddItemID sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity by ID.
func (spc *SubscriptionPatchCreate) SetValueAddItemID(id string) *SubscriptionPatchCreate {
	spc.mutation.SetValueAddItemID(id)
	return spc
}

// SetNillableValueAddItemID sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity by ID if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableValueAddItemID(id *string) *SubscriptionPatchCreate {
	if id != nil {
		spc = spc.SetValueAddItemID(*id)
	}
	return spc
}

// SetValueAddItem sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity.
func (spc *SubscriptionPatchCreate) SetValueAddItem(s *SubscriptionPatchValueAddItem) *SubscriptionPatchCreate {
	return spc.SetValueAddItemID(s.ID)
}

// SetValueAddPhaseID sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity by ID.
func (spc *SubscriptionPatchCreate) SetValueAddPhaseID(id string) *SubscriptionPatchCreate {
	spc.mutation.SetValueAddPhaseID(id)
	return spc
}

// SetNillableValueAddPhaseID sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity by ID if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableValueAddPhaseID(id *string) *SubscriptionPatchCreate {
	if id != nil {
		spc = spc.SetValueAddPhaseID(*id)
	}
	return spc
}

// SetValueAddPhase sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity.
func (spc *SubscriptionPatchCreate) SetValueAddPhase(s *SubscriptionPatchValueAddPhase) *SubscriptionPatchCreate {
	return spc.SetValueAddPhaseID(s.ID)
}

// SetValueRemovePhaseID sets the "value_remove_phase" edge to the SubscriptionPatchValueRemovePhase entity by ID.
func (spc *SubscriptionPatchCreate) SetValueRemovePhaseID(id string) *SubscriptionPatchCreate {
	spc.mutation.SetValueRemovePhaseID(id)
	return spc
}

// SetNillableValueRemovePhaseID sets the "value_remove_phase" edge to the SubscriptionPatchValueRemovePhase entity by ID if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableValueRemovePhaseID(id *string) *SubscriptionPatchCreate {
	if id != nil {
		spc = spc.SetValueRemovePhaseID(*id)
	}
	return spc
}

// SetValueRemovePhase sets the "value_remove_phase" edge to the SubscriptionPatchValueRemovePhase entity.
func (spc *SubscriptionPatchCreate) SetValueRemovePhase(s *SubscriptionPatchValueRemovePhase) *SubscriptionPatchCreate {
	return spc.SetValueRemovePhaseID(s.ID)
}

// SetValueExtendPhaseID sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity by ID.
func (spc *SubscriptionPatchCreate) SetValueExtendPhaseID(id string) *SubscriptionPatchCreate {
	spc.mutation.SetValueExtendPhaseID(id)
	return spc
}

// SetNillableValueExtendPhaseID sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity by ID if the given value is not nil.
func (spc *SubscriptionPatchCreate) SetNillableValueExtendPhaseID(id *string) *SubscriptionPatchCreate {
	if id != nil {
		spc = spc.SetValueExtendPhaseID(*id)
	}
	return spc
}

// SetValueExtendPhase sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity.
func (spc *SubscriptionPatchCreate) SetValueExtendPhase(s *SubscriptionPatchValueExtendPhase) *SubscriptionPatchCreate {
	return spc.SetValueExtendPhaseID(s.ID)
}

// Mutation returns the SubscriptionPatchMutation object of the builder.
func (spc *SubscriptionPatchCreate) Mutation() *SubscriptionPatchMutation {
	return spc.mutation
}

// Save creates the SubscriptionPatch in the database.
func (spc *SubscriptionPatchCreate) Save(ctx context.Context) (*SubscriptionPatch, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SubscriptionPatchCreate) SaveX(ctx context.Context) *SubscriptionPatch {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SubscriptionPatchCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SubscriptionPatchCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SubscriptionPatchCreate) defaults() {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := subscriptionpatch.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := subscriptionpatch.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		v := subscriptionpatch.DefaultID()
		spc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SubscriptionPatchCreate) check() error {
	if _, ok := spc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionPatch.namespace"`)}
	}
	if v, ok := spc.mutation.Namespace(); ok {
		if err := subscriptionpatch.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatch.namespace": %w`, err)}
		}
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SubscriptionPatch.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SubscriptionPatch.updated_at"`)}
	}
	if _, ok := spc.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`db: missing required field "SubscriptionPatch.subscription_id"`)}
	}
	if v, ok := spc.mutation.SubscriptionID(); ok {
		if err := subscriptionpatch.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatch.subscription_id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.AppliedAt(); !ok {
		return &ValidationError{Name: "applied_at", err: errors.New(`db: missing required field "SubscriptionPatch.applied_at"`)}
	}
	if _, ok := spc.mutation.BatchIndex(); !ok {
		return &ValidationError{Name: "batch_index", err: errors.New(`db: missing required field "SubscriptionPatch.batch_index"`)}
	}
	if _, ok := spc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`db: missing required field "SubscriptionPatch.operation"`)}
	}
	if v, ok := spc.mutation.Operation(); ok {
		if err := subscriptionpatch.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatch.operation": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`db: missing required field "SubscriptionPatch.path"`)}
	}
	if v, ok := spc.mutation.Path(); ok {
		if err := subscriptionpatch.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatch.path": %w`, err)}
		}
	}
	if len(spc.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`db: missing required edge "SubscriptionPatch.subscription"`)}
	}
	return nil
}

func (spc *SubscriptionPatchCreate) sqlSave(ctx context.Context) (*SubscriptionPatch, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionPatch.ID type: %T", _spec.ID.Value)
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SubscriptionPatchCreate) createSpec() (*SubscriptionPatch, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionPatch{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionpatch.Table, sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString))
	)
	_spec.OnConflict = spc.conflict
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.Namespace(); ok {
		_spec.SetField(subscriptionpatch.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := spc.mutation.Metadata(); ok {
		_spec.SetField(subscriptionpatch.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := spc.mutation.AppliedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldAppliedAt, field.TypeTime, value)
		_node.AppliedAt = value
	}
	if value, ok := spc.mutation.BatchIndex(); ok {
		_spec.SetField(subscriptionpatch.FieldBatchIndex, field.TypeInt, value)
		_node.BatchIndex = value
	}
	if value, ok := spc.mutation.Operation(); ok {
		_spec.SetField(subscriptionpatch.FieldOperation, field.TypeString, value)
		_node.Operation = value
	}
	if value, ok := spc.mutation.Path(); ok {
		_spec.SetField(subscriptionpatch.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if nodes := spc.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionpatch.SubscriptionTable,
			Columns: []string{subscriptionpatch.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ValueAddItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddItemTable,
			Columns: []string{subscriptionpatch.ValueAddItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ValueAddPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddPhaseTable,
			Columns: []string{subscriptionpatch.ValueAddPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ValueRemovePhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueRemovePhaseTable,
			Columns: []string{subscriptionpatch.ValueRemovePhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueremovephase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ValueExtendPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueExtendPhaseTable,
			Columns: []string{subscriptionpatch.ValueExtendPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueextendphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatch.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spc *SubscriptionPatchCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchUpsertOne {
	spc.conflict = opts
	return &SubscriptionPatchUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatch.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spc *SubscriptionPatchCreate) OnConflictColumns(columns ...string) *SubscriptionPatchUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchUpsertOne{
		create: spc,
	}
}

type (
	// SubscriptionPatchUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionPatch node.
	SubscriptionPatchUpsertOne struct {
		create *SubscriptionPatchCreate
	}

	// SubscriptionPatchUpsert is the "OnConflict" setter.
	SubscriptionPatchUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionPatchUpsert) SetUpdatedAt(v time.Time) *SubscriptionPatchUpsert {
	u.Set(subscriptionpatch.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionPatchUpsert) UpdateUpdatedAt() *SubscriptionPatchUpsert {
	u.SetExcluded(subscriptionpatch.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionPatchUpsert) SetDeletedAt(v time.Time) *SubscriptionPatchUpsert {
	u.Set(subscriptionpatch.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionPatchUpsert) UpdateDeletedAt() *SubscriptionPatchUpsert {
	u.SetExcluded(subscriptionpatch.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionPatchUpsert) ClearDeletedAt() *SubscriptionPatchUpsert {
	u.SetNull(subscriptionpatch.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionPatchUpsert) SetMetadata(v map[string]string) *SubscriptionPatchUpsert {
	u.Set(subscriptionpatch.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionPatchUpsert) UpdateMetadata() *SubscriptionPatchUpsert {
	u.SetExcluded(subscriptionpatch.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionPatchUpsert) ClearMetadata() *SubscriptionPatchUpsert {
	u.SetNull(subscriptionpatch.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatch.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatch.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchUpsertOne) UpdateNewValues() *SubscriptionPatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionpatch.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionpatch.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscriptionpatch.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.SubscriptionID(); exists {
			s.SetIgnore(subscriptionpatch.FieldSubscriptionID)
		}
		if _, exists := u.create.mutation.AppliedAt(); exists {
			s.SetIgnore(subscriptionpatch.FieldAppliedAt)
		}
		if _, exists := u.create.mutation.BatchIndex(); exists {
			s.SetIgnore(subscriptionpatch.FieldBatchIndex)
		}
		if _, exists := u.create.mutation.Operation(); exists {
			s.SetIgnore(subscriptionpatch.FieldOperation)
		}
		if _, exists := u.create.mutation.Path(); exists {
			s.SetIgnore(subscriptionpatch.FieldPath)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatch.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionPatchUpsertOne) Ignore() *SubscriptionPatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchUpsertOne) DoNothing() *SubscriptionPatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchCreate.OnConflict
// documentation for more info.
func (u *SubscriptionPatchUpsertOne) Update(set func(*SubscriptionPatchUpsert)) *SubscriptionPatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionPatchUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionPatchUpsertOne) UpdateUpdatedAt() *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionPatchUpsertOne) SetDeletedAt(v time.Time) *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionPatchUpsertOne) UpdateDeletedAt() *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionPatchUpsertOne) ClearDeletedAt() *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionPatchUpsertOne) SetMetadata(v map[string]string) *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionPatchUpsertOne) UpdateMetadata() *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionPatchUpsertOne) ClearMetadata() *SubscriptionPatchUpsertOne {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *SubscriptionPatchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionPatchUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionPatchUpsertOne.ID is not supported by MySQL driver. Use SubscriptionPatchUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionPatchUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionPatchCreateBulk is the builder for creating many SubscriptionPatch entities in bulk.
type SubscriptionPatchCreateBulk struct {
	config
	err      error
	builders []*SubscriptionPatchCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionPatch entities in the database.
func (spcb *SubscriptionPatchCreateBulk) Save(ctx context.Context) ([]*SubscriptionPatch, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SubscriptionPatch, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionPatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SubscriptionPatchCreateBulk) SaveX(ctx context.Context) []*SubscriptionPatch {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SubscriptionPatchCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SubscriptionPatchCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatch.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spcb *SubscriptionPatchCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchUpsertBulk {
	spcb.conflict = opts
	return &SubscriptionPatchUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatch.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spcb *SubscriptionPatchCreateBulk) OnConflictColumns(columns ...string) *SubscriptionPatchUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchUpsertBulk{
		create: spcb,
	}
}

// SubscriptionPatchUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionPatch nodes.
type SubscriptionPatchUpsertBulk struct {
	create *SubscriptionPatchCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionPatch.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatch.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchUpsertBulk) UpdateNewValues() *SubscriptionPatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionpatch.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionpatch.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscriptionpatch.FieldCreatedAt)
			}
			if _, exists := b.mutation.SubscriptionID(); exists {
				s.SetIgnore(subscriptionpatch.FieldSubscriptionID)
			}
			if _, exists := b.mutation.AppliedAt(); exists {
				s.SetIgnore(subscriptionpatch.FieldAppliedAt)
			}
			if _, exists := b.mutation.BatchIndex(); exists {
				s.SetIgnore(subscriptionpatch.FieldBatchIndex)
			}
			if _, exists := b.mutation.Operation(); exists {
				s.SetIgnore(subscriptionpatch.FieldOperation)
			}
			if _, exists := b.mutation.Path(); exists {
				s.SetIgnore(subscriptionpatch.FieldPath)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatch.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionPatchUpsertBulk) Ignore() *SubscriptionPatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchUpsertBulk) DoNothing() *SubscriptionPatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionPatchUpsertBulk) Update(set func(*SubscriptionPatchUpsert)) *SubscriptionPatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionPatchUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionPatchUpsertBulk) UpdateUpdatedAt() *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionPatchUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionPatchUpsertBulk) UpdateDeletedAt() *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionPatchUpsertBulk) ClearDeletedAt() *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionPatchUpsertBulk) SetMetadata(v map[string]string) *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionPatchUpsertBulk) UpdateMetadata() *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionPatchUpsertBulk) ClearMetadata() *SubscriptionPatchUpsertBulk {
	return u.Update(func(s *SubscriptionPatchUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *SubscriptionPatchUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionPatchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

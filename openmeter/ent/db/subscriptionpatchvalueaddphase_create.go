// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueaddphase"
)

// SubscriptionPatchValueAddPhaseCreate is the builder for creating a SubscriptionPatchValueAddPhase entity.
type SubscriptionPatchValueAddPhaseCreate struct {
	config
	mutation *SubscriptionPatchValueAddPhaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetNamespace(s string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetNamespace(s)
	return spvapc
}

// SetSubscriptionPatchID sets the "subscription_patch_id" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetSubscriptionPatchID(s string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetSubscriptionPatchID(s)
	return spvapc
}

// SetPhaseKey sets the "phase_key" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetPhaseKey(s string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetPhaseKey(s)
	return spvapc
}

// SetStartAfterIso sets the "start_after_iso" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetStartAfterIso(s string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetStartAfterIso(s)
	return spvapc
}

// SetDurationIso sets the "duration_iso" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetDurationIso(s string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetDurationIso(s)
	return spvapc
}

// SetCreateDiscount sets the "create_discount" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetCreateDiscount(b bool) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetCreateDiscount(b)
	return spvapc
}

// SetCreateDiscountAppliesTo sets the "create_discount_applies_to" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetCreateDiscountAppliesTo(s []string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetCreateDiscountAppliesTo(s)
	return spvapc
}

// SetID sets the "id" field.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetID(s string) *SubscriptionPatchValueAddPhaseCreate {
	spvapc.mutation.SetID(s)
	return spvapc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetNillableID(s *string) *SubscriptionPatchValueAddPhaseCreate {
	if s != nil {
		spvapc.SetID(*s)
	}
	return spvapc
}

// SetSubscriptionPatch sets the "subscription_patch" edge to the SubscriptionPatch entity.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SetSubscriptionPatch(s *SubscriptionPatch) *SubscriptionPatchValueAddPhaseCreate {
	return spvapc.SetSubscriptionPatchID(s.ID)
}

// Mutation returns the SubscriptionPatchValueAddPhaseMutation object of the builder.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) Mutation() *SubscriptionPatchValueAddPhaseMutation {
	return spvapc.mutation
}

// Save creates the SubscriptionPatchValueAddPhase in the database.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) Save(ctx context.Context) (*SubscriptionPatchValueAddPhase, error) {
	spvapc.defaults()
	return withHooks(ctx, spvapc.sqlSave, spvapc.mutation, spvapc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) SaveX(ctx context.Context) *SubscriptionPatchValueAddPhase {
	v, err := spvapc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) Exec(ctx context.Context) error {
	_, err := spvapc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) ExecX(ctx context.Context) {
	if err := spvapc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) defaults() {
	if _, ok := spvapc.mutation.ID(); !ok {
		v := subscriptionpatchvalueaddphase.DefaultID()
		spvapc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvapc *SubscriptionPatchValueAddPhaseCreate) check() error {
	if _, ok := spvapc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionPatchValueAddPhase.namespace"`)}
	}
	if v, ok := spvapc.mutation.Namespace(); ok {
		if err := subscriptionpatchvalueaddphase.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddPhase.namespace": %w`, err)}
		}
	}
	if _, ok := spvapc.mutation.SubscriptionPatchID(); !ok {
		return &ValidationError{Name: "subscription_patch_id", err: errors.New(`db: missing required field "SubscriptionPatchValueAddPhase.subscription_patch_id"`)}
	}
	if v, ok := spvapc.mutation.SubscriptionPatchID(); ok {
		if err := subscriptionpatchvalueaddphase.SubscriptionPatchIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_patch_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddPhase.subscription_patch_id": %w`, err)}
		}
	}
	if _, ok := spvapc.mutation.PhaseKey(); !ok {
		return &ValidationError{Name: "phase_key", err: errors.New(`db: missing required field "SubscriptionPatchValueAddPhase.phase_key"`)}
	}
	if v, ok := spvapc.mutation.PhaseKey(); ok {
		if err := subscriptionpatchvalueaddphase.PhaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "phase_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueAddPhase.phase_key": %w`, err)}
		}
	}
	if _, ok := spvapc.mutation.StartAfterIso(); !ok {
		return &ValidationError{Name: "start_after_iso", err: errors.New(`db: missing required field "SubscriptionPatchValueAddPhase.start_after_iso"`)}
	}
	if _, ok := spvapc.mutation.DurationIso(); !ok {
		return &ValidationError{Name: "duration_iso", err: errors.New(`db: missing required field "SubscriptionPatchValueAddPhase.duration_iso"`)}
	}
	if _, ok := spvapc.mutation.CreateDiscount(); !ok {
		return &ValidationError{Name: "create_discount", err: errors.New(`db: missing required field "SubscriptionPatchValueAddPhase.create_discount"`)}
	}
	if len(spvapc.mutation.SubscriptionPatchIDs()) == 0 {
		return &ValidationError{Name: "subscription_patch", err: errors.New(`db: missing required edge "SubscriptionPatchValueAddPhase.subscription_patch"`)}
	}
	return nil
}

func (spvapc *SubscriptionPatchValueAddPhaseCreate) sqlSave(ctx context.Context) (*SubscriptionPatchValueAddPhase, error) {
	if err := spvapc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spvapc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spvapc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionPatchValueAddPhase.ID type: %T", _spec.ID.Value)
		}
	}
	spvapc.mutation.id = &_node.ID
	spvapc.mutation.done = true
	return _node, nil
}

func (spvapc *SubscriptionPatchValueAddPhaseCreate) createSpec() (*SubscriptionPatchValueAddPhase, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionPatchValueAddPhase{config: spvapc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionpatchvalueaddphase.Table, sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString))
	)
	_spec.OnConflict = spvapc.conflict
	if id, ok := spvapc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spvapc.mutation.Namespace(); ok {
		_spec.SetField(subscriptionpatchvalueaddphase.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := spvapc.mutation.PhaseKey(); ok {
		_spec.SetField(subscriptionpatchvalueaddphase.FieldPhaseKey, field.TypeString, value)
		_node.PhaseKey = value
	}
	if value, ok := spvapc.mutation.StartAfterIso(); ok {
		_spec.SetField(subscriptionpatchvalueaddphase.FieldStartAfterIso, field.TypeString, value)
		_node.StartAfterIso = value
	}
	if value, ok := spvapc.mutation.DurationIso(); ok {
		_spec.SetField(subscriptionpatchvalueaddphase.FieldDurationIso, field.TypeString, value)
		_node.DurationIso = value
	}
	if value, ok := spvapc.mutation.CreateDiscount(); ok {
		_spec.SetField(subscriptionpatchvalueaddphase.FieldCreateDiscount, field.TypeBool, value)
		_node.CreateDiscount = value
	}
	if value, ok := spvapc.mutation.CreateDiscountAppliesTo(); ok {
		_spec.SetField(subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo, field.TypeJSON, value)
		_node.CreateDiscountAppliesTo = value
	}
	if nodes := spvapc.mutation.SubscriptionPatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionpatchvalueaddphase.SubscriptionPatchTable,
			Columns: []string{subscriptionpatchvalueaddphase.SubscriptionPatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionPatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueAddPhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvapc *SubscriptionPatchValueAddPhaseCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueAddPhaseUpsertOne {
	spvapc.conflict = opts
	return &SubscriptionPatchValueAddPhaseUpsertOne{
		create: spvapc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvapc *SubscriptionPatchValueAddPhaseCreate) OnConflictColumns(columns ...string) *SubscriptionPatchValueAddPhaseUpsertOne {
	spvapc.conflict = append(spvapc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueAddPhaseUpsertOne{
		create: spvapc,
	}
}

type (
	// SubscriptionPatchValueAddPhaseUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionPatchValueAddPhase node.
	SubscriptionPatchValueAddPhaseUpsertOne struct {
		create *SubscriptionPatchValueAddPhaseCreate
	}

	// SubscriptionPatchValueAddPhaseUpsert is the "OnConflict" setter.
	SubscriptionPatchValueAddPhaseUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueaddphase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueAddPhaseUpsertOne) UpdateNewValues() *SubscriptionPatchValueAddPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldNamespace)
		}
		if _, exists := u.create.mutation.SubscriptionPatchID(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldSubscriptionPatchID)
		}
		if _, exists := u.create.mutation.PhaseKey(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldPhaseKey)
		}
		if _, exists := u.create.mutation.StartAfterIso(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldStartAfterIso)
		}
		if _, exists := u.create.mutation.DurationIso(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldDurationIso)
		}
		if _, exists := u.create.mutation.CreateDiscount(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldCreateDiscount)
		}
		if _, exists := u.create.mutation.CreateDiscountAppliesTo(); exists {
			s.SetIgnore(subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionPatchValueAddPhaseUpsertOne) Ignore() *SubscriptionPatchValueAddPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueAddPhaseUpsertOne) DoNothing() *SubscriptionPatchValueAddPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueAddPhaseCreate.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueAddPhaseUpsertOne) Update(set func(*SubscriptionPatchValueAddPhaseUpsert)) *SubscriptionPatchValueAddPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueAddPhaseUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueAddPhaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueAddPhaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueAddPhaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionPatchValueAddPhaseUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionPatchValueAddPhaseUpsertOne.ID is not supported by MySQL driver. Use SubscriptionPatchValueAddPhaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionPatchValueAddPhaseUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionPatchValueAddPhaseCreateBulk is the builder for creating many SubscriptionPatchValueAddPhase entities in bulk.
type SubscriptionPatchValueAddPhaseCreateBulk struct {
	config
	err      error
	builders []*SubscriptionPatchValueAddPhaseCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionPatchValueAddPhase entities in the database.
func (spvapcb *SubscriptionPatchValueAddPhaseCreateBulk) Save(ctx context.Context) ([]*SubscriptionPatchValueAddPhase, error) {
	if spvapcb.err != nil {
		return nil, spvapcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spvapcb.builders))
	nodes := make([]*SubscriptionPatchValueAddPhase, len(spvapcb.builders))
	mutators := make([]Mutator, len(spvapcb.builders))
	for i := range spvapcb.builders {
		func(i int, root context.Context) {
			builder := spvapcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionPatchValueAddPhaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spvapcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spvapcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spvapcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spvapcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spvapcb *SubscriptionPatchValueAddPhaseCreateBulk) SaveX(ctx context.Context) []*SubscriptionPatchValueAddPhase {
	v, err := spvapcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvapcb *SubscriptionPatchValueAddPhaseCreateBulk) Exec(ctx context.Context) error {
	_, err := spvapcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvapcb *SubscriptionPatchValueAddPhaseCreateBulk) ExecX(ctx context.Context) {
	if err := spvapcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueAddPhase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueAddPhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvapcb *SubscriptionPatchValueAddPhaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueAddPhaseUpsertBulk {
	spvapcb.conflict = opts
	return &SubscriptionPatchValueAddPhaseUpsertBulk{
		create: spvapcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvapcb *SubscriptionPatchValueAddPhaseCreateBulk) OnConflictColumns(columns ...string) *SubscriptionPatchValueAddPhaseUpsertBulk {
	spvapcb.conflict = append(spvapcb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueAddPhaseUpsertBulk{
		create: spvapcb,
	}
}

// SubscriptionPatchValueAddPhaseUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionPatchValueAddPhase nodes.
type SubscriptionPatchValueAddPhaseUpsertBulk struct {
	create *SubscriptionPatchValueAddPhaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueaddphase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueAddPhaseUpsertBulk) UpdateNewValues() *SubscriptionPatchValueAddPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldNamespace)
			}
			if _, exists := b.mutation.SubscriptionPatchID(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldSubscriptionPatchID)
			}
			if _, exists := b.mutation.PhaseKey(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldPhaseKey)
			}
			if _, exists := b.mutation.StartAfterIso(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldStartAfterIso)
			}
			if _, exists := b.mutation.DurationIso(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldDurationIso)
			}
			if _, exists := b.mutation.CreateDiscount(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldCreateDiscount)
			}
			if _, exists := b.mutation.CreateDiscountAppliesTo(); exists {
				s.SetIgnore(subscriptionpatchvalueaddphase.FieldCreateDiscountAppliesTo)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueAddPhase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionPatchValueAddPhaseUpsertBulk) Ignore() *SubscriptionPatchValueAddPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueAddPhaseUpsertBulk) DoNothing() *SubscriptionPatchValueAddPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueAddPhaseCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueAddPhaseUpsertBulk) Update(set func(*SubscriptionPatchValueAddPhaseUpsert)) *SubscriptionPatchValueAddPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueAddPhaseUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueAddPhaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionPatchValueAddPhaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueAddPhaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueAddPhaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

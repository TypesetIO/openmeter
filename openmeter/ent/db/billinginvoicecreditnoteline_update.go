// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicecreditnoteline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceCreditNoteLineUpdate is the builder for updating BillingInvoiceCreditNoteLine entities.
type BillingInvoiceCreditNoteLineUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceCreditNoteLineMutation
}

// Where appends a list predicates to the BillingInvoiceCreditNoteLineUpdate builder.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) Where(ps ...predicate.BillingInvoiceCreditNoteLine) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.Where(ps...)
	return bicnlu
}

// SetMetadata sets the "metadata" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetMetadata(m map[string]string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetMetadata(m)
	return bicnlu
}

// ClearMetadata clears the value of the "metadata" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearMetadata() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearMetadata()
	return bicnlu
}

// SetUpdatedAt sets the "updated_at" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetUpdatedAt(t)
	return bicnlu
}

// SetDeletedAt sets the "deleted_at" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetDeletedAt(t time.Time) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetDeletedAt(t)
	return bicnlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceCreditNoteLineUpdate {
	if t != nil {
		bicnlu.SetDeletedAt(*t)
	}
	return bicnlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearDeletedAt() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearDeletedAt()
	return bicnlu
}

// SetName sets the "name" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetName(s string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetName(s)
	return bicnlu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableName(s *string) *BillingInvoiceCreditNoteLineUpdate {
	if s != nil {
		bicnlu.SetName(*s)
	}
	return bicnlu
}

// SetDescription sets the "description" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetDescription(s string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetDescription(s)
	return bicnlu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableDescription(s *string) *BillingInvoiceCreditNoteLineUpdate {
	if s != nil {
		bicnlu.SetDescription(*s)
	}
	return bicnlu
}

// ClearDescription clears the value of the "description" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearDescription() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearDescription()
	return bicnlu
}

// SetAmount sets the "amount" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetAmount(a)
	return bicnlu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetAmount(*a)
	}
	return bicnlu
}

// SetTaxesTotal sets the "taxes_total" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetTaxesTotal(a)
	return bicnlu
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableTaxesTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetTaxesTotal(*a)
	}
	return bicnlu
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetTaxesInclusiveTotal(a)
	return bicnlu
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableTaxesInclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetTaxesInclusiveTotal(*a)
	}
	return bicnlu
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetTaxesExclusiveTotal(a)
	return bicnlu
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableTaxesExclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetTaxesExclusiveTotal(*a)
	}
	return bicnlu
}

// SetChargesTotal sets the "charges_total" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetChargesTotal(a)
	return bicnlu
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableChargesTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetChargesTotal(*a)
	}
	return bicnlu
}

// SetDiscountsTotal sets the "discounts_total" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetDiscountsTotal(a)
	return bicnlu
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableDiscountsTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetDiscountsTotal(*a)
	}
	return bicnlu
}

// SetTotal sets the "total" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetTotal(a)
	return bicnlu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetTotal(*a)
	}
	return bicnlu
}

// SetInvoiceID sets the "invoice_id" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetInvoiceID(s string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetInvoiceID(s)
	return bicnlu
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableInvoiceID(s *string) *BillingInvoiceCreditNoteLineUpdate {
	if s != nil {
		bicnlu.SetInvoiceID(*s)
	}
	return bicnlu
}

// SetManagedBy sets the "managed_by" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetManagedBy(blmb billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetManagedBy(blmb)
	return bicnlu
}

// SetNillableManagedBy sets the "managed_by" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableManagedBy(blmb *billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpdate {
	if blmb != nil {
		bicnlu.SetManagedBy(*blmb)
	}
	return bicnlu
}

// SetPeriodStart sets the "period_start" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetPeriodStart(t time.Time) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetPeriodStart(t)
	return bicnlu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillablePeriodStart(t *time.Time) *BillingInvoiceCreditNoteLineUpdate {
	if t != nil {
		bicnlu.SetPeriodStart(*t)
	}
	return bicnlu
}

// SetPeriodEnd sets the "period_end" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetPeriodEnd(t time.Time) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetPeriodEnd(t)
	return bicnlu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceCreditNoteLineUpdate {
	if t != nil {
		bicnlu.SetPeriodEnd(*t)
	}
	return bicnlu
}

// SetInvoiceAt sets the "invoice_at" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetInvoiceAt(t time.Time) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetInvoiceAt(t)
	return bicnlu
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableInvoiceAt(t *time.Time) *BillingInvoiceCreditNoteLineUpdate {
	if t != nil {
		bicnlu.SetInvoiceAt(*t)
	}
	return bicnlu
}

// SetStatus sets the "status" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetStatus(bls billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetStatus(bls)
	return bicnlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableStatus(bls *billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpdate {
	if bls != nil {
		bicnlu.SetStatus(*bls)
	}
	return bicnlu
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetInvoicingAppExternalID(s string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetInvoicingAppExternalID(s)
	return bicnlu
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceCreditNoteLineUpdate {
	if s != nil {
		bicnlu.SetInvoicingAppExternalID(*s)
	}
	return bicnlu
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearInvoicingAppExternalID()
	return bicnlu
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetChildUniqueReferenceID(s string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetChildUniqueReferenceID(s)
	return bicnlu
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceCreditNoteLineUpdate {
	if s != nil {
		bicnlu.SetChildUniqueReferenceID(*s)
	}
	return bicnlu
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearChildUniqueReferenceID()
	return bicnlu
}

// SetParentLineID sets the "parent_line_id" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetParentLineID(s string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetParentLineID(s)
	return bicnlu
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableParentLineID(s *string) *BillingInvoiceCreditNoteLineUpdate {
	if s != nil {
		bicnlu.SetParentLineID(*s)
	}
	return bicnlu
}

// SetCreditNoteAmount sets the "credit_note_amount" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetCreditNoteAmount(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetCreditNoteAmount(a)
	return bicnlu
}

// SetNillableCreditNoteAmount sets the "credit_note_amount" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableCreditNoteAmount(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdate {
	if a != nil {
		bicnlu.SetCreditNoteAmount(*a)
	}
	return bicnlu
}

// SetTaxConfig sets the "tax_config" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetTaxConfig(pc productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetTaxConfig(pc)
	return bicnlu
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetNillableTaxConfig(pc *productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpdate {
	if pc != nil {
		bicnlu.SetTaxConfig(*pc)
	}
	return bicnlu
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearTaxConfig() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearTaxConfig()
	return bicnlu
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetBillingInvoiceID(id string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetBillingInvoiceID(id)
	return bicnlu
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceCreditNoteLineUpdate {
	return bicnlu.SetBillingInvoiceID(b.ID)
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetBillingInvoiceLineID(id string) *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.SetBillingInvoiceLineID(id)
	return bicnlu
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceCreditNoteLineUpdate {
	return bicnlu.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceCreditNoteLineMutation object of the builder.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) Mutation() *BillingInvoiceCreditNoteLineMutation {
	return bicnlu.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearBillingInvoice() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearBillingInvoice()
	return bicnlu
}

// ClearBillingInvoiceLine clears the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ClearBillingInvoiceLine() *BillingInvoiceCreditNoteLineUpdate {
	bicnlu.mutation.ClearBillingInvoiceLine()
	return bicnlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) Save(ctx context.Context) (int, error) {
	bicnlu.defaults()
	return withHooks(ctx, bicnlu.sqlSave, bicnlu.mutation, bicnlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) SaveX(ctx context.Context) int {
	affected, err := bicnlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) Exec(ctx context.Context) error {
	_, err := bicnlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) ExecX(ctx context.Context) {
	if err := bicnlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) defaults() {
	if _, ok := bicnlu.mutation.UpdatedAt(); !ok {
		v := billinginvoicecreditnoteline.UpdateDefaultUpdatedAt()
		bicnlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bicnlu *BillingInvoiceCreditNoteLineUpdate) check() error {
	if v, ok := bicnlu.mutation.ManagedBy(); ok {
		if err := billinginvoicecreditnoteline.ManagedByValidator(v); err != nil {
			return &ValidationError{Name: "managed_by", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.managed_by": %w`, err)}
		}
	}
	if v, ok := bicnlu.mutation.Status(); ok {
		if err := billinginvoicecreditnoteline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.status": %w`, err)}
		}
	}
	if v, ok := bicnlu.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.tax_config": %w`, err)}
		}
	}
	if bicnlu.mutation.BillingInvoiceCleared() && len(bicnlu.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceCreditNoteLine.billing_invoice"`)
	}
	if bicnlu.mutation.BillingInvoiceLineCleared() && len(bicnlu.mutation.BillingInvoiceLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceCreditNoteLine.billing_invoice_line"`)
	}
	return nil
}

func (bicnlu *BillingInvoiceCreditNoteLineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bicnlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicecreditnoteline.Table, billinginvoicecreditnoteline.Columns, sqlgraph.NewFieldSpec(billinginvoicecreditnoteline.FieldID, field.TypeString))
	if ps := bicnlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bicnlu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldMetadata, field.TypeJSON, value)
	}
	if bicnlu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bicnlu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bicnlu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDeletedAt, field.TypeTime, value)
	}
	if bicnlu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bicnlu.mutation.Name(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldName, field.TypeString, value)
	}
	if value, ok := bicnlu.mutation.Description(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDescription, field.TypeString, value)
	}
	if bicnlu.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldDescription, field.TypeString)
	}
	if value, ok := bicnlu.mutation.Amount(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.Total(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.ManagedBy(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldManagedBy, field.TypeEnum, value)
	}
	if value, ok := bicnlu.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := bicnlu.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := bicnlu.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := bicnlu.mutation.Status(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bicnlu.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if bicnlu.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := bicnlu.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if bicnlu.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := bicnlu.mutation.CreditNoteAmount(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldCreditNoteAmount, field.TypeOther, value)
	}
	if value, ok := bicnlu.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxConfig, field.TypeJSON, value)
	}
	if bicnlu.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldTaxConfig, field.TypeJSON)
	}
	if bicnlu.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bicnlu.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bicnlu.mutation.BillingInvoiceLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceLineTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bicnlu.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceLineTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bicnlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicecreditnoteline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bicnlu.mutation.done = true
	return n, nil
}

// BillingInvoiceCreditNoteLineUpdateOne is the builder for updating a single BillingInvoiceCreditNoteLine entity.
type BillingInvoiceCreditNoteLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceCreditNoteLineMutation
}

// SetMetadata sets the "metadata" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetMetadata(m)
	return bicnluo
}

// ClearMetadata clears the value of the "metadata" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearMetadata() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearMetadata()
	return bicnluo
}

// SetUpdatedAt sets the "updated_at" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetUpdatedAt(t)
	return bicnluo
}

// SetDeletedAt sets the "deleted_at" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetDeletedAt(t)
	return bicnluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	if t != nil {
		bicnluo.SetDeletedAt(*t)
	}
	return bicnluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearDeletedAt() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearDeletedAt()
	return bicnluo
}

// SetName sets the "name" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetName(s string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetName(s)
	return bicnluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableName(s *string) *BillingInvoiceCreditNoteLineUpdateOne {
	if s != nil {
		bicnluo.SetName(*s)
	}
	return bicnluo
}

// SetDescription sets the "description" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetDescription(s string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetDescription(s)
	return bicnluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableDescription(s *string) *BillingInvoiceCreditNoteLineUpdateOne {
	if s != nil {
		bicnluo.SetDescription(*s)
	}
	return bicnluo
}

// ClearDescription clears the value of the "description" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearDescription() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearDescription()
	return bicnluo
}

// SetAmount sets the "amount" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetAmount(a)
	return bicnluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetAmount(*a)
	}
	return bicnluo
}

// SetTaxesTotal sets the "taxes_total" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetTaxesTotal(a)
	return bicnluo
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableTaxesTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetTaxesTotal(*a)
	}
	return bicnluo
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetTaxesInclusiveTotal(a)
	return bicnluo
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableTaxesInclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetTaxesInclusiveTotal(*a)
	}
	return bicnluo
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetTaxesExclusiveTotal(a)
	return bicnluo
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableTaxesExclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetTaxesExclusiveTotal(*a)
	}
	return bicnluo
}

// SetChargesTotal sets the "charges_total" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetChargesTotal(a)
	return bicnluo
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableChargesTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetChargesTotal(*a)
	}
	return bicnluo
}

// SetDiscountsTotal sets the "discounts_total" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetDiscountsTotal(a)
	return bicnluo
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableDiscountsTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetDiscountsTotal(*a)
	}
	return bicnluo
}

// SetTotal sets the "total" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetTotal(a)
	return bicnluo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableTotal(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetTotal(*a)
	}
	return bicnluo
}

// SetInvoiceID sets the "invoice_id" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetInvoiceID(s string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetInvoiceID(s)
	return bicnluo
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableInvoiceID(s *string) *BillingInvoiceCreditNoteLineUpdateOne {
	if s != nil {
		bicnluo.SetInvoiceID(*s)
	}
	return bicnluo
}

// SetManagedBy sets the "managed_by" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetManagedBy(blmb billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetManagedBy(blmb)
	return bicnluo
}

// SetNillableManagedBy sets the "managed_by" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableManagedBy(blmb *billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpdateOne {
	if blmb != nil {
		bicnluo.SetManagedBy(*blmb)
	}
	return bicnluo
}

// SetPeriodStart sets the "period_start" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetPeriodStart(t time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetPeriodStart(t)
	return bicnluo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillablePeriodStart(t *time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	if t != nil {
		bicnluo.SetPeriodStart(*t)
	}
	return bicnluo
}

// SetPeriodEnd sets the "period_end" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetPeriodEnd(t time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetPeriodEnd(t)
	return bicnluo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	if t != nil {
		bicnluo.SetPeriodEnd(*t)
	}
	return bicnluo
}

// SetInvoiceAt sets the "invoice_at" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetInvoiceAt(t time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetInvoiceAt(t)
	return bicnluo
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableInvoiceAt(t *time.Time) *BillingInvoiceCreditNoteLineUpdateOne {
	if t != nil {
		bicnluo.SetInvoiceAt(*t)
	}
	return bicnluo
}

// SetStatus sets the "status" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetStatus(bls billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetStatus(bls)
	return bicnluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableStatus(bls *billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpdateOne {
	if bls != nil {
		bicnluo.SetStatus(*bls)
	}
	return bicnluo
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetInvoicingAppExternalID(s string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetInvoicingAppExternalID(s)
	return bicnluo
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceCreditNoteLineUpdateOne {
	if s != nil {
		bicnluo.SetInvoicingAppExternalID(*s)
	}
	return bicnluo
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearInvoicingAppExternalID()
	return bicnluo
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetChildUniqueReferenceID(s string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetChildUniqueReferenceID(s)
	return bicnluo
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceCreditNoteLineUpdateOne {
	if s != nil {
		bicnluo.SetChildUniqueReferenceID(*s)
	}
	return bicnluo
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearChildUniqueReferenceID()
	return bicnluo
}

// SetParentLineID sets the "parent_line_id" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetParentLineID(s string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetParentLineID(s)
	return bicnluo
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableParentLineID(s *string) *BillingInvoiceCreditNoteLineUpdateOne {
	if s != nil {
		bicnluo.SetParentLineID(*s)
	}
	return bicnluo
}

// SetCreditNoteAmount sets the "credit_note_amount" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetCreditNoteAmount(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetCreditNoteAmount(a)
	return bicnluo
}

// SetNillableCreditNoteAmount sets the "credit_note_amount" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableCreditNoteAmount(a *alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpdateOne {
	if a != nil {
		bicnluo.SetCreditNoteAmount(*a)
	}
	return bicnluo
}

// SetTaxConfig sets the "tax_config" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetTaxConfig(pc productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetTaxConfig(pc)
	return bicnluo
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetNillableTaxConfig(pc *productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpdateOne {
	if pc != nil {
		bicnluo.SetTaxConfig(*pc)
	}
	return bicnluo
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearTaxConfig() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearTaxConfig()
	return bicnluo
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetBillingInvoiceID(id string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetBillingInvoiceID(id)
	return bicnluo
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceCreditNoteLineUpdateOne {
	return bicnluo.SetBillingInvoiceID(b.ID)
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetBillingInvoiceLineID(id string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.SetBillingInvoiceLineID(id)
	return bicnluo
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceCreditNoteLineUpdateOne {
	return bicnluo.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceCreditNoteLineMutation object of the builder.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) Mutation() *BillingInvoiceCreditNoteLineMutation {
	return bicnluo.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearBillingInvoice() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearBillingInvoice()
	return bicnluo
}

// ClearBillingInvoiceLine clears the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ClearBillingInvoiceLine() *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.ClearBillingInvoiceLine()
	return bicnluo
}

// Where appends a list predicates to the BillingInvoiceCreditNoteLineUpdate builder.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) Where(ps ...predicate.BillingInvoiceCreditNoteLine) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.mutation.Where(ps...)
	return bicnluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) Select(field string, fields ...string) *BillingInvoiceCreditNoteLineUpdateOne {
	bicnluo.fields = append([]string{field}, fields...)
	return bicnluo
}

// Save executes the query and returns the updated BillingInvoiceCreditNoteLine entity.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) Save(ctx context.Context) (*BillingInvoiceCreditNoteLine, error) {
	bicnluo.defaults()
	return withHooks(ctx, bicnluo.sqlSave, bicnluo.mutation, bicnluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) SaveX(ctx context.Context) *BillingInvoiceCreditNoteLine {
	node, err := bicnluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) Exec(ctx context.Context) error {
	_, err := bicnluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) ExecX(ctx context.Context) {
	if err := bicnluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) defaults() {
	if _, ok := bicnluo.mutation.UpdatedAt(); !ok {
		v := billinginvoicecreditnoteline.UpdateDefaultUpdatedAt()
		bicnluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) check() error {
	if v, ok := bicnluo.mutation.ManagedBy(); ok {
		if err := billinginvoicecreditnoteline.ManagedByValidator(v); err != nil {
			return &ValidationError{Name: "managed_by", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.managed_by": %w`, err)}
		}
	}
	if v, ok := bicnluo.mutation.Status(); ok {
		if err := billinginvoicecreditnoteline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.status": %w`, err)}
		}
	}
	if v, ok := bicnluo.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.tax_config": %w`, err)}
		}
	}
	if bicnluo.mutation.BillingInvoiceCleared() && len(bicnluo.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceCreditNoteLine.billing_invoice"`)
	}
	if bicnluo.mutation.BillingInvoiceLineCleared() && len(bicnluo.mutation.BillingInvoiceLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceCreditNoteLine.billing_invoice_line"`)
	}
	return nil
}

func (bicnluo *BillingInvoiceCreditNoteLineUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceCreditNoteLine, err error) {
	if err := bicnluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicecreditnoteline.Table, billinginvoicecreditnoteline.Columns, sqlgraph.NewFieldSpec(billinginvoicecreditnoteline.FieldID, field.TypeString))
	id, ok := bicnluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceCreditNoteLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bicnluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicecreditnoteline.FieldID)
		for _, f := range fields {
			if !billinginvoicecreditnoteline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicecreditnoteline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bicnluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bicnluo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldMetadata, field.TypeJSON, value)
	}
	if bicnluo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bicnluo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bicnluo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDeletedAt, field.TypeTime, value)
	}
	if bicnluo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bicnluo.mutation.Name(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldName, field.TypeString, value)
	}
	if value, ok := bicnluo.mutation.Description(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDescription, field.TypeString, value)
	}
	if bicnluo.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldDescription, field.TypeString)
	}
	if value, ok := bicnluo.mutation.Amount(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.Total(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.ManagedBy(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldManagedBy, field.TypeEnum, value)
	}
	if value, ok := bicnluo.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := bicnluo.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := bicnluo.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := bicnluo.mutation.Status(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bicnluo.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if bicnluo.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := bicnluo.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if bicnluo.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := bicnluo.mutation.CreditNoteAmount(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldCreditNoteAmount, field.TypeOther, value)
	}
	if value, ok := bicnluo.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxConfig, field.TypeJSON, value)
	}
	if bicnluo.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoicecreditnoteline.FieldTaxConfig, field.TypeJSON)
	}
	if bicnluo.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bicnluo.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bicnluo.mutation.BillingInvoiceLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceLineTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bicnluo.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceLineTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceCreditNoteLine{config: bicnluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bicnluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicecreditnoteline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bicnluo.mutation.done = true
	return _node, nil
}

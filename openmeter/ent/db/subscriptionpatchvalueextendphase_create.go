// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueextendphase"
)

// SubscriptionPatchValueExtendPhaseCreate is the builder for creating a SubscriptionPatchValueExtendPhase entity.
type SubscriptionPatchValueExtendPhaseCreate struct {
	config
	mutation *SubscriptionPatchValueExtendPhaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetNamespace(s string) *SubscriptionPatchValueExtendPhaseCreate {
	spvepc.mutation.SetNamespace(s)
	return spvepc
}

// SetSubscriptionPatchID sets the "subscription_patch_id" field.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetSubscriptionPatchID(s string) *SubscriptionPatchValueExtendPhaseCreate {
	spvepc.mutation.SetSubscriptionPatchID(s)
	return spvepc
}

// SetPhaseKey sets the "phase_key" field.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetPhaseKey(s string) *SubscriptionPatchValueExtendPhaseCreate {
	spvepc.mutation.SetPhaseKey(s)
	return spvepc
}

// SetExtendDurationIso sets the "extend_duration_iso" field.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetExtendDurationIso(s string) *SubscriptionPatchValueExtendPhaseCreate {
	spvepc.mutation.SetExtendDurationIso(s)
	return spvepc
}

// SetID sets the "id" field.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetID(s string) *SubscriptionPatchValueExtendPhaseCreate {
	spvepc.mutation.SetID(s)
	return spvepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetNillableID(s *string) *SubscriptionPatchValueExtendPhaseCreate {
	if s != nil {
		spvepc.SetID(*s)
	}
	return spvepc
}

// SetSubscriptionPatch sets the "subscription_patch" edge to the SubscriptionPatch entity.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SetSubscriptionPatch(s *SubscriptionPatch) *SubscriptionPatchValueExtendPhaseCreate {
	return spvepc.SetSubscriptionPatchID(s.ID)
}

// Mutation returns the SubscriptionPatchValueExtendPhaseMutation object of the builder.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) Mutation() *SubscriptionPatchValueExtendPhaseMutation {
	return spvepc.mutation
}

// Save creates the SubscriptionPatchValueExtendPhase in the database.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) Save(ctx context.Context) (*SubscriptionPatchValueExtendPhase, error) {
	spvepc.defaults()
	return withHooks(ctx, spvepc.sqlSave, spvepc.mutation, spvepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) SaveX(ctx context.Context) *SubscriptionPatchValueExtendPhase {
	v, err := spvepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) Exec(ctx context.Context) error {
	_, err := spvepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) ExecX(ctx context.Context) {
	if err := spvepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) defaults() {
	if _, ok := spvepc.mutation.ID(); !ok {
		v := subscriptionpatchvalueextendphase.DefaultID()
		spvepc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) check() error {
	if _, ok := spvepc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionPatchValueExtendPhase.namespace"`)}
	}
	if v, ok := spvepc.mutation.Namespace(); ok {
		if err := subscriptionpatchvalueextendphase.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueExtendPhase.namespace": %w`, err)}
		}
	}
	if _, ok := spvepc.mutation.SubscriptionPatchID(); !ok {
		return &ValidationError{Name: "subscription_patch_id", err: errors.New(`db: missing required field "SubscriptionPatchValueExtendPhase.subscription_patch_id"`)}
	}
	if v, ok := spvepc.mutation.SubscriptionPatchID(); ok {
		if err := subscriptionpatchvalueextendphase.SubscriptionPatchIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_patch_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueExtendPhase.subscription_patch_id": %w`, err)}
		}
	}
	if _, ok := spvepc.mutation.PhaseKey(); !ok {
		return &ValidationError{Name: "phase_key", err: errors.New(`db: missing required field "SubscriptionPatchValueExtendPhase.phase_key"`)}
	}
	if v, ok := spvepc.mutation.PhaseKey(); ok {
		if err := subscriptionpatchvalueextendphase.PhaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "phase_key", err: fmt.Errorf(`db: validator failed for field "SubscriptionPatchValueExtendPhase.phase_key": %w`, err)}
		}
	}
	if _, ok := spvepc.mutation.ExtendDurationIso(); !ok {
		return &ValidationError{Name: "extend_duration_iso", err: errors.New(`db: missing required field "SubscriptionPatchValueExtendPhase.extend_duration_iso"`)}
	}
	if len(spvepc.mutation.SubscriptionPatchIDs()) == 0 {
		return &ValidationError{Name: "subscription_patch", err: errors.New(`db: missing required edge "SubscriptionPatchValueExtendPhase.subscription_patch"`)}
	}
	return nil
}

func (spvepc *SubscriptionPatchValueExtendPhaseCreate) sqlSave(ctx context.Context) (*SubscriptionPatchValueExtendPhase, error) {
	if err := spvepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spvepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spvepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionPatchValueExtendPhase.ID type: %T", _spec.ID.Value)
		}
	}
	spvepc.mutation.id = &_node.ID
	spvepc.mutation.done = true
	return _node, nil
}

func (spvepc *SubscriptionPatchValueExtendPhaseCreate) createSpec() (*SubscriptionPatchValueExtendPhase, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionPatchValueExtendPhase{config: spvepc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionpatchvalueextendphase.Table, sqlgraph.NewFieldSpec(subscriptionpatchvalueextendphase.FieldID, field.TypeString))
	)
	_spec.OnConflict = spvepc.conflict
	if id, ok := spvepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spvepc.mutation.Namespace(); ok {
		_spec.SetField(subscriptionpatchvalueextendphase.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := spvepc.mutation.PhaseKey(); ok {
		_spec.SetField(subscriptionpatchvalueextendphase.FieldPhaseKey, field.TypeString, value)
		_node.PhaseKey = value
	}
	if value, ok := spvepc.mutation.ExtendDurationIso(); ok {
		_spec.SetField(subscriptionpatchvalueextendphase.FieldExtendDurationIso, field.TypeString, value)
		_node.ExtendDurationIso = value
	}
	if nodes := spvepc.mutation.SubscriptionPatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionpatchvalueextendphase.SubscriptionPatchTable,
			Columns: []string{subscriptionpatchvalueextendphase.SubscriptionPatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionPatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueExtendPhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueExtendPhaseUpsertOne {
	spvepc.conflict = opts
	return &SubscriptionPatchValueExtendPhaseUpsertOne{
		create: spvepc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvepc *SubscriptionPatchValueExtendPhaseCreate) OnConflictColumns(columns ...string) *SubscriptionPatchValueExtendPhaseUpsertOne {
	spvepc.conflict = append(spvepc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueExtendPhaseUpsertOne{
		create: spvepc,
	}
}

type (
	// SubscriptionPatchValueExtendPhaseUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionPatchValueExtendPhase node.
	SubscriptionPatchValueExtendPhaseUpsertOne struct {
		create *SubscriptionPatchValueExtendPhaseCreate
	}

	// SubscriptionPatchValueExtendPhaseUpsert is the "OnConflict" setter.
	SubscriptionPatchValueExtendPhaseUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueextendphase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) UpdateNewValues() *SubscriptionPatchValueExtendPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionpatchvalueextendphase.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionpatchvalueextendphase.FieldNamespace)
		}
		if _, exists := u.create.mutation.SubscriptionPatchID(); exists {
			s.SetIgnore(subscriptionpatchvalueextendphase.FieldSubscriptionPatchID)
		}
		if _, exists := u.create.mutation.PhaseKey(); exists {
			s.SetIgnore(subscriptionpatchvalueextendphase.FieldPhaseKey)
		}
		if _, exists := u.create.mutation.ExtendDurationIso(); exists {
			s.SetIgnore(subscriptionpatchvalueextendphase.FieldExtendDurationIso)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) Ignore() *SubscriptionPatchValueExtendPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) DoNothing() *SubscriptionPatchValueExtendPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueExtendPhaseCreate.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) Update(set func(*SubscriptionPatchValueExtendPhaseUpsert)) *SubscriptionPatchValueExtendPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueExtendPhaseUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueExtendPhaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionPatchValueExtendPhaseUpsertOne.ID is not supported by MySQL driver. Use SubscriptionPatchValueExtendPhaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionPatchValueExtendPhaseUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionPatchValueExtendPhaseCreateBulk is the builder for creating many SubscriptionPatchValueExtendPhase entities in bulk.
type SubscriptionPatchValueExtendPhaseCreateBulk struct {
	config
	err      error
	builders []*SubscriptionPatchValueExtendPhaseCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionPatchValueExtendPhase entities in the database.
func (spvepcb *SubscriptionPatchValueExtendPhaseCreateBulk) Save(ctx context.Context) ([]*SubscriptionPatchValueExtendPhase, error) {
	if spvepcb.err != nil {
		return nil, spvepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spvepcb.builders))
	nodes := make([]*SubscriptionPatchValueExtendPhase, len(spvepcb.builders))
	mutators := make([]Mutator, len(spvepcb.builders))
	for i := range spvepcb.builders {
		func(i int, root context.Context) {
			builder := spvepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionPatchValueExtendPhaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spvepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spvepcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spvepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spvepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spvepcb *SubscriptionPatchValueExtendPhaseCreateBulk) SaveX(ctx context.Context) []*SubscriptionPatchValueExtendPhase {
	v, err := spvepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spvepcb *SubscriptionPatchValueExtendPhaseCreateBulk) Exec(ctx context.Context) error {
	_, err := spvepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvepcb *SubscriptionPatchValueExtendPhaseCreateBulk) ExecX(ctx context.Context) {
	if err := spvepcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionPatchValueExtendPhase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionPatchValueExtendPhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (spvepcb *SubscriptionPatchValueExtendPhaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionPatchValueExtendPhaseUpsertBulk {
	spvepcb.conflict = opts
	return &SubscriptionPatchValueExtendPhaseUpsertBulk{
		create: spvepcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spvepcb *SubscriptionPatchValueExtendPhaseCreateBulk) OnConflictColumns(columns ...string) *SubscriptionPatchValueExtendPhaseUpsertBulk {
	spvepcb.conflict = append(spvepcb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionPatchValueExtendPhaseUpsertBulk{
		create: spvepcb,
	}
}

// SubscriptionPatchValueExtendPhaseUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionPatchValueExtendPhase nodes.
type SubscriptionPatchValueExtendPhaseUpsertBulk struct {
	create *SubscriptionPatchValueExtendPhaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionpatchvalueextendphase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionPatchValueExtendPhaseUpsertBulk) UpdateNewValues() *SubscriptionPatchValueExtendPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionpatchvalueextendphase.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionpatchvalueextendphase.FieldNamespace)
			}
			if _, exists := b.mutation.SubscriptionPatchID(); exists {
				s.SetIgnore(subscriptionpatchvalueextendphase.FieldSubscriptionPatchID)
			}
			if _, exists := b.mutation.PhaseKey(); exists {
				s.SetIgnore(subscriptionpatchvalueextendphase.FieldPhaseKey)
			}
			if _, exists := b.mutation.ExtendDurationIso(); exists {
				s.SetIgnore(subscriptionpatchvalueextendphase.FieldExtendDurationIso)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionPatchValueExtendPhase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionPatchValueExtendPhaseUpsertBulk) Ignore() *SubscriptionPatchValueExtendPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionPatchValueExtendPhaseUpsertBulk) DoNothing() *SubscriptionPatchValueExtendPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionPatchValueExtendPhaseCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionPatchValueExtendPhaseUpsertBulk) Update(set func(*SubscriptionPatchValueExtendPhaseUpsert)) *SubscriptionPatchValueExtendPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionPatchValueExtendPhaseUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SubscriptionPatchValueExtendPhaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionPatchValueExtendPhaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionPatchValueExtendPhaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionPatchValueExtendPhaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

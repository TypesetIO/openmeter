// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfigoverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingWorkflowConfigOverrideQuery is the builder for querying BillingWorkflowConfigOverride entities.
type BillingWorkflowConfigOverrideQuery struct {
	config
	ctx        *QueryContext
	order      []billingworkflowconfigoverride.OrderOption
	inters     []Interceptor
	predicates []predicate.BillingWorkflowConfigOverride
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillingWorkflowConfigOverrideQuery builder.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Where(ps ...predicate.BillingWorkflowConfigOverride) *BillingWorkflowConfigOverrideQuery {
	bwcoq.predicates = append(bwcoq.predicates, ps...)
	return bwcoq
}

// Limit the number of records to be returned by this query.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Limit(limit int) *BillingWorkflowConfigOverrideQuery {
	bwcoq.ctx.Limit = &limit
	return bwcoq
}

// Offset to start from.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Offset(offset int) *BillingWorkflowConfigOverrideQuery {
	bwcoq.ctx.Offset = &offset
	return bwcoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Unique(unique bool) *BillingWorkflowConfigOverrideQuery {
	bwcoq.ctx.Unique = &unique
	return bwcoq
}

// Order specifies how the records should be ordered.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Order(o ...billingworkflowconfigoverride.OrderOption) *BillingWorkflowConfigOverrideQuery {
	bwcoq.order = append(bwcoq.order, o...)
	return bwcoq
}

// First returns the first BillingWorkflowConfigOverride entity from the query.
// Returns a *NotFoundError when no BillingWorkflowConfigOverride was found.
func (bwcoq *BillingWorkflowConfigOverrideQuery) First(ctx context.Context) (*BillingWorkflowConfigOverride, error) {
	nodes, err := bwcoq.Limit(1).All(setContextOp(ctx, bwcoq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billingworkflowconfigoverride.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) FirstX(ctx context.Context) *BillingWorkflowConfigOverride {
	node, err := bwcoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillingWorkflowConfigOverride ID from the query.
// Returns a *NotFoundError when no BillingWorkflowConfigOverride ID was found.
func (bwcoq *BillingWorkflowConfigOverrideQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bwcoq.Limit(1).IDs(setContextOp(ctx, bwcoq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billingworkflowconfigoverride.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) FirstIDX(ctx context.Context) string {
	id, err := bwcoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillingWorkflowConfigOverride entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillingWorkflowConfigOverride entity is found.
// Returns a *NotFoundError when no BillingWorkflowConfigOverride entities are found.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Only(ctx context.Context) (*BillingWorkflowConfigOverride, error) {
	nodes, err := bwcoq.Limit(2).All(setContextOp(ctx, bwcoq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billingworkflowconfigoverride.Label}
	default:
		return nil, &NotSingularError{billingworkflowconfigoverride.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) OnlyX(ctx context.Context) *BillingWorkflowConfigOverride {
	node, err := bwcoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillingWorkflowConfigOverride ID in the query.
// Returns a *NotSingularError when more than one BillingWorkflowConfigOverride ID is found.
// Returns a *NotFoundError when no entities are found.
func (bwcoq *BillingWorkflowConfigOverrideQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bwcoq.Limit(2).IDs(setContextOp(ctx, bwcoq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billingworkflowconfigoverride.Label}
	default:
		err = &NotSingularError{billingworkflowconfigoverride.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) OnlyIDX(ctx context.Context) string {
	id, err := bwcoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillingWorkflowConfigOverrides.
func (bwcoq *BillingWorkflowConfigOverrideQuery) All(ctx context.Context) ([]*BillingWorkflowConfigOverride, error) {
	ctx = setContextOp(ctx, bwcoq.ctx, ent.OpQueryAll)
	if err := bwcoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillingWorkflowConfigOverride, *BillingWorkflowConfigOverrideQuery]()
	return withInterceptors[[]*BillingWorkflowConfigOverride](ctx, bwcoq, qr, bwcoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) AllX(ctx context.Context) []*BillingWorkflowConfigOverride {
	nodes, err := bwcoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillingWorkflowConfigOverride IDs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) IDs(ctx context.Context) (ids []string, err error) {
	if bwcoq.ctx.Unique == nil && bwcoq.path != nil {
		bwcoq.Unique(true)
	}
	ctx = setContextOp(ctx, bwcoq.ctx, ent.OpQueryIDs)
	if err = bwcoq.Select(billingworkflowconfigoverride.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) IDsX(ctx context.Context) []string {
	ids, err := bwcoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bwcoq.ctx, ent.OpQueryCount)
	if err := bwcoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bwcoq, querierCount[*BillingWorkflowConfigOverrideQuery](), bwcoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) CountX(ctx context.Context) int {
	count, err := bwcoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bwcoq.ctx, ent.OpQueryExist)
	switch _, err := bwcoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bwcoq *BillingWorkflowConfigOverrideQuery) ExistX(ctx context.Context) bool {
	exist, err := bwcoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillingWorkflowConfigOverrideQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Clone() *BillingWorkflowConfigOverrideQuery {
	if bwcoq == nil {
		return nil
	}
	return &BillingWorkflowConfigOverrideQuery{
		config:     bwcoq.config,
		ctx:        bwcoq.ctx.Clone(),
		order:      append([]billingworkflowconfigoverride.OrderOption{}, bwcoq.order...),
		inters:     append([]Interceptor{}, bwcoq.inters...),
		predicates: append([]predicate.BillingWorkflowConfigOverride{}, bwcoq.predicates...),
		// clone intermediate query.
		sql:  bwcoq.sql.Clone(),
		path: bwcoq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillingWorkflowConfigOverride.Query().
//		GroupBy(billingworkflowconfigoverride.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (bwcoq *BillingWorkflowConfigOverrideQuery) GroupBy(field string, fields ...string) *BillingWorkflowConfigOverrideGroupBy {
	bwcoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillingWorkflowConfigOverrideGroupBy{build: bwcoq}
	grbuild.flds = &bwcoq.ctx.Fields
	grbuild.label = billingworkflowconfigoverride.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.BillingWorkflowConfigOverride.Query().
//		Select(billingworkflowconfigoverride.FieldNamespace).
//		Scan(ctx, &v)
func (bwcoq *BillingWorkflowConfigOverrideQuery) Select(fields ...string) *BillingWorkflowConfigOverrideSelect {
	bwcoq.ctx.Fields = append(bwcoq.ctx.Fields, fields...)
	sbuild := &BillingWorkflowConfigOverrideSelect{BillingWorkflowConfigOverrideQuery: bwcoq}
	sbuild.label = billingworkflowconfigoverride.Label
	sbuild.flds, sbuild.scan = &bwcoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillingWorkflowConfigOverrideSelect configured with the given aggregations.
func (bwcoq *BillingWorkflowConfigOverrideQuery) Aggregate(fns ...AggregateFunc) *BillingWorkflowConfigOverrideSelect {
	return bwcoq.Select().Aggregate(fns...)
}

func (bwcoq *BillingWorkflowConfigOverrideQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bwcoq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bwcoq); err != nil {
				return err
			}
		}
	}
	for _, f := range bwcoq.ctx.Fields {
		if !billingworkflowconfigoverride.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if bwcoq.path != nil {
		prev, err := bwcoq.path(ctx)
		if err != nil {
			return err
		}
		bwcoq.sql = prev
	}
	return nil
}

func (bwcoq *BillingWorkflowConfigOverrideQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BillingWorkflowConfigOverride, error) {
	var (
		nodes = []*BillingWorkflowConfigOverride{}
		_spec = bwcoq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BillingWorkflowConfigOverride).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BillingWorkflowConfigOverride{config: bwcoq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(bwcoq.modifiers) > 0 {
		_spec.Modifiers = bwcoq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bwcoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (bwcoq *BillingWorkflowConfigOverrideQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bwcoq.querySpec()
	if len(bwcoq.modifiers) > 0 {
		_spec.Modifiers = bwcoq.modifiers
	}
	_spec.Node.Columns = bwcoq.ctx.Fields
	if len(bwcoq.ctx.Fields) > 0 {
		_spec.Unique = bwcoq.ctx.Unique != nil && *bwcoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bwcoq.driver, _spec)
}

func (bwcoq *BillingWorkflowConfigOverrideQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(billingworkflowconfigoverride.Table, billingworkflowconfigoverride.Columns, sqlgraph.NewFieldSpec(billingworkflowconfigoverride.FieldID, field.TypeString))
	_spec.From = bwcoq.sql
	if unique := bwcoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bwcoq.path != nil {
		_spec.Unique = true
	}
	if fields := bwcoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingworkflowconfigoverride.FieldID)
		for i := range fields {
			if fields[i] != billingworkflowconfigoverride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bwcoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bwcoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bwcoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bwcoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bwcoq *BillingWorkflowConfigOverrideQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bwcoq.driver.Dialect())
	t1 := builder.Table(billingworkflowconfigoverride.Table)
	columns := bwcoq.ctx.Fields
	if len(columns) == 0 {
		columns = billingworkflowconfigoverride.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bwcoq.sql != nil {
		selector = bwcoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bwcoq.ctx.Unique != nil && *bwcoq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bwcoq.modifiers {
		m(selector)
	}
	for _, p := range bwcoq.predicates {
		p(selector)
	}
	for _, p := range bwcoq.order {
		p(selector)
	}
	if offset := bwcoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bwcoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (bwcoq *BillingWorkflowConfigOverrideQuery) ForUpdate(opts ...sql.LockOption) *BillingWorkflowConfigOverrideQuery {
	if bwcoq.driver.Dialect() == dialect.Postgres {
		bwcoq.Unique(false)
	}
	bwcoq.modifiers = append(bwcoq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return bwcoq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (bwcoq *BillingWorkflowConfigOverrideQuery) ForShare(opts ...sql.LockOption) *BillingWorkflowConfigOverrideQuery {
	if bwcoq.driver.Dialect() == dialect.Postgres {
		bwcoq.Unique(false)
	}
	bwcoq.modifiers = append(bwcoq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return bwcoq
}

// BillingWorkflowConfigOverrideGroupBy is the group-by builder for BillingWorkflowConfigOverride entities.
type BillingWorkflowConfigOverrideGroupBy struct {
	selector
	build *BillingWorkflowConfigOverrideQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bwcogb *BillingWorkflowConfigOverrideGroupBy) Aggregate(fns ...AggregateFunc) *BillingWorkflowConfigOverrideGroupBy {
	bwcogb.fns = append(bwcogb.fns, fns...)
	return bwcogb
}

// Scan applies the selector query and scans the result into the given value.
func (bwcogb *BillingWorkflowConfigOverrideGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bwcogb.build.ctx, ent.OpQueryGroupBy)
	if err := bwcogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingWorkflowConfigOverrideQuery, *BillingWorkflowConfigOverrideGroupBy](ctx, bwcogb.build, bwcogb, bwcogb.build.inters, v)
}

func (bwcogb *BillingWorkflowConfigOverrideGroupBy) sqlScan(ctx context.Context, root *BillingWorkflowConfigOverrideQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bwcogb.fns))
	for _, fn := range bwcogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bwcogb.flds)+len(bwcogb.fns))
		for _, f := range *bwcogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bwcogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bwcogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillingWorkflowConfigOverrideSelect is the builder for selecting fields of BillingWorkflowConfigOverride entities.
type BillingWorkflowConfigOverrideSelect struct {
	*BillingWorkflowConfigOverrideQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bwcos *BillingWorkflowConfigOverrideSelect) Aggregate(fns ...AggregateFunc) *BillingWorkflowConfigOverrideSelect {
	bwcos.fns = append(bwcos.fns, fns...)
	return bwcos
}

// Scan applies the selector query and scans the result into the given value.
func (bwcos *BillingWorkflowConfigOverrideSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bwcos.ctx, ent.OpQuerySelect)
	if err := bwcos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingWorkflowConfigOverrideQuery, *BillingWorkflowConfigOverrideSelect](ctx, bwcos.BillingWorkflowConfigOverrideQuery, bwcos, bwcos.inters, v)
}

func (bwcos *BillingWorkflowConfigOverrideSelect) sqlScan(ctx context.Context, root *BillingWorkflowConfigOverrideQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bwcos.fns))
	for _, fn := range bwcos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bwcos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bwcos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

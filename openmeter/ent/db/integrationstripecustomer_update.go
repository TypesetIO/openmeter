// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/integrationstripecustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// IntegrationStripeCustomerUpdate is the builder for updating IntegrationStripeCustomer entities.
type IntegrationStripeCustomerUpdate struct {
	config
	hooks    []Hook
	mutation *IntegrationStripeCustomerMutation
}

// Where appends a list predicates to the IntegrationStripeCustomerUpdate builder.
func (iscu *IntegrationStripeCustomerUpdate) Where(ps ...predicate.IntegrationStripeCustomer) *IntegrationStripeCustomerUpdate {
	iscu.mutation.Where(ps...)
	return iscu
}

// SetUpdatedAt sets the "updated_at" field.
func (iscu *IntegrationStripeCustomerUpdate) SetUpdatedAt(t time.Time) *IntegrationStripeCustomerUpdate {
	iscu.mutation.SetUpdatedAt(t)
	return iscu
}

// SetDeletedAt sets the "deleted_at" field.
func (iscu *IntegrationStripeCustomerUpdate) SetDeletedAt(t time.Time) *IntegrationStripeCustomerUpdate {
	iscu.mutation.SetDeletedAt(t)
	return iscu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iscu *IntegrationStripeCustomerUpdate) SetNillableDeletedAt(t *time.Time) *IntegrationStripeCustomerUpdate {
	if t != nil {
		iscu.SetDeletedAt(*t)
	}
	return iscu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iscu *IntegrationStripeCustomerUpdate) ClearDeletedAt() *IntegrationStripeCustomerUpdate {
	iscu.mutation.ClearDeletedAt()
	return iscu
}

// SetCustomerID sets the "customer_id" field.
func (iscu *IntegrationStripeCustomerUpdate) SetCustomerID(s string) *IntegrationStripeCustomerUpdate {
	iscu.mutation.SetCustomerID(s)
	return iscu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (iscu *IntegrationStripeCustomerUpdate) SetNillableCustomerID(s *string) *IntegrationStripeCustomerUpdate {
	if s != nil {
		iscu.SetCustomerID(*s)
	}
	return iscu
}

// Mutation returns the IntegrationStripeCustomerMutation object of the builder.
func (iscu *IntegrationStripeCustomerUpdate) Mutation() *IntegrationStripeCustomerMutation {
	return iscu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iscu *IntegrationStripeCustomerUpdate) Save(ctx context.Context) (int, error) {
	iscu.defaults()
	return withHooks(ctx, iscu.sqlSave, iscu.mutation, iscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iscu *IntegrationStripeCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := iscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iscu *IntegrationStripeCustomerUpdate) Exec(ctx context.Context) error {
	_, err := iscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscu *IntegrationStripeCustomerUpdate) ExecX(ctx context.Context) {
	if err := iscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscu *IntegrationStripeCustomerUpdate) defaults() {
	if _, ok := iscu.mutation.UpdatedAt(); !ok {
		v := integrationstripecustomer.UpdateDefaultUpdatedAt()
		iscu.mutation.SetUpdatedAt(v)
	}
}

func (iscu *IntegrationStripeCustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(integrationstripecustomer.Table, integrationstripecustomer.Columns, sqlgraph.NewFieldSpec(integrationstripecustomer.FieldID, field.TypeInt))
	if ps := iscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscu.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iscu.mutation.DeletedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if iscu.mutation.DeletedAtCleared() {
		_spec.ClearField(integrationstripecustomer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iscu.mutation.CustomerID(); ok {
		_spec.SetField(integrationstripecustomer.FieldCustomerID, field.TypeString, value)
	}
	if iscu.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(integrationstripecustomer.FieldStripeCustomerID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrationstripecustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iscu.mutation.done = true
	return n, nil
}

// IntegrationStripeCustomerUpdateOne is the builder for updating a single IntegrationStripeCustomer entity.
type IntegrationStripeCustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntegrationStripeCustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iscuo *IntegrationStripeCustomerUpdateOne) SetUpdatedAt(t time.Time) *IntegrationStripeCustomerUpdateOne {
	iscuo.mutation.SetUpdatedAt(t)
	return iscuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iscuo *IntegrationStripeCustomerUpdateOne) SetDeletedAt(t time.Time) *IntegrationStripeCustomerUpdateOne {
	iscuo.mutation.SetDeletedAt(t)
	return iscuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iscuo *IntegrationStripeCustomerUpdateOne) SetNillableDeletedAt(t *time.Time) *IntegrationStripeCustomerUpdateOne {
	if t != nil {
		iscuo.SetDeletedAt(*t)
	}
	return iscuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iscuo *IntegrationStripeCustomerUpdateOne) ClearDeletedAt() *IntegrationStripeCustomerUpdateOne {
	iscuo.mutation.ClearDeletedAt()
	return iscuo
}

// SetCustomerID sets the "customer_id" field.
func (iscuo *IntegrationStripeCustomerUpdateOne) SetCustomerID(s string) *IntegrationStripeCustomerUpdateOne {
	iscuo.mutation.SetCustomerID(s)
	return iscuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (iscuo *IntegrationStripeCustomerUpdateOne) SetNillableCustomerID(s *string) *IntegrationStripeCustomerUpdateOne {
	if s != nil {
		iscuo.SetCustomerID(*s)
	}
	return iscuo
}

// Mutation returns the IntegrationStripeCustomerMutation object of the builder.
func (iscuo *IntegrationStripeCustomerUpdateOne) Mutation() *IntegrationStripeCustomerMutation {
	return iscuo.mutation
}

// Where appends a list predicates to the IntegrationStripeCustomerUpdate builder.
func (iscuo *IntegrationStripeCustomerUpdateOne) Where(ps ...predicate.IntegrationStripeCustomer) *IntegrationStripeCustomerUpdateOne {
	iscuo.mutation.Where(ps...)
	return iscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iscuo *IntegrationStripeCustomerUpdateOne) Select(field string, fields ...string) *IntegrationStripeCustomerUpdateOne {
	iscuo.fields = append([]string{field}, fields...)
	return iscuo
}

// Save executes the query and returns the updated IntegrationStripeCustomer entity.
func (iscuo *IntegrationStripeCustomerUpdateOne) Save(ctx context.Context) (*IntegrationStripeCustomer, error) {
	iscuo.defaults()
	return withHooks(ctx, iscuo.sqlSave, iscuo.mutation, iscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iscuo *IntegrationStripeCustomerUpdateOne) SaveX(ctx context.Context) *IntegrationStripeCustomer {
	node, err := iscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iscuo *IntegrationStripeCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := iscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscuo *IntegrationStripeCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := iscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscuo *IntegrationStripeCustomerUpdateOne) defaults() {
	if _, ok := iscuo.mutation.UpdatedAt(); !ok {
		v := integrationstripecustomer.UpdateDefaultUpdatedAt()
		iscuo.mutation.SetUpdatedAt(v)
	}
}

func (iscuo *IntegrationStripeCustomerUpdateOne) sqlSave(ctx context.Context) (_node *IntegrationStripeCustomer, err error) {
	_spec := sqlgraph.NewUpdateSpec(integrationstripecustomer.Table, integrationstripecustomer.Columns, sqlgraph.NewFieldSpec(integrationstripecustomer.FieldID, field.TypeInt))
	id, ok := iscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "IntegrationStripeCustomer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, integrationstripecustomer.FieldID)
		for _, f := range fields {
			if !integrationstripecustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != integrationstripecustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscuo.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iscuo.mutation.DeletedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if iscuo.mutation.DeletedAtCleared() {
		_spec.ClearField(integrationstripecustomer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iscuo.mutation.CustomerID(); ok {
		_spec.SetField(integrationstripecustomer.FieldCustomerID, field.TypeString, value)
	}
	if iscuo.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(integrationstripecustomer.FieldStripeCustomerID, field.TypeString)
	}
	_node = &IntegrationStripeCustomer{config: iscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrationstripecustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iscuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicecreditnoteline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceCreditNoteLineCreate is the builder for creating a BillingInvoiceCreditNoteLine entity.
type BillingInvoiceCreditNoteLineCreate struct {
	config
	mutation *BillingInvoiceCreditNoteLineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNamespace(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetNamespace(s)
	return bicnlc
}

// SetMetadata sets the "metadata" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetMetadata(m map[string]string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetMetadata(m)
	return bicnlc
}

// SetCreatedAt sets the "created_at" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetCreatedAt(t time.Time) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetCreatedAt(t)
	return bicnlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceCreditNoteLineCreate {
	if t != nil {
		bicnlc.SetCreatedAt(*t)
	}
	return bicnlc
}

// SetUpdatedAt sets the "updated_at" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetUpdatedAt(t time.Time) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetUpdatedAt(t)
	return bicnlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceCreditNoteLineCreate {
	if t != nil {
		bicnlc.SetUpdatedAt(*t)
	}
	return bicnlc
}

// SetDeletedAt sets the "deleted_at" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetDeletedAt(t time.Time) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetDeletedAt(t)
	return bicnlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceCreditNoteLineCreate {
	if t != nil {
		bicnlc.SetDeletedAt(*t)
	}
	return bicnlc
}

// SetName sets the "name" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetName(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetName(s)
	return bicnlc
}

// SetDescription sets the "description" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetDescription(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetDescription(s)
	return bicnlc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableDescription(s *string) *BillingInvoiceCreditNoteLineCreate {
	if s != nil {
		bicnlc.SetDescription(*s)
	}
	return bicnlc
}

// SetAmount sets the "amount" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetAmount(a)
	return bicnlc
}

// SetTaxesTotal sets the "taxes_total" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetTaxesTotal(a)
	return bicnlc
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetTaxesInclusiveTotal(a)
	return bicnlc
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetTaxesExclusiveTotal(a)
	return bicnlc
}

// SetChargesTotal sets the "charges_total" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetChargesTotal(a)
	return bicnlc
}

// SetDiscountsTotal sets the "discounts_total" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetDiscountsTotal(a)
	return bicnlc
}

// SetTotal sets the "total" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetTotal(a)
	return bicnlc
}

// SetInvoiceID sets the "invoice_id" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetInvoiceID(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetInvoiceID(s)
	return bicnlc
}

// SetManagedBy sets the "managed_by" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetManagedBy(blmb billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetManagedBy(blmb)
	return bicnlc
}

// SetPeriodStart sets the "period_start" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetPeriodStart(t time.Time) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetPeriodStart(t)
	return bicnlc
}

// SetPeriodEnd sets the "period_end" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetPeriodEnd(t time.Time) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetPeriodEnd(t)
	return bicnlc
}

// SetInvoiceAt sets the "invoice_at" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetInvoiceAt(t time.Time) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetInvoiceAt(t)
	return bicnlc
}

// SetStatus sets the "status" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetStatus(bls billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetStatus(bls)
	return bicnlc
}

// SetCurrency sets the "currency" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetCurrency(c currencyx.Code) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetCurrency(c)
	return bicnlc
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetInvoicingAppExternalID(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetInvoicingAppExternalID(s)
	return bicnlc
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceCreditNoteLineCreate {
	if s != nil {
		bicnlc.SetInvoicingAppExternalID(*s)
	}
	return bicnlc
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetChildUniqueReferenceID(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetChildUniqueReferenceID(s)
	return bicnlc
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceCreditNoteLineCreate {
	if s != nil {
		bicnlc.SetChildUniqueReferenceID(*s)
	}
	return bicnlc
}

// SetParentLineID sets the "parent_line_id" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetParentLineID(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetParentLineID(s)
	return bicnlc
}

// SetCreditNoteAmount sets the "credit_note_amount" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetCreditNoteAmount(a alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetCreditNoteAmount(a)
	return bicnlc
}

// SetTaxConfig sets the "tax_config" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetTaxConfig(pc productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetTaxConfig(pc)
	return bicnlc
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableTaxConfig(pc *productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineCreate {
	if pc != nil {
		bicnlc.SetTaxConfig(*pc)
	}
	return bicnlc
}

// SetID sets the "id" field.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetID(s string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetID(s)
	return bicnlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetNillableID(s *string) *BillingInvoiceCreditNoteLineCreate {
	if s != nil {
		bicnlc.SetID(*s)
	}
	return bicnlc
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetBillingInvoiceID(id string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetBillingInvoiceID(id)
	return bicnlc
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceCreditNoteLineCreate {
	return bicnlc.SetBillingInvoiceID(b.ID)
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetBillingInvoiceLineID(id string) *BillingInvoiceCreditNoteLineCreate {
	bicnlc.mutation.SetBillingInvoiceLineID(id)
	return bicnlc
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceCreditNoteLineCreate {
	return bicnlc.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceCreditNoteLineMutation object of the builder.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) Mutation() *BillingInvoiceCreditNoteLineMutation {
	return bicnlc.mutation
}

// Save creates the BillingInvoiceCreditNoteLine in the database.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) Save(ctx context.Context) (*BillingInvoiceCreditNoteLine, error) {
	bicnlc.defaults()
	return withHooks(ctx, bicnlc.sqlSave, bicnlc.mutation, bicnlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) SaveX(ctx context.Context) *BillingInvoiceCreditNoteLine {
	v, err := bicnlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) Exec(ctx context.Context) error {
	_, err := bicnlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) ExecX(ctx context.Context) {
	if err := bicnlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) defaults() {
	if _, ok := bicnlc.mutation.CreatedAt(); !ok {
		v := billinginvoicecreditnoteline.DefaultCreatedAt()
		bicnlc.mutation.SetCreatedAt(v)
	}
	if _, ok := bicnlc.mutation.UpdatedAt(); !ok {
		v := billinginvoicecreditnoteline.DefaultUpdatedAt()
		bicnlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bicnlc.mutation.ID(); !ok {
		v := billinginvoicecreditnoteline.DefaultID()
		bicnlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bicnlc *BillingInvoiceCreditNoteLineCreate) check() error {
	if _, ok := bicnlc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.namespace"`)}
	}
	if v, ok := bicnlc.mutation.Namespace(); ok {
		if err := billinginvoicecreditnoteline.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.namespace": %w`, err)}
		}
	}
	if _, ok := bicnlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.created_at"`)}
	}
	if _, ok := bicnlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.updated_at"`)}
	}
	if _, ok := bicnlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.name"`)}
	}
	if _, ok := bicnlc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.amount"`)}
	}
	if _, ok := bicnlc.mutation.TaxesTotal(); !ok {
		return &ValidationError{Name: "taxes_total", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.taxes_total"`)}
	}
	if _, ok := bicnlc.mutation.TaxesInclusiveTotal(); !ok {
		return &ValidationError{Name: "taxes_inclusive_total", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.taxes_inclusive_total"`)}
	}
	if _, ok := bicnlc.mutation.TaxesExclusiveTotal(); !ok {
		return &ValidationError{Name: "taxes_exclusive_total", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.taxes_exclusive_total"`)}
	}
	if _, ok := bicnlc.mutation.ChargesTotal(); !ok {
		return &ValidationError{Name: "charges_total", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.charges_total"`)}
	}
	if _, ok := bicnlc.mutation.DiscountsTotal(); !ok {
		return &ValidationError{Name: "discounts_total", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.discounts_total"`)}
	}
	if _, ok := bicnlc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.total"`)}
	}
	if _, ok := bicnlc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.invoice_id"`)}
	}
	if _, ok := bicnlc.mutation.ManagedBy(); !ok {
		return &ValidationError{Name: "managed_by", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.managed_by"`)}
	}
	if v, ok := bicnlc.mutation.ManagedBy(); ok {
		if err := billinginvoicecreditnoteline.ManagedByValidator(v); err != nil {
			return &ValidationError{Name: "managed_by", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.managed_by": %w`, err)}
		}
	}
	if _, ok := bicnlc.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.period_start"`)}
	}
	if _, ok := bicnlc.mutation.PeriodEnd(); !ok {
		return &ValidationError{Name: "period_end", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.period_end"`)}
	}
	if _, ok := bicnlc.mutation.InvoiceAt(); !ok {
		return &ValidationError{Name: "invoice_at", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.invoice_at"`)}
	}
	if _, ok := bicnlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.status"`)}
	}
	if v, ok := bicnlc.mutation.Status(); ok {
		if err := billinginvoicecreditnoteline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.status": %w`, err)}
		}
	}
	if _, ok := bicnlc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.currency"`)}
	}
	if v, ok := bicnlc.mutation.Currency(); ok {
		if err := billinginvoicecreditnoteline.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.currency": %w`, err)}
		}
	}
	if _, ok := bicnlc.mutation.ParentLineID(); !ok {
		return &ValidationError{Name: "parent_line_id", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.parent_line_id"`)}
	}
	if _, ok := bicnlc.mutation.CreditNoteAmount(); !ok {
		return &ValidationError{Name: "credit_note_amount", err: errors.New(`db: missing required field "BillingInvoiceCreditNoteLine.credit_note_amount"`)}
	}
	if v, ok := bicnlc.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceCreditNoteLine.tax_config": %w`, err)}
		}
	}
	if len(bicnlc.mutation.BillingInvoiceIDs()) == 0 {
		return &ValidationError{Name: "billing_invoice", err: errors.New(`db: missing required edge "BillingInvoiceCreditNoteLine.billing_invoice"`)}
	}
	if len(bicnlc.mutation.BillingInvoiceLineIDs()) == 0 {
		return &ValidationError{Name: "billing_invoice_line", err: errors.New(`db: missing required edge "BillingInvoiceCreditNoteLine.billing_invoice_line"`)}
	}
	return nil
}

func (bicnlc *BillingInvoiceCreditNoteLineCreate) sqlSave(ctx context.Context) (*BillingInvoiceCreditNoteLine, error) {
	if err := bicnlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bicnlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bicnlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceCreditNoteLine.ID type: %T", _spec.ID.Value)
		}
	}
	bicnlc.mutation.id = &_node.ID
	bicnlc.mutation.done = true
	return _node, nil
}

func (bicnlc *BillingInvoiceCreditNoteLineCreate) createSpec() (*BillingInvoiceCreditNoteLine, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoiceCreditNoteLine{config: bicnlc.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicecreditnoteline.Table, sqlgraph.NewFieldSpec(billinginvoicecreditnoteline.FieldID, field.TypeString))
	)
	_spec.OnConflict = bicnlc.conflict
	if id, ok := bicnlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bicnlc.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bicnlc.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bicnlc.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bicnlc.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bicnlc.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bicnlc.mutation.Name(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bicnlc.mutation.Description(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := bicnlc.mutation.Amount(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := bicnlc.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesTotal, field.TypeOther, value)
		_node.TaxesTotal = value
	}
	if value, ok := bicnlc.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesInclusiveTotal, field.TypeOther, value)
		_node.TaxesInclusiveTotal = value
	}
	if value, ok := bicnlc.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxesExclusiveTotal, field.TypeOther, value)
		_node.TaxesExclusiveTotal = value
	}
	if value, ok := bicnlc.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldChargesTotal, field.TypeOther, value)
		_node.ChargesTotal = value
	}
	if value, ok := bicnlc.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldDiscountsTotal, field.TypeOther, value)
		_node.DiscountsTotal = value
	}
	if value, ok := bicnlc.mutation.Total(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTotal, field.TypeOther, value)
		_node.Total = value
	}
	if value, ok := bicnlc.mutation.ManagedBy(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldManagedBy, field.TypeEnum, value)
		_node.ManagedBy = value
	}
	if value, ok := bicnlc.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = value
	}
	if value, ok := bicnlc.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldPeriodEnd, field.TypeTime, value)
		_node.PeriodEnd = value
	}
	if value, ok := bicnlc.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldInvoiceAt, field.TypeTime, value)
		_node.InvoiceAt = value
	}
	if value, ok := bicnlc.mutation.Status(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bicnlc.mutation.Currency(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := bicnlc.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldInvoicingAppExternalID, field.TypeString, value)
		_node.InvoicingAppExternalID = &value
	}
	if value, ok := bicnlc.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldChildUniqueReferenceID, field.TypeString, value)
		_node.ChildUniqueReferenceID = &value
	}
	if value, ok := bicnlc.mutation.CreditNoteAmount(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldCreditNoteAmount, field.TypeOther, value)
		_node.CreditNoteAmount = value
	}
	if value, ok := bicnlc.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicecreditnoteline.FieldTaxConfig, field.TypeJSON, value)
		_node.TaxConfig = value
	}
	if nodes := bicnlc.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bicnlc.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicecreditnoteline.BillingInvoiceLineTable,
			Columns: []string{billinginvoicecreditnoteline.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentLineID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceCreditNoteLineUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bicnlc *BillingInvoiceCreditNoteLineCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceCreditNoteLineUpsertOne {
	bicnlc.conflict = opts
	return &BillingInvoiceCreditNoteLineUpsertOne{
		create: bicnlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bicnlc *BillingInvoiceCreditNoteLineCreate) OnConflictColumns(columns ...string) *BillingInvoiceCreditNoteLineUpsertOne {
	bicnlc.conflict = append(bicnlc.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceCreditNoteLineUpsertOne{
		create: bicnlc,
	}
}

type (
	// BillingInvoiceCreditNoteLineUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceCreditNoteLine node.
	BillingInvoiceCreditNoteLineUpsertOne struct {
		create *BillingInvoiceCreditNoteLineCreate
	}

	// BillingInvoiceCreditNoteLineUpsert is the "OnConflict" setter.
	BillingInvoiceCreditNoteLineUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetMetadata(v map[string]string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateMetadata() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceCreditNoteLineUpsert) ClearMetadata() *BillingInvoiceCreditNoteLineUpsert {
	u.SetNull(billinginvoicecreditnoteline.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateUpdatedAt() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetDeletedAt(v time.Time) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateDeletedAt() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceCreditNoteLineUpsert) ClearDeletedAt() *BillingInvoiceCreditNoteLineUpsert {
	u.SetNull(billinginvoicecreditnoteline.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetName(v string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateName() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetDescription(v string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateDescription() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceCreditNoteLineUpsert) ClearDescription() *BillingInvoiceCreditNoteLineUpsert {
	u.SetNull(billinginvoicecreditnoteline.FieldDescription)
	return u
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateAmount() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldAmount)
	return u
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldTaxesTotal, v)
	return u
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateTaxesTotal() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldTaxesTotal)
	return u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldTaxesInclusiveTotal, v)
	return u
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateTaxesInclusiveTotal() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldTaxesInclusiveTotal)
	return u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldTaxesExclusiveTotal, v)
	return u
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateTaxesExclusiveTotal() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldTaxesExclusiveTotal)
	return u
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldChargesTotal, v)
	return u
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateChargesTotal() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldChargesTotal)
	return u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldDiscountsTotal, v)
	return u
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateDiscountsTotal() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldDiscountsTotal)
	return u
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateTotal() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldTotal)
	return u
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetInvoiceID(v string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateInvoiceID() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldInvoiceID)
	return u
}

// SetManagedBy sets the "managed_by" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetManagedBy(v billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldManagedBy, v)
	return u
}

// UpdateManagedBy sets the "managed_by" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateManagedBy() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldManagedBy)
	return u
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetPeriodStart(v time.Time) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldPeriodStart, v)
	return u
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdatePeriodStart() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldPeriodStart)
	return u
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetPeriodEnd(v time.Time) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldPeriodEnd, v)
	return u
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdatePeriodEnd() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldPeriodEnd)
	return u
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetInvoiceAt(v time.Time) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldInvoiceAt, v)
	return u
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateInvoiceAt() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldInvoiceAt)
	return u
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateStatus() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldStatus)
	return u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetInvoicingAppExternalID(v string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldInvoicingAppExternalID, v)
	return u
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldInvoicingAppExternalID)
	return u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceCreditNoteLineUpsert) ClearInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpsert {
	u.SetNull(billinginvoicecreditnoteline.FieldInvoicingAppExternalID)
	return u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetChildUniqueReferenceID(v string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldChildUniqueReferenceID, v)
	return u
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldChildUniqueReferenceID)
	return u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceCreditNoteLineUpsert) ClearChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpsert {
	u.SetNull(billinginvoicecreditnoteline.FieldChildUniqueReferenceID)
	return u
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetParentLineID(v string) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldParentLineID, v)
	return u
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateParentLineID() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldParentLineID)
	return u
}

// SetCreditNoteAmount sets the "credit_note_amount" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetCreditNoteAmount(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldCreditNoteAmount, v)
	return u
}

// UpdateCreditNoteAmount sets the "credit_note_amount" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateCreditNoteAmount() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldCreditNoteAmount)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceCreditNoteLineUpsert) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpsert {
	u.Set(billinginvoicecreditnoteline.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsert) UpdateTaxConfig() *BillingInvoiceCreditNoteLineUpsert {
	u.SetExcluded(billinginvoicecreditnoteline.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceCreditNoteLineUpsert) ClearTaxConfig() *BillingInvoiceCreditNoteLineUpsert {
	u.SetNull(billinginvoicecreditnoteline.FieldTaxConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicecreditnoteline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateNewValues() *BillingInvoiceCreditNoteLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicecreditnoteline.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicecreditnoteline.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicecreditnoteline.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billinginvoicecreditnoteline.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceCreditNoteLineUpsertOne) Ignore() *BillingInvoiceCreditNoteLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceCreditNoteLineUpsertOne) DoNothing() *BillingInvoiceCreditNoteLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceCreditNoteLineCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceCreditNoteLineUpsertOne) Update(set func(*BillingInvoiceCreditNoteLineUpsert)) *BillingInvoiceCreditNoteLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceCreditNoteLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateMetadata() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ClearMetadata() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateUpdatedAt() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateDeletedAt() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ClearDeletedAt() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetName(v string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateName() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetDescription(v string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateDescription() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ClearDescription() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearDescription()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateAmount() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateAmount()
	})
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxesTotal(v)
	})
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateTaxesTotal() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxesTotal()
	})
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxesInclusiveTotal(v)
	})
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateTaxesInclusiveTotal() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxesInclusiveTotal()
	})
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxesExclusiveTotal(v)
	})
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateTaxesExclusiveTotal() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxesExclusiveTotal()
	})
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetChargesTotal(v)
	})
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateChargesTotal() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateChargesTotal()
	})
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetDiscountsTotal(v)
	})
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateDiscountsTotal() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateDiscountsTotal()
	})
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateTotal() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTotal()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetInvoiceID(v string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateInvoiceID() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetManagedBy sets the "managed_by" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetManagedBy(v billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetManagedBy(v)
	})
}

// UpdateManagedBy sets the "managed_by" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateManagedBy() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateManagedBy()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetPeriodStart(v time.Time) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdatePeriodStart() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetPeriodEnd(v time.Time) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdatePeriodEnd() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdatePeriodEnd()
	})
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetInvoiceAt(v time.Time) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetInvoiceAt(v)
	})
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateInvoiceAt() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateInvoiceAt()
	})
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateStatus() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateStatus()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetInvoicingAppExternalID(v string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ClearInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetChildUniqueReferenceID(v string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ClearChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetParentLineID(v string) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetParentLineID(v)
	})
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateParentLineID() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateParentLineID()
	})
}

// SetCreditNoteAmount sets the "credit_note_amount" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetCreditNoteAmount(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetCreditNoteAmount(v)
	})
}

// UpdateCreditNoteAmount sets the "credit_note_amount" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateCreditNoteAmount() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateCreditNoteAmount()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertOne) UpdateTaxConfig() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ClearTaxConfig() *BillingInvoiceCreditNoteLineUpsertOne {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearTaxConfig()
	})
}

// Exec executes the query.
func (u *BillingInvoiceCreditNoteLineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceCreditNoteLineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceCreditNoteLineUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceCreditNoteLineUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceCreditNoteLineUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceCreditNoteLineUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceCreditNoteLineCreateBulk is the builder for creating many BillingInvoiceCreditNoteLine entities in bulk.
type BillingInvoiceCreditNoteLineCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceCreditNoteLineCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceCreditNoteLine entities in the database.
func (bicnlcb *BillingInvoiceCreditNoteLineCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceCreditNoteLine, error) {
	if bicnlcb.err != nil {
		return nil, bicnlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bicnlcb.builders))
	nodes := make([]*BillingInvoiceCreditNoteLine, len(bicnlcb.builders))
	mutators := make([]Mutator, len(bicnlcb.builders))
	for i := range bicnlcb.builders {
		func(i int, root context.Context) {
			builder := bicnlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceCreditNoteLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicnlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bicnlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicnlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicnlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicnlcb *BillingInvoiceCreditNoteLineCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceCreditNoteLine {
	v, err := bicnlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicnlcb *BillingInvoiceCreditNoteLineCreateBulk) Exec(ctx context.Context) error {
	_, err := bicnlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicnlcb *BillingInvoiceCreditNoteLineCreateBulk) ExecX(ctx context.Context) {
	if err := bicnlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceCreditNoteLine.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceCreditNoteLineUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bicnlcb *BillingInvoiceCreditNoteLineCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceCreditNoteLineUpsertBulk {
	bicnlcb.conflict = opts
	return &BillingInvoiceCreditNoteLineUpsertBulk{
		create: bicnlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bicnlcb *BillingInvoiceCreditNoteLineCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceCreditNoteLineUpsertBulk {
	bicnlcb.conflict = append(bicnlcb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceCreditNoteLineUpsertBulk{
		create: bicnlcb,
	}
}

// BillingInvoiceCreditNoteLineUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceCreditNoteLine nodes.
type BillingInvoiceCreditNoteLineUpsertBulk struct {
	create *BillingInvoiceCreditNoteLineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicecreditnoteline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateNewValues() *BillingInvoiceCreditNoteLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicecreditnoteline.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicecreditnoteline.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicecreditnoteline.FieldCreatedAt)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billinginvoicecreditnoteline.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceCreditNoteLine.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceCreditNoteLineUpsertBulk) Ignore() *BillingInvoiceCreditNoteLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) DoNothing() *BillingInvoiceCreditNoteLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceCreditNoteLineCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) Update(set func(*BillingInvoiceCreditNoteLineUpsert)) *BillingInvoiceCreditNoteLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceCreditNoteLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateMetadata() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ClearMetadata() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateUpdatedAt() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateDeletedAt() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ClearDeletedAt() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetName(v string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateName() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetDescription(v string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateDescription() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ClearDescription() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearDescription()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateAmount() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateAmount()
	})
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxesTotal(v)
	})
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateTaxesTotal() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxesTotal()
	})
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxesInclusiveTotal(v)
	})
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateTaxesInclusiveTotal() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxesInclusiveTotal()
	})
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxesExclusiveTotal(v)
	})
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateTaxesExclusiveTotal() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxesExclusiveTotal()
	})
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetChargesTotal(v)
	})
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateChargesTotal() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateChargesTotal()
	})
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetDiscountsTotal(v)
	})
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateDiscountsTotal() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateDiscountsTotal()
	})
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateTotal() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTotal()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetInvoiceID(v string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateInvoiceID() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetManagedBy sets the "managed_by" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetManagedBy(v billing.InvoiceLineManagedBy) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetManagedBy(v)
	})
}

// UpdateManagedBy sets the "managed_by" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateManagedBy() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateManagedBy()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetPeriodStart(v time.Time) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdatePeriodStart() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetPeriodEnd(v time.Time) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdatePeriodEnd() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdatePeriodEnd()
	})
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetInvoiceAt(v time.Time) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetInvoiceAt(v)
	})
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateInvoiceAt() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateInvoiceAt()
	})
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateStatus() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateStatus()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetInvoicingAppExternalID(v string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ClearInvoicingAppExternalID() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetChildUniqueReferenceID(v string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ClearChildUniqueReferenceID() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetParentLineID(v string) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetParentLineID(v)
	})
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateParentLineID() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateParentLineID()
	})
}

// SetCreditNoteAmount sets the "credit_note_amount" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetCreditNoteAmount(v alpacadecimal.Decimal) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetCreditNoteAmount(v)
	})
}

// UpdateCreditNoteAmount sets the "credit_note_amount" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateCreditNoteAmount() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateCreditNoteAmount()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) UpdateTaxConfig() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ClearTaxConfig() *BillingInvoiceCreditNoteLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceCreditNoteLineUpsert) {
		s.ClearTaxConfig()
	})
}

// Exec executes the query.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceCreditNoteLineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceCreditNoteLineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceCreditNoteLineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

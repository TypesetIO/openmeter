// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicecreditnoteline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceCreditNoteLineQuery is the builder for querying BillingInvoiceCreditNoteLine entities.
type BillingInvoiceCreditNoteLineQuery struct {
	config
	ctx                    *QueryContext
	order                  []billinginvoicecreditnoteline.OrderOption
	inters                 []Interceptor
	predicates             []predicate.BillingInvoiceCreditNoteLine
	withBillingInvoice     *BillingInvoiceQuery
	withBillingInvoiceLine *BillingInvoiceLineQuery
	modifiers              []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillingInvoiceCreditNoteLineQuery builder.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Where(ps ...predicate.BillingInvoiceCreditNoteLine) *BillingInvoiceCreditNoteLineQuery {
	bicnlq.predicates = append(bicnlq.predicates, ps...)
	return bicnlq
}

// Limit the number of records to be returned by this query.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Limit(limit int) *BillingInvoiceCreditNoteLineQuery {
	bicnlq.ctx.Limit = &limit
	return bicnlq
}

// Offset to start from.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Offset(offset int) *BillingInvoiceCreditNoteLineQuery {
	bicnlq.ctx.Offset = &offset
	return bicnlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Unique(unique bool) *BillingInvoiceCreditNoteLineQuery {
	bicnlq.ctx.Unique = &unique
	return bicnlq
}

// Order specifies how the records should be ordered.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Order(o ...billinginvoicecreditnoteline.OrderOption) *BillingInvoiceCreditNoteLineQuery {
	bicnlq.order = append(bicnlq.order, o...)
	return bicnlq
}

// QueryBillingInvoice chains the current query on the "billing_invoice" edge.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) QueryBillingInvoice() *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: bicnlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bicnlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bicnlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoicecreditnoteline.Table, billinginvoicecreditnoteline.FieldID, selector),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoicecreditnoteline.BillingInvoiceTable, billinginvoicecreditnoteline.BillingInvoiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(bicnlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingInvoiceLine chains the current query on the "billing_invoice_line" edge.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) QueryBillingInvoiceLine() *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: bicnlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bicnlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bicnlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoicecreditnoteline.Table, billinginvoicecreditnoteline.FieldID, selector),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoicecreditnoteline.BillingInvoiceLineTable, billinginvoicecreditnoteline.BillingInvoiceLineColumn),
		)
		fromU = sqlgraph.SetNeighbors(bicnlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BillingInvoiceCreditNoteLine entity from the query.
// Returns a *NotFoundError when no BillingInvoiceCreditNoteLine was found.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) First(ctx context.Context) (*BillingInvoiceCreditNoteLine, error) {
	nodes, err := bicnlq.Limit(1).All(setContextOp(ctx, bicnlq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billinginvoicecreditnoteline.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) FirstX(ctx context.Context) *BillingInvoiceCreditNoteLine {
	node, err := bicnlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillingInvoiceCreditNoteLine ID from the query.
// Returns a *NotFoundError when no BillingInvoiceCreditNoteLine ID was found.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bicnlq.Limit(1).IDs(setContextOp(ctx, bicnlq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billinginvoicecreditnoteline.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) FirstIDX(ctx context.Context) string {
	id, err := bicnlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillingInvoiceCreditNoteLine entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillingInvoiceCreditNoteLine entity is found.
// Returns a *NotFoundError when no BillingInvoiceCreditNoteLine entities are found.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Only(ctx context.Context) (*BillingInvoiceCreditNoteLine, error) {
	nodes, err := bicnlq.Limit(2).All(setContextOp(ctx, bicnlq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billinginvoicecreditnoteline.Label}
	default:
		return nil, &NotSingularError{billinginvoicecreditnoteline.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) OnlyX(ctx context.Context) *BillingInvoiceCreditNoteLine {
	node, err := bicnlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillingInvoiceCreditNoteLine ID in the query.
// Returns a *NotSingularError when more than one BillingInvoiceCreditNoteLine ID is found.
// Returns a *NotFoundError when no entities are found.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bicnlq.Limit(2).IDs(setContextOp(ctx, bicnlq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billinginvoicecreditnoteline.Label}
	default:
		err = &NotSingularError{billinginvoicecreditnoteline.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) OnlyIDX(ctx context.Context) string {
	id, err := bicnlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillingInvoiceCreditNoteLines.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) All(ctx context.Context) ([]*BillingInvoiceCreditNoteLine, error) {
	ctx = setContextOp(ctx, bicnlq.ctx, ent.OpQueryAll)
	if err := bicnlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillingInvoiceCreditNoteLine, *BillingInvoiceCreditNoteLineQuery]()
	return withInterceptors[[]*BillingInvoiceCreditNoteLine](ctx, bicnlq, qr, bicnlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) AllX(ctx context.Context) []*BillingInvoiceCreditNoteLine {
	nodes, err := bicnlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillingInvoiceCreditNoteLine IDs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) IDs(ctx context.Context) (ids []string, err error) {
	if bicnlq.ctx.Unique == nil && bicnlq.path != nil {
		bicnlq.Unique(true)
	}
	ctx = setContextOp(ctx, bicnlq.ctx, ent.OpQueryIDs)
	if err = bicnlq.Select(billinginvoicecreditnoteline.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) IDsX(ctx context.Context) []string {
	ids, err := bicnlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bicnlq.ctx, ent.OpQueryCount)
	if err := bicnlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bicnlq, querierCount[*BillingInvoiceCreditNoteLineQuery](), bicnlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) CountX(ctx context.Context) int {
	count, err := bicnlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bicnlq.ctx, ent.OpQueryExist)
	switch _, err := bicnlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) ExistX(ctx context.Context) bool {
	exist, err := bicnlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillingInvoiceCreditNoteLineQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Clone() *BillingInvoiceCreditNoteLineQuery {
	if bicnlq == nil {
		return nil
	}
	return &BillingInvoiceCreditNoteLineQuery{
		config:                 bicnlq.config,
		ctx:                    bicnlq.ctx.Clone(),
		order:                  append([]billinginvoicecreditnoteline.OrderOption{}, bicnlq.order...),
		inters:                 append([]Interceptor{}, bicnlq.inters...),
		predicates:             append([]predicate.BillingInvoiceCreditNoteLine{}, bicnlq.predicates...),
		withBillingInvoice:     bicnlq.withBillingInvoice.Clone(),
		withBillingInvoiceLine: bicnlq.withBillingInvoiceLine.Clone(),
		// clone intermediate query.
		sql:  bicnlq.sql.Clone(),
		path: bicnlq.path,
	}
}

// WithBillingInvoice tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoice" edge. The optional arguments are used to configure the query builder of the edge.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) WithBillingInvoice(opts ...func(*BillingInvoiceQuery)) *BillingInvoiceCreditNoteLineQuery {
	query := (&BillingInvoiceClient{config: bicnlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bicnlq.withBillingInvoice = query
	return bicnlq
}

// WithBillingInvoiceLine tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoice_line" edge. The optional arguments are used to configure the query builder of the edge.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) WithBillingInvoiceLine(opts ...func(*BillingInvoiceLineQuery)) *BillingInvoiceCreditNoteLineQuery {
	query := (&BillingInvoiceLineClient{config: bicnlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bicnlq.withBillingInvoiceLine = query
	return bicnlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillingInvoiceCreditNoteLine.Query().
//		GroupBy(billinginvoicecreditnoteline.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (bicnlq *BillingInvoiceCreditNoteLineQuery) GroupBy(field string, fields ...string) *BillingInvoiceCreditNoteLineGroupBy {
	bicnlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillingInvoiceCreditNoteLineGroupBy{build: bicnlq}
	grbuild.flds = &bicnlq.ctx.Fields
	grbuild.label = billinginvoicecreditnoteline.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.BillingInvoiceCreditNoteLine.Query().
//		Select(billinginvoicecreditnoteline.FieldNamespace).
//		Scan(ctx, &v)
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Select(fields ...string) *BillingInvoiceCreditNoteLineSelect {
	bicnlq.ctx.Fields = append(bicnlq.ctx.Fields, fields...)
	sbuild := &BillingInvoiceCreditNoteLineSelect{BillingInvoiceCreditNoteLineQuery: bicnlq}
	sbuild.label = billinginvoicecreditnoteline.Label
	sbuild.flds, sbuild.scan = &bicnlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillingInvoiceCreditNoteLineSelect configured with the given aggregations.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) Aggregate(fns ...AggregateFunc) *BillingInvoiceCreditNoteLineSelect {
	return bicnlq.Select().Aggregate(fns...)
}

func (bicnlq *BillingInvoiceCreditNoteLineQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bicnlq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bicnlq); err != nil {
				return err
			}
		}
	}
	for _, f := range bicnlq.ctx.Fields {
		if !billinginvoicecreditnoteline.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if bicnlq.path != nil {
		prev, err := bicnlq.path(ctx)
		if err != nil {
			return err
		}
		bicnlq.sql = prev
	}
	return nil
}

func (bicnlq *BillingInvoiceCreditNoteLineQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BillingInvoiceCreditNoteLine, error) {
	var (
		nodes       = []*BillingInvoiceCreditNoteLine{}
		_spec       = bicnlq.querySpec()
		loadedTypes = [2]bool{
			bicnlq.withBillingInvoice != nil,
			bicnlq.withBillingInvoiceLine != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BillingInvoiceCreditNoteLine).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BillingInvoiceCreditNoteLine{config: bicnlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bicnlq.modifiers) > 0 {
		_spec.Modifiers = bicnlq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bicnlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bicnlq.withBillingInvoice; query != nil {
		if err := bicnlq.loadBillingInvoice(ctx, query, nodes, nil,
			func(n *BillingInvoiceCreditNoteLine, e *BillingInvoice) { n.Edges.BillingInvoice = e }); err != nil {
			return nil, err
		}
	}
	if query := bicnlq.withBillingInvoiceLine; query != nil {
		if err := bicnlq.loadBillingInvoiceLine(ctx, query, nodes, nil,
			func(n *BillingInvoiceCreditNoteLine, e *BillingInvoiceLine) { n.Edges.BillingInvoiceLine = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bicnlq *BillingInvoiceCreditNoteLineQuery) loadBillingInvoice(ctx context.Context, query *BillingInvoiceQuery, nodes []*BillingInvoiceCreditNoteLine, init func(*BillingInvoiceCreditNoteLine), assign func(*BillingInvoiceCreditNoteLine, *BillingInvoice)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingInvoiceCreditNoteLine)
	for i := range nodes {
		fk := nodes[i].InvoiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(billinginvoice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invoice_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bicnlq *BillingInvoiceCreditNoteLineQuery) loadBillingInvoiceLine(ctx context.Context, query *BillingInvoiceLineQuery, nodes []*BillingInvoiceCreditNoteLine, init func(*BillingInvoiceCreditNoteLine), assign func(*BillingInvoiceCreditNoteLine, *BillingInvoiceLine)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingInvoiceCreditNoteLine)
	for i := range nodes {
		fk := nodes[i].ParentLineID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(billinginvoiceline.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_line_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bicnlq *BillingInvoiceCreditNoteLineQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bicnlq.querySpec()
	if len(bicnlq.modifiers) > 0 {
		_spec.Modifiers = bicnlq.modifiers
	}
	_spec.Node.Columns = bicnlq.ctx.Fields
	if len(bicnlq.ctx.Fields) > 0 {
		_spec.Unique = bicnlq.ctx.Unique != nil && *bicnlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bicnlq.driver, _spec)
}

func (bicnlq *BillingInvoiceCreditNoteLineQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(billinginvoicecreditnoteline.Table, billinginvoicecreditnoteline.Columns, sqlgraph.NewFieldSpec(billinginvoicecreditnoteline.FieldID, field.TypeString))
	_spec.From = bicnlq.sql
	if unique := bicnlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bicnlq.path != nil {
		_spec.Unique = true
	}
	if fields := bicnlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicecreditnoteline.FieldID)
		for i := range fields {
			if fields[i] != billinginvoicecreditnoteline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bicnlq.withBillingInvoice != nil {
			_spec.Node.AddColumnOnce(billinginvoicecreditnoteline.FieldInvoiceID)
		}
		if bicnlq.withBillingInvoiceLine != nil {
			_spec.Node.AddColumnOnce(billinginvoicecreditnoteline.FieldParentLineID)
		}
	}
	if ps := bicnlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bicnlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bicnlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bicnlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bicnlq *BillingInvoiceCreditNoteLineQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bicnlq.driver.Dialect())
	t1 := builder.Table(billinginvoicecreditnoteline.Table)
	columns := bicnlq.ctx.Fields
	if len(columns) == 0 {
		columns = billinginvoicecreditnoteline.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bicnlq.sql != nil {
		selector = bicnlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bicnlq.ctx.Unique != nil && *bicnlq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bicnlq.modifiers {
		m(selector)
	}
	for _, p := range bicnlq.predicates {
		p(selector)
	}
	for _, p := range bicnlq.order {
		p(selector)
	}
	if offset := bicnlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bicnlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) ForUpdate(opts ...sql.LockOption) *BillingInvoiceCreditNoteLineQuery {
	if bicnlq.driver.Dialect() == dialect.Postgres {
		bicnlq.Unique(false)
	}
	bicnlq.modifiers = append(bicnlq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return bicnlq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (bicnlq *BillingInvoiceCreditNoteLineQuery) ForShare(opts ...sql.LockOption) *BillingInvoiceCreditNoteLineQuery {
	if bicnlq.driver.Dialect() == dialect.Postgres {
		bicnlq.Unique(false)
	}
	bicnlq.modifiers = append(bicnlq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return bicnlq
}

// BillingInvoiceCreditNoteLineGroupBy is the group-by builder for BillingInvoiceCreditNoteLine entities.
type BillingInvoiceCreditNoteLineGroupBy struct {
	selector
	build *BillingInvoiceCreditNoteLineQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bicnlgb *BillingInvoiceCreditNoteLineGroupBy) Aggregate(fns ...AggregateFunc) *BillingInvoiceCreditNoteLineGroupBy {
	bicnlgb.fns = append(bicnlgb.fns, fns...)
	return bicnlgb
}

// Scan applies the selector query and scans the result into the given value.
func (bicnlgb *BillingInvoiceCreditNoteLineGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bicnlgb.build.ctx, ent.OpQueryGroupBy)
	if err := bicnlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingInvoiceCreditNoteLineQuery, *BillingInvoiceCreditNoteLineGroupBy](ctx, bicnlgb.build, bicnlgb, bicnlgb.build.inters, v)
}

func (bicnlgb *BillingInvoiceCreditNoteLineGroupBy) sqlScan(ctx context.Context, root *BillingInvoiceCreditNoteLineQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bicnlgb.fns))
	for _, fn := range bicnlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bicnlgb.flds)+len(bicnlgb.fns))
		for _, f := range *bicnlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bicnlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bicnlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillingInvoiceCreditNoteLineSelect is the builder for selecting fields of BillingInvoiceCreditNoteLine entities.
type BillingInvoiceCreditNoteLineSelect struct {
	*BillingInvoiceCreditNoteLineQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bicnls *BillingInvoiceCreditNoteLineSelect) Aggregate(fns ...AggregateFunc) *BillingInvoiceCreditNoteLineSelect {
	bicnls.fns = append(bicnls.fns, fns...)
	return bicnls
}

// Scan applies the selector query and scans the result into the given value.
func (bicnls *BillingInvoiceCreditNoteLineSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bicnls.ctx, ent.OpQuerySelect)
	if err := bicnls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingInvoiceCreditNoteLineQuery, *BillingInvoiceCreditNoteLineSelect](ctx, bicnls.BillingInvoiceCreditNoteLineQuery, bicnls, bicnls.inters, v)
}

func (bicnls *BillingInvoiceCreditNoteLineSelect) sqlScan(ctx context.Context, root *BillingInvoiceCreditNoteLineQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bicnls.fns))
	for _, fn := range bicnls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bicnls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bicnls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

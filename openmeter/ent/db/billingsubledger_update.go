// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingSubledgerUpdate is the builder for updating BillingSubledger entities.
type BillingSubledgerUpdate struct {
	config
	hooks    []Hook
	mutation *BillingSubledgerMutation
}

// Where appends a list predicates to the BillingSubledgerUpdate builder.
func (bsu *BillingSubledgerUpdate) Where(ps ...predicate.BillingSubledger) *BillingSubledgerUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetMetadata sets the "metadata" field.
func (bsu *BillingSubledgerUpdate) SetMetadata(m map[string]string) *BillingSubledgerUpdate {
	bsu.mutation.SetMetadata(m)
	return bsu
}

// ClearMetadata clears the value of the "metadata" field.
func (bsu *BillingSubledgerUpdate) ClearMetadata() *BillingSubledgerUpdate {
	bsu.mutation.ClearMetadata()
	return bsu
}

// SetUpdatedAt sets the "updated_at" field.
func (bsu *BillingSubledgerUpdate) SetUpdatedAt(t time.Time) *BillingSubledgerUpdate {
	bsu.mutation.SetUpdatedAt(t)
	return bsu
}

// SetDeletedAt sets the "deleted_at" field.
func (bsu *BillingSubledgerUpdate) SetDeletedAt(t time.Time) *BillingSubledgerUpdate {
	bsu.mutation.SetDeletedAt(t)
	return bsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bsu *BillingSubledgerUpdate) SetNillableDeletedAt(t *time.Time) *BillingSubledgerUpdate {
	if t != nil {
		bsu.SetDeletedAt(*t)
	}
	return bsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bsu *BillingSubledgerUpdate) ClearDeletedAt() *BillingSubledgerUpdate {
	bsu.mutation.ClearDeletedAt()
	return bsu
}

// SetName sets the "name" field.
func (bsu *BillingSubledgerUpdate) SetName(s string) *BillingSubledgerUpdate {
	bsu.mutation.SetName(s)
	return bsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bsu *BillingSubledgerUpdate) SetNillableName(s *string) *BillingSubledgerUpdate {
	if s != nil {
		bsu.SetName(*s)
	}
	return bsu
}

// SetDescription sets the "description" field.
func (bsu *BillingSubledgerUpdate) SetDescription(s string) *BillingSubledgerUpdate {
	bsu.mutation.SetDescription(s)
	return bsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bsu *BillingSubledgerUpdate) SetNillableDescription(s *string) *BillingSubledgerUpdate {
	if s != nil {
		bsu.SetDescription(*s)
	}
	return bsu
}

// ClearDescription clears the value of the "description" field.
func (bsu *BillingSubledgerUpdate) ClearDescription() *BillingSubledgerUpdate {
	bsu.mutation.ClearDescription()
	return bsu
}

// SetPriority sets the "priority" field.
func (bsu *BillingSubledgerUpdate) SetPriority(i int64) *BillingSubledgerUpdate {
	bsu.mutation.ResetPriority()
	bsu.mutation.SetPriority(i)
	return bsu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (bsu *BillingSubledgerUpdate) SetNillablePriority(i *int64) *BillingSubledgerUpdate {
	if i != nil {
		bsu.SetPriority(*i)
	}
	return bsu
}

// AddPriority adds i to the "priority" field.
func (bsu *BillingSubledgerUpdate) AddPriority(i int64) *BillingSubledgerUpdate {
	bsu.mutation.AddPriority(i)
	return bsu
}

// AddTransactionIDs adds the "transactions" edge to the BillingSubledgerTransaction entity by IDs.
func (bsu *BillingSubledgerUpdate) AddTransactionIDs(ids ...string) *BillingSubledgerUpdate {
	bsu.mutation.AddTransactionIDs(ids...)
	return bsu
}

// AddTransactions adds the "transactions" edges to the BillingSubledgerTransaction entity.
func (bsu *BillingSubledgerUpdate) AddTransactions(b ...*BillingSubledgerTransaction) *BillingSubledgerUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsu.AddTransactionIDs(ids...)
}

// Mutation returns the BillingSubledgerMutation object of the builder.
func (bsu *BillingSubledgerUpdate) Mutation() *BillingSubledgerMutation {
	return bsu.mutation
}

// ClearTransactions clears all "transactions" edges to the BillingSubledgerTransaction entity.
func (bsu *BillingSubledgerUpdate) ClearTransactions() *BillingSubledgerUpdate {
	bsu.mutation.ClearTransactions()
	return bsu
}

// RemoveTransactionIDs removes the "transactions" edge to BillingSubledgerTransaction entities by IDs.
func (bsu *BillingSubledgerUpdate) RemoveTransactionIDs(ids ...string) *BillingSubledgerUpdate {
	bsu.mutation.RemoveTransactionIDs(ids...)
	return bsu
}

// RemoveTransactions removes "transactions" edges to BillingSubledgerTransaction entities.
func (bsu *BillingSubledgerUpdate) RemoveTransactions(b ...*BillingSubledgerTransaction) *BillingSubledgerUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BillingSubledgerUpdate) Save(ctx context.Context) (int, error) {
	bsu.defaults()
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BillingSubledgerUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BillingSubledgerUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BillingSubledgerUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsu *BillingSubledgerUpdate) defaults() {
	if _, ok := bsu.mutation.UpdatedAt(); !ok {
		v := billingsubledger.UpdateDefaultUpdatedAt()
		bsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsu *BillingSubledgerUpdate) check() error {
	if bsu.mutation.LedgerCleared() && len(bsu.mutation.LedgerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingSubledger.ledger"`)
	}
	return nil
}

func (bsu *BillingSubledgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingsubledger.Table, billingsubledger.Columns, sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Metadata(); ok {
		_spec.SetField(billingsubledger.FieldMetadata, field.TypeJSON, value)
	}
	if bsu.mutation.MetadataCleared() {
		_spec.ClearField(billingsubledger.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bsu.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsubledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bsu.mutation.DeletedAt(); ok {
		_spec.SetField(billingsubledger.FieldDeletedAt, field.TypeTime, value)
	}
	if bsu.mutation.DeletedAtCleared() {
		_spec.ClearField(billingsubledger.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bsu.mutation.Name(); ok {
		_spec.SetField(billingsubledger.FieldName, field.TypeString, value)
	}
	if value, ok := bsu.mutation.Description(); ok {
		_spec.SetField(billingsubledger.FieldDescription, field.TypeString, value)
	}
	if bsu.mutation.DescriptionCleared() {
		_spec.ClearField(billingsubledger.FieldDescription, field.TypeString)
	}
	if value, ok := bsu.mutation.Priority(); ok {
		_spec.SetField(billingsubledger.FieldPriority, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.AddedPriority(); ok {
		_spec.AddField(billingsubledger.FieldPriority, field.TypeInt64, value)
	}
	if bsu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !bsu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsubledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BillingSubledgerUpdateOne is the builder for updating a single BillingSubledger entity.
type BillingSubledgerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingSubledgerMutation
}

// SetMetadata sets the "metadata" field.
func (bsuo *BillingSubledgerUpdateOne) SetMetadata(m map[string]string) *BillingSubledgerUpdateOne {
	bsuo.mutation.SetMetadata(m)
	return bsuo
}

// ClearMetadata clears the value of the "metadata" field.
func (bsuo *BillingSubledgerUpdateOne) ClearMetadata() *BillingSubledgerUpdateOne {
	bsuo.mutation.ClearMetadata()
	return bsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bsuo *BillingSubledgerUpdateOne) SetUpdatedAt(t time.Time) *BillingSubledgerUpdateOne {
	bsuo.mutation.SetUpdatedAt(t)
	return bsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bsuo *BillingSubledgerUpdateOne) SetDeletedAt(t time.Time) *BillingSubledgerUpdateOne {
	bsuo.mutation.SetDeletedAt(t)
	return bsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bsuo *BillingSubledgerUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingSubledgerUpdateOne {
	if t != nil {
		bsuo.SetDeletedAt(*t)
	}
	return bsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bsuo *BillingSubledgerUpdateOne) ClearDeletedAt() *BillingSubledgerUpdateOne {
	bsuo.mutation.ClearDeletedAt()
	return bsuo
}

// SetName sets the "name" field.
func (bsuo *BillingSubledgerUpdateOne) SetName(s string) *BillingSubledgerUpdateOne {
	bsuo.mutation.SetName(s)
	return bsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bsuo *BillingSubledgerUpdateOne) SetNillableName(s *string) *BillingSubledgerUpdateOne {
	if s != nil {
		bsuo.SetName(*s)
	}
	return bsuo
}

// SetDescription sets the "description" field.
func (bsuo *BillingSubledgerUpdateOne) SetDescription(s string) *BillingSubledgerUpdateOne {
	bsuo.mutation.SetDescription(s)
	return bsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bsuo *BillingSubledgerUpdateOne) SetNillableDescription(s *string) *BillingSubledgerUpdateOne {
	if s != nil {
		bsuo.SetDescription(*s)
	}
	return bsuo
}

// ClearDescription clears the value of the "description" field.
func (bsuo *BillingSubledgerUpdateOne) ClearDescription() *BillingSubledgerUpdateOne {
	bsuo.mutation.ClearDescription()
	return bsuo
}

// SetPriority sets the "priority" field.
func (bsuo *BillingSubledgerUpdateOne) SetPriority(i int64) *BillingSubledgerUpdateOne {
	bsuo.mutation.ResetPriority()
	bsuo.mutation.SetPriority(i)
	return bsuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (bsuo *BillingSubledgerUpdateOne) SetNillablePriority(i *int64) *BillingSubledgerUpdateOne {
	if i != nil {
		bsuo.SetPriority(*i)
	}
	return bsuo
}

// AddPriority adds i to the "priority" field.
func (bsuo *BillingSubledgerUpdateOne) AddPriority(i int64) *BillingSubledgerUpdateOne {
	bsuo.mutation.AddPriority(i)
	return bsuo
}

// AddTransactionIDs adds the "transactions" edge to the BillingSubledgerTransaction entity by IDs.
func (bsuo *BillingSubledgerUpdateOne) AddTransactionIDs(ids ...string) *BillingSubledgerUpdateOne {
	bsuo.mutation.AddTransactionIDs(ids...)
	return bsuo
}

// AddTransactions adds the "transactions" edges to the BillingSubledgerTransaction entity.
func (bsuo *BillingSubledgerUpdateOne) AddTransactions(b ...*BillingSubledgerTransaction) *BillingSubledgerUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsuo.AddTransactionIDs(ids...)
}

// Mutation returns the BillingSubledgerMutation object of the builder.
func (bsuo *BillingSubledgerUpdateOne) Mutation() *BillingSubledgerMutation {
	return bsuo.mutation
}

// ClearTransactions clears all "transactions" edges to the BillingSubledgerTransaction entity.
func (bsuo *BillingSubledgerUpdateOne) ClearTransactions() *BillingSubledgerUpdateOne {
	bsuo.mutation.ClearTransactions()
	return bsuo
}

// RemoveTransactionIDs removes the "transactions" edge to BillingSubledgerTransaction entities by IDs.
func (bsuo *BillingSubledgerUpdateOne) RemoveTransactionIDs(ids ...string) *BillingSubledgerUpdateOne {
	bsuo.mutation.RemoveTransactionIDs(ids...)
	return bsuo
}

// RemoveTransactions removes "transactions" edges to BillingSubledgerTransaction entities.
func (bsuo *BillingSubledgerUpdateOne) RemoveTransactions(b ...*BillingSubledgerTransaction) *BillingSubledgerUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsuo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the BillingSubledgerUpdate builder.
func (bsuo *BillingSubledgerUpdateOne) Where(ps ...predicate.BillingSubledger) *BillingSubledgerUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BillingSubledgerUpdateOne) Select(field string, fields ...string) *BillingSubledgerUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BillingSubledger entity.
func (bsuo *BillingSubledgerUpdateOne) Save(ctx context.Context) (*BillingSubledger, error) {
	bsuo.defaults()
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BillingSubledgerUpdateOne) SaveX(ctx context.Context) *BillingSubledger {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BillingSubledgerUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BillingSubledgerUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsuo *BillingSubledgerUpdateOne) defaults() {
	if _, ok := bsuo.mutation.UpdatedAt(); !ok {
		v := billingsubledger.UpdateDefaultUpdatedAt()
		bsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsuo *BillingSubledgerUpdateOne) check() error {
	if bsuo.mutation.LedgerCleared() && len(bsuo.mutation.LedgerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingSubledger.ledger"`)
	}
	return nil
}

func (bsuo *BillingSubledgerUpdateOne) sqlSave(ctx context.Context) (_node *BillingSubledger, err error) {
	if err := bsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingsubledger.Table, billingsubledger.Columns, sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingSubledger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingsubledger.FieldID)
		for _, f := range fields {
			if !billingsubledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingsubledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.Metadata(); ok {
		_spec.SetField(billingsubledger.FieldMetadata, field.TypeJSON, value)
	}
	if bsuo.mutation.MetadataCleared() {
		_spec.ClearField(billingsubledger.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsubledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bsuo.mutation.DeletedAt(); ok {
		_spec.SetField(billingsubledger.FieldDeletedAt, field.TypeTime, value)
	}
	if bsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingsubledger.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bsuo.mutation.Name(); ok {
		_spec.SetField(billingsubledger.FieldName, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.Description(); ok {
		_spec.SetField(billingsubledger.FieldDescription, field.TypeString, value)
	}
	if bsuo.mutation.DescriptionCleared() {
		_spec.ClearField(billingsubledger.FieldDescription, field.TypeString)
	}
	if value, ok := bsuo.mutation.Priority(); ok {
		_spec.SetField(billingsubledger.FieldPriority, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.AddedPriority(); ok {
		_spec.AddField(billingsubledger.FieldPriority, field.TypeInt64, value)
	}
	if bsuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !bsuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingSubledger{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsubledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}

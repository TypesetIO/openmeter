// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicecreditnoteline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceCreditNoteLine is the model entity for the BillingInvoiceCreditNoteLine schema.
type BillingInvoiceCreditNoteLine struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// TaxesTotal holds the value of the "taxes_total" field.
	TaxesTotal alpacadecimal.Decimal `json:"taxes_total,omitempty"`
	// TaxesInclusiveTotal holds the value of the "taxes_inclusive_total" field.
	TaxesInclusiveTotal alpacadecimal.Decimal `json:"taxes_inclusive_total,omitempty"`
	// TaxesExclusiveTotal holds the value of the "taxes_exclusive_total" field.
	TaxesExclusiveTotal alpacadecimal.Decimal `json:"taxes_exclusive_total,omitempty"`
	// ChargesTotal holds the value of the "charges_total" field.
	ChargesTotal alpacadecimal.Decimal `json:"charges_total,omitempty"`
	// DiscountsTotal holds the value of the "discounts_total" field.
	DiscountsTotal alpacadecimal.Decimal `json:"discounts_total,omitempty"`
	// Total holds the value of the "total" field.
	Total alpacadecimal.Decimal `json:"total,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// ManagedBy holds the value of the "managed_by" field.
	ManagedBy billing.InvoiceLineManagedBy `json:"managed_by,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// InvoiceAt holds the value of the "invoice_at" field.
	InvoiceAt time.Time `json:"invoice_at,omitempty"`
	// Status holds the value of the "status" field.
	Status billing.InvoiceLineStatus `json:"status,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// InvoicingAppExternalID holds the value of the "invoicing_app_external_id" field.
	InvoicingAppExternalID *string `json:"invoicing_app_external_id,omitempty"`
	// ChildUniqueReferenceID holds the value of the "child_unique_reference_id" field.
	ChildUniqueReferenceID *string `json:"child_unique_reference_id,omitempty"`
	// ParentLineID holds the value of the "parent_line_id" field.
	ParentLineID string `json:"parent_line_id,omitempty"`
	// CreditNoteAmount holds the value of the "credit_note_amount" field.
	CreditNoteAmount alpacadecimal.Decimal `json:"credit_note_amount,omitempty"`
	// TaxConfig holds the value of the "tax_config" field.
	TaxConfig productcatalog.TaxConfig `json:"tax_config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceCreditNoteLineQuery when eager-loading is set.
	Edges        BillingInvoiceCreditNoteLineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceCreditNoteLineEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceCreditNoteLineEdges struct {
	// BillingInvoice holds the value of the billing_invoice edge.
	BillingInvoice *BillingInvoice `json:"billing_invoice,omitempty"`
	// BillingInvoiceLine holds the value of the billing_invoice_line edge.
	BillingInvoiceLine *BillingInvoiceLine `json:"billing_invoice_line,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BillingInvoiceOrErr returns the BillingInvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceCreditNoteLineEdges) BillingInvoiceOrErr() (*BillingInvoice, error) {
	if e.BillingInvoice != nil {
		return e.BillingInvoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice"}
}

// BillingInvoiceLineOrErr returns the BillingInvoiceLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceCreditNoteLineEdges) BillingInvoiceLineOrErr() (*BillingInvoiceLine, error) {
	if e.BillingInvoiceLine != nil {
		return e.BillingInvoiceLine, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billinginvoiceline.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice_line"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceCreditNoteLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicecreditnoteline.FieldMetadata, billinginvoicecreditnoteline.FieldTaxConfig:
			values[i] = new([]byte)
		case billinginvoicecreditnoteline.FieldAmount, billinginvoicecreditnoteline.FieldTaxesTotal, billinginvoicecreditnoteline.FieldTaxesInclusiveTotal, billinginvoicecreditnoteline.FieldTaxesExclusiveTotal, billinginvoicecreditnoteline.FieldChargesTotal, billinginvoicecreditnoteline.FieldDiscountsTotal, billinginvoicecreditnoteline.FieldTotal, billinginvoicecreditnoteline.FieldCreditNoteAmount:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoicecreditnoteline.FieldID, billinginvoicecreditnoteline.FieldNamespace, billinginvoicecreditnoteline.FieldName, billinginvoicecreditnoteline.FieldDescription, billinginvoicecreditnoteline.FieldInvoiceID, billinginvoicecreditnoteline.FieldManagedBy, billinginvoicecreditnoteline.FieldStatus, billinginvoicecreditnoteline.FieldCurrency, billinginvoicecreditnoteline.FieldInvoicingAppExternalID, billinginvoicecreditnoteline.FieldChildUniqueReferenceID, billinginvoicecreditnoteline.FieldParentLineID:
			values[i] = new(sql.NullString)
		case billinginvoicecreditnoteline.FieldCreatedAt, billinginvoicecreditnoteline.FieldUpdatedAt, billinginvoicecreditnoteline.FieldDeletedAt, billinginvoicecreditnoteline.FieldPeriodStart, billinginvoicecreditnoteline.FieldPeriodEnd, billinginvoicecreditnoteline.FieldInvoiceAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceCreditNoteLine fields.
func (bicnl *BillingInvoiceCreditNoteLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicecreditnoteline.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bicnl.ID = value.String
			}
		case billinginvoicecreditnoteline.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bicnl.Namespace = value.String
			}
		case billinginvoicecreditnoteline.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bicnl.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoicecreditnoteline.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bicnl.CreatedAt = value.Time
			}
		case billinginvoicecreditnoteline.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bicnl.UpdatedAt = value.Time
			}
		case billinginvoicecreditnoteline.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bicnl.DeletedAt = new(time.Time)
				*bicnl.DeletedAt = value.Time
			}
		case billinginvoicecreditnoteline.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bicnl.Name = value.String
			}
		case billinginvoicecreditnoteline.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bicnl.Description = new(string)
				*bicnl.Description = value.String
			}
		case billinginvoicecreditnoteline.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				bicnl.Amount = *value
			}
		case billinginvoicecreditnoteline.FieldTaxesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_total", values[i])
			} else if value != nil {
				bicnl.TaxesTotal = *value
			}
		case billinginvoicecreditnoteline.FieldTaxesInclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_inclusive_total", values[i])
			} else if value != nil {
				bicnl.TaxesInclusiveTotal = *value
			}
		case billinginvoicecreditnoteline.FieldTaxesExclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_exclusive_total", values[i])
			} else if value != nil {
				bicnl.TaxesExclusiveTotal = *value
			}
		case billinginvoicecreditnoteline.FieldChargesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field charges_total", values[i])
			} else if value != nil {
				bicnl.ChargesTotal = *value
			}
		case billinginvoicecreditnoteline.FieldDiscountsTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discounts_total", values[i])
			} else if value != nil {
				bicnl.DiscountsTotal = *value
			}
		case billinginvoicecreditnoteline.FieldTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value != nil {
				bicnl.Total = *value
			}
		case billinginvoicecreditnoteline.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				bicnl.InvoiceID = value.String
			}
		case billinginvoicecreditnoteline.FieldManagedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field managed_by", values[i])
			} else if value.Valid {
				bicnl.ManagedBy = billing.InvoiceLineManagedBy(value.String)
			}
		case billinginvoicecreditnoteline.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				bicnl.PeriodStart = value.Time
			}
		case billinginvoicecreditnoteline.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				bicnl.PeriodEnd = value.Time
			}
		case billinginvoicecreditnoteline.FieldInvoiceAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_at", values[i])
			} else if value.Valid {
				bicnl.InvoiceAt = value.Time
			}
		case billinginvoicecreditnoteline.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bicnl.Status = billing.InvoiceLineStatus(value.String)
			}
		case billinginvoicecreditnoteline.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				bicnl.Currency = currencyx.Code(value.String)
			}
		case billinginvoicecreditnoteline.FieldInvoicingAppExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_app_external_id", values[i])
			} else if value.Valid {
				bicnl.InvoicingAppExternalID = new(string)
				*bicnl.InvoicingAppExternalID = value.String
			}
		case billinginvoicecreditnoteline.FieldChildUniqueReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_unique_reference_id", values[i])
			} else if value.Valid {
				bicnl.ChildUniqueReferenceID = new(string)
				*bicnl.ChildUniqueReferenceID = value.String
			}
		case billinginvoicecreditnoteline.FieldParentLineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_line_id", values[i])
			} else if value.Valid {
				bicnl.ParentLineID = value.String
			}
		case billinginvoicecreditnoteline.FieldCreditNoteAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field credit_note_amount", values[i])
			} else if value != nil {
				bicnl.CreditNoteAmount = *value
			}
		case billinginvoicecreditnoteline.FieldTaxConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tax_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bicnl.TaxConfig); err != nil {
					return fmt.Errorf("unmarshal field tax_config: %w", err)
				}
			}
		default:
			bicnl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceCreditNoteLine.
// This includes values selected through modifiers, order, etc.
func (bicnl *BillingInvoiceCreditNoteLine) Value(name string) (ent.Value, error) {
	return bicnl.selectValues.Get(name)
}

// QueryBillingInvoice queries the "billing_invoice" edge of the BillingInvoiceCreditNoteLine entity.
func (bicnl *BillingInvoiceCreditNoteLine) QueryBillingInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceCreditNoteLineClient(bicnl.config).QueryBillingInvoice(bicnl)
}

// QueryBillingInvoiceLine queries the "billing_invoice_line" edge of the BillingInvoiceCreditNoteLine entity.
func (bicnl *BillingInvoiceCreditNoteLine) QueryBillingInvoiceLine() *BillingInvoiceLineQuery {
	return NewBillingInvoiceCreditNoteLineClient(bicnl.config).QueryBillingInvoiceLine(bicnl)
}

// Update returns a builder for updating this BillingInvoiceCreditNoteLine.
// Note that you need to call BillingInvoiceCreditNoteLine.Unwrap() before calling this method if this BillingInvoiceCreditNoteLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (bicnl *BillingInvoiceCreditNoteLine) Update() *BillingInvoiceCreditNoteLineUpdateOne {
	return NewBillingInvoiceCreditNoteLineClient(bicnl.config).UpdateOne(bicnl)
}

// Unwrap unwraps the BillingInvoiceCreditNoteLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bicnl *BillingInvoiceCreditNoteLine) Unwrap() *BillingInvoiceCreditNoteLine {
	_tx, ok := bicnl.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceCreditNoteLine is not a transactional entity")
	}
	bicnl.config.driver = _tx.drv
	return bicnl
}

// String implements the fmt.Stringer.
func (bicnl *BillingInvoiceCreditNoteLine) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceCreditNoteLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bicnl.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bicnl.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bicnl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bicnl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bicnl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bicnl.Name)
	builder.WriteString(", ")
	if v := bicnl.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.Amount))
	builder.WriteString(", ")
	builder.WriteString("taxes_total=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.TaxesTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_inclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.TaxesInclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_exclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.TaxesExclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("charges_total=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.ChargesTotal))
	builder.WriteString(", ")
	builder.WriteString("discounts_total=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.DiscountsTotal))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.Total))
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(bicnl.InvoiceID)
	builder.WriteString(", ")
	builder.WriteString("managed_by=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.ManagedBy))
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(bicnl.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(bicnl.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invoice_at=")
	builder.WriteString(bicnl.InvoiceAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.Status))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.Currency))
	builder.WriteString(", ")
	if v := bicnl.InvoicingAppExternalID; v != nil {
		builder.WriteString("invoicing_app_external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bicnl.ChildUniqueReferenceID; v != nil {
		builder.WriteString("child_unique_reference_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("parent_line_id=")
	builder.WriteString(bicnl.ParentLineID)
	builder.WriteString(", ")
	builder.WriteString("credit_note_amount=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.CreditNoteAmount))
	builder.WriteString(", ")
	builder.WriteString("tax_config=")
	builder.WriteString(fmt.Sprintf("%v", bicnl.TaxConfig))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceCreditNoteLines is a parsable slice of BillingInvoiceCreditNoteLine.
type BillingInvoiceCreditNoteLines []*BillingInvoiceCreditNoteLine

// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/ratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// RateCardUpdate is the builder for updating RateCard entities.
type RateCardUpdate struct {
	config
	hooks    []Hook
	mutation *RateCardMutation
}

// Where appends a list predicates to the RateCardUpdate builder.
func (rcu *RateCardUpdate) Where(ps ...predicate.RateCard) *RateCardUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetMetadata sets the "metadata" field.
func (rcu *RateCardUpdate) SetMetadata(m map[string]string) *RateCardUpdate {
	rcu.mutation.SetMetadata(m)
	return rcu
}

// ClearMetadata clears the value of the "metadata" field.
func (rcu *RateCardUpdate) ClearMetadata() *RateCardUpdate {
	rcu.mutation.ClearMetadata()
	return rcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rcu *RateCardUpdate) SetUpdatedAt(t time.Time) *RateCardUpdate {
	rcu.mutation.SetUpdatedAt(t)
	return rcu
}

// SetDeletedAt sets the "deleted_at" field.
func (rcu *RateCardUpdate) SetDeletedAt(t time.Time) *RateCardUpdate {
	rcu.mutation.SetDeletedAt(t)
	return rcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableDeletedAt(t *time.Time) *RateCardUpdate {
	if t != nil {
		rcu.SetDeletedAt(*t)
	}
	return rcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rcu *RateCardUpdate) ClearDeletedAt() *RateCardUpdate {
	rcu.mutation.ClearDeletedAt()
	return rcu
}

// SetName sets the "name" field.
func (rcu *RateCardUpdate) SetName(s string) *RateCardUpdate {
	rcu.mutation.SetName(s)
	return rcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableName(s *string) *RateCardUpdate {
	if s != nil {
		rcu.SetName(*s)
	}
	return rcu
}

// SetDescription sets the "description" field.
func (rcu *RateCardUpdate) SetDescription(s string) *RateCardUpdate {
	rcu.mutation.SetDescription(s)
	return rcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableDescription(s *string) *RateCardUpdate {
	if s != nil {
		rcu.SetDescription(*s)
	}
	return rcu
}

// ClearDescription clears the value of the "description" field.
func (rcu *RateCardUpdate) ClearDescription() *RateCardUpdate {
	rcu.mutation.ClearDescription()
	return rcu
}

// SetEntitlementTemplateMetadata sets the "entitlement_template_metadata" field.
func (rcu *RateCardUpdate) SetEntitlementTemplateMetadata(m map[string]string) *RateCardUpdate {
	rcu.mutation.SetEntitlementTemplateMetadata(m)
	return rcu
}

// ClearEntitlementTemplateMetadata clears the value of the "entitlement_template_metadata" field.
func (rcu *RateCardUpdate) ClearEntitlementTemplateMetadata() *RateCardUpdate {
	rcu.mutation.ClearEntitlementTemplateMetadata()
	return rcu
}

// SetEntitlementTemplateConfig sets the "entitlement_template_config" field.
func (rcu *RateCardUpdate) SetEntitlementTemplateConfig(u []uint8) *RateCardUpdate {
	rcu.mutation.SetEntitlementTemplateConfig(u)
	return rcu
}

// AppendEntitlementTemplateConfig appends u to the "entitlement_template_config" field.
func (rcu *RateCardUpdate) AppendEntitlementTemplateConfig(u []uint8) *RateCardUpdate {
	rcu.mutation.AppendEntitlementTemplateConfig(u)
	return rcu
}

// ClearEntitlementTemplateConfig clears the value of the "entitlement_template_config" field.
func (rcu *RateCardUpdate) ClearEntitlementTemplateConfig() *RateCardUpdate {
	rcu.mutation.ClearEntitlementTemplateConfig()
	return rcu
}

// SetFeatureKey sets the "feature_key" field.
func (rcu *RateCardUpdate) SetFeatureKey(s string) *RateCardUpdate {
	rcu.mutation.SetFeatureKey(s)
	return rcu
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableFeatureKey(s *string) *RateCardUpdate {
	if s != nil {
		rcu.SetFeatureKey(*s)
	}
	return rcu
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (rcu *RateCardUpdate) ClearFeatureKey() *RateCardUpdate {
	rcu.mutation.ClearFeatureKey()
	return rcu
}

// SetFeatureID sets the "feature_id" field.
func (rcu *RateCardUpdate) SetFeatureID(s string) *RateCardUpdate {
	rcu.mutation.SetFeatureID(s)
	return rcu
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableFeatureID(s *string) *RateCardUpdate {
	if s != nil {
		rcu.SetFeatureID(*s)
	}
	return rcu
}

// ClearFeatureID clears the value of the "feature_id" field.
func (rcu *RateCardUpdate) ClearFeatureID() *RateCardUpdate {
	rcu.mutation.ClearFeatureID()
	return rcu
}

// SetTaxConfig sets the "tax_config" field.
func (rcu *RateCardUpdate) SetTaxConfig(pc *productcatalog.TaxConfig) *RateCardUpdate {
	rcu.mutation.SetTaxConfig(pc)
	return rcu
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (rcu *RateCardUpdate) ClearTaxConfig() *RateCardUpdate {
	rcu.mutation.ClearTaxConfig()
	return rcu
}

// SetBillingCadence sets the "billing_cadence" field.
func (rcu *RateCardUpdate) SetBillingCadence(i isodate.String) *RateCardUpdate {
	rcu.mutation.SetBillingCadence(i)
	return rcu
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableBillingCadence(i *isodate.String) *RateCardUpdate {
	if i != nil {
		rcu.SetBillingCadence(*i)
	}
	return rcu
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (rcu *RateCardUpdate) ClearBillingCadence() *RateCardUpdate {
	rcu.mutation.ClearBillingCadence()
	return rcu
}

// SetPrice sets the "price" field.
func (rcu *RateCardUpdate) SetPrice(pr *productcatalog.Price) *RateCardUpdate {
	rcu.mutation.SetPrice(pr)
	return rcu
}

// ClearPrice clears the value of the "price" field.
func (rcu *RateCardUpdate) ClearPrice() *RateCardUpdate {
	rcu.mutation.ClearPrice()
	return rcu
}

// SetDiscounts sets the "discounts" field.
func (rcu *RateCardUpdate) SetDiscounts(pr *productcatalog.Discounts) *RateCardUpdate {
	rcu.mutation.SetDiscounts(pr)
	return rcu
}

// ClearDiscounts clears the value of the "discounts" field.
func (rcu *RateCardUpdate) ClearDiscounts() *RateCardUpdate {
	rcu.mutation.ClearDiscounts()
	return rcu
}

// SetAddonRatecardID sets the "addon_ratecard" edge to the AddonRateCard entity by ID.
func (rcu *RateCardUpdate) SetAddonRatecardID(id string) *RateCardUpdate {
	rcu.mutation.SetAddonRatecardID(id)
	return rcu
}

// SetNillableAddonRatecardID sets the "addon_ratecard" edge to the AddonRateCard entity by ID if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableAddonRatecardID(id *string) *RateCardUpdate {
	if id != nil {
		rcu = rcu.SetAddonRatecardID(*id)
	}
	return rcu
}

// SetAddonRatecard sets the "addon_ratecard" edge to the AddonRateCard entity.
func (rcu *RateCardUpdate) SetAddonRatecard(a *AddonRateCard) *RateCardUpdate {
	return rcu.SetAddonRatecardID(a.ID)
}

// SetPlanRatecardID sets the "plan_ratecard" edge to the PlanRateCard entity by ID.
func (rcu *RateCardUpdate) SetPlanRatecardID(id string) *RateCardUpdate {
	rcu.mutation.SetPlanRatecardID(id)
	return rcu
}

// SetNillablePlanRatecardID sets the "plan_ratecard" edge to the PlanRateCard entity by ID if the given value is not nil.
func (rcu *RateCardUpdate) SetNillablePlanRatecardID(id *string) *RateCardUpdate {
	if id != nil {
		rcu = rcu.SetPlanRatecardID(*id)
	}
	return rcu
}

// SetPlanRatecard sets the "plan_ratecard" edge to the PlanRateCard entity.
func (rcu *RateCardUpdate) SetPlanRatecard(p *PlanRateCard) *RateCardUpdate {
	return rcu.SetPlanRatecardID(p.ID)
}

// SetSubscriptionItemID sets the "subscription_item" edge to the SubscriptionItem entity by ID.
func (rcu *RateCardUpdate) SetSubscriptionItemID(id string) *RateCardUpdate {
	rcu.mutation.SetSubscriptionItemID(id)
	return rcu
}

// SetNillableSubscriptionItemID sets the "subscription_item" edge to the SubscriptionItem entity by ID if the given value is not nil.
func (rcu *RateCardUpdate) SetNillableSubscriptionItemID(id *string) *RateCardUpdate {
	if id != nil {
		rcu = rcu.SetSubscriptionItemID(*id)
	}
	return rcu
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (rcu *RateCardUpdate) SetSubscriptionItem(s *SubscriptionItem) *RateCardUpdate {
	return rcu.SetSubscriptionItemID(s.ID)
}

// SetFeature sets the "feature" edge to the Feature entity.
func (rcu *RateCardUpdate) SetFeature(f *Feature) *RateCardUpdate {
	return rcu.SetFeatureID(f.ID)
}

// Mutation returns the RateCardMutation object of the builder.
func (rcu *RateCardUpdate) Mutation() *RateCardMutation {
	return rcu.mutation
}

// ClearAddonRatecard clears the "addon_ratecard" edge to the AddonRateCard entity.
func (rcu *RateCardUpdate) ClearAddonRatecard() *RateCardUpdate {
	rcu.mutation.ClearAddonRatecard()
	return rcu
}

// ClearPlanRatecard clears the "plan_ratecard" edge to the PlanRateCard entity.
func (rcu *RateCardUpdate) ClearPlanRatecard() *RateCardUpdate {
	rcu.mutation.ClearPlanRatecard()
	return rcu
}

// ClearSubscriptionItem clears the "subscription_item" edge to the SubscriptionItem entity.
func (rcu *RateCardUpdate) ClearSubscriptionItem() *RateCardUpdate {
	rcu.mutation.ClearSubscriptionItem()
	return rcu
}

// ClearFeature clears the "feature" edge to the Feature entity.
func (rcu *RateCardUpdate) ClearFeature() *RateCardUpdate {
	rcu.mutation.ClearFeature()
	return rcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RateCardUpdate) Save(ctx context.Context) (int, error) {
	rcu.defaults()
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RateCardUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RateCardUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RateCardUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcu *RateCardUpdate) defaults() {
	if _, ok := rcu.mutation.UpdatedAt(); !ok {
		v := ratecard.UpdateDefaultUpdatedAt()
		rcu.mutation.SetUpdatedAt(v)
	}
}

func (rcu *RateCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ratecard.Table, ratecard.Columns, sqlgraph.NewFieldSpec(ratecard.FieldID, field.TypeString))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Metadata(); ok {
		_spec.SetField(ratecard.FieldMetadata, field.TypeJSON, value)
	}
	if rcu.mutation.MetadataCleared() {
		_spec.ClearField(ratecard.FieldMetadata, field.TypeJSON)
	}
	if value, ok := rcu.mutation.UpdatedAt(); ok {
		_spec.SetField(ratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcu.mutation.DeletedAt(); ok {
		_spec.SetField(ratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if rcu.mutation.DeletedAtCleared() {
		_spec.ClearField(ratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rcu.mutation.Name(); ok {
		_spec.SetField(ratecard.FieldName, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Description(); ok {
		_spec.SetField(ratecard.FieldDescription, field.TypeString, value)
	}
	if rcu.mutation.DescriptionCleared() {
		_spec.ClearField(ratecard.FieldDescription, field.TypeString)
	}
	if value, ok := rcu.mutation.EntitlementTemplateMetadata(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateMetadata, field.TypeJSON, value)
	}
	if rcu.mutation.EntitlementTemplateMetadataCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateMetadata, field.TypeJSON)
	}
	if rcu.mutation.EntitlementTemplateIsSoftLimitCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateIsSoftLimit, field.TypeBool)
	}
	if rcu.mutation.EntitlementTemplateIssueAfterResetCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateIssueAfterReset, field.TypeFloat64)
	}
	if rcu.mutation.EntitlementTemplateIssueAfterResetPriorityCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateIssueAfterResetPriority, field.TypeUint8)
	}
	if rcu.mutation.EntitlementTemplatePreserveOverageAtResetCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplatePreserveOverageAtReset, field.TypeBool)
	}
	if value, ok := rcu.mutation.EntitlementTemplateConfig(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateConfig, field.TypeJSON, value)
	}
	if value, ok := rcu.mutation.AppendedEntitlementTemplateConfig(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ratecard.FieldEntitlementTemplateConfig, value)
		})
	}
	if rcu.mutation.EntitlementTemplateConfigCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateConfig, field.TypeJSON)
	}
	if rcu.mutation.EntitlementTemplateUsagePeriodCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateUsagePeriod, field.TypeString)
	}
	if value, ok := rcu.mutation.FeatureKey(); ok {
		_spec.SetField(ratecard.FieldFeatureKey, field.TypeString, value)
	}
	if rcu.mutation.FeatureKeyCleared() {
		_spec.ClearField(ratecard.FieldFeatureKey, field.TypeString)
	}
	if value, ok := rcu.mutation.TaxConfig(); ok {
		vv, err := ratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(ratecard.FieldTaxConfig, field.TypeString, vv)
	}
	if rcu.mutation.TaxConfigCleared() {
		_spec.ClearField(ratecard.FieldTaxConfig, field.TypeString)
	}
	if value, ok := rcu.mutation.BillingCadence(); ok {
		_spec.SetField(ratecard.FieldBillingCadence, field.TypeString, value)
	}
	if rcu.mutation.BillingCadenceCleared() {
		_spec.ClearField(ratecard.FieldBillingCadence, field.TypeString)
	}
	if value, ok := rcu.mutation.Price(); ok {
		vv, err := ratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(ratecard.FieldPrice, field.TypeString, vv)
	}
	if rcu.mutation.PriceCleared() {
		_spec.ClearField(ratecard.FieldPrice, field.TypeString)
	}
	if value, ok := rcu.mutation.Discounts(); ok {
		vv, err := ratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(ratecard.FieldDiscounts, field.TypeString, vv)
	}
	if rcu.mutation.DiscountsCleared() {
		_spec.ClearField(ratecard.FieldDiscounts, field.TypeString)
	}
	if rcu.mutation.AddonRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.AddonRatecardTable,
			Columns: []string{ratecard.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.AddonRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.AddonRatecardTable,
			Columns: []string{ratecard.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.PlanRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.PlanRatecardTable,
			Columns: []string{ratecard.PlanRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.PlanRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.PlanRatecardTable,
			Columns: []string{ratecard.PlanRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.SubscriptionItemTable,
			Columns: []string{ratecard.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.SubscriptionItemTable,
			Columns: []string{ratecard.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ratecard.FeatureTable,
			Columns: []string{ratecard.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ratecard.FeatureTable,
			Columns: []string{ratecard.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RateCardUpdateOne is the builder for updating a single RateCard entity.
type RateCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RateCardMutation
}

// SetMetadata sets the "metadata" field.
func (rcuo *RateCardUpdateOne) SetMetadata(m map[string]string) *RateCardUpdateOne {
	rcuo.mutation.SetMetadata(m)
	return rcuo
}

// ClearMetadata clears the value of the "metadata" field.
func (rcuo *RateCardUpdateOne) ClearMetadata() *RateCardUpdateOne {
	rcuo.mutation.ClearMetadata()
	return rcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcuo *RateCardUpdateOne) SetUpdatedAt(t time.Time) *RateCardUpdateOne {
	rcuo.mutation.SetUpdatedAt(t)
	return rcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rcuo *RateCardUpdateOne) SetDeletedAt(t time.Time) *RateCardUpdateOne {
	rcuo.mutation.SetDeletedAt(t)
	return rcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableDeletedAt(t *time.Time) *RateCardUpdateOne {
	if t != nil {
		rcuo.SetDeletedAt(*t)
	}
	return rcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rcuo *RateCardUpdateOne) ClearDeletedAt() *RateCardUpdateOne {
	rcuo.mutation.ClearDeletedAt()
	return rcuo
}

// SetName sets the "name" field.
func (rcuo *RateCardUpdateOne) SetName(s string) *RateCardUpdateOne {
	rcuo.mutation.SetName(s)
	return rcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableName(s *string) *RateCardUpdateOne {
	if s != nil {
		rcuo.SetName(*s)
	}
	return rcuo
}

// SetDescription sets the "description" field.
func (rcuo *RateCardUpdateOne) SetDescription(s string) *RateCardUpdateOne {
	rcuo.mutation.SetDescription(s)
	return rcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableDescription(s *string) *RateCardUpdateOne {
	if s != nil {
		rcuo.SetDescription(*s)
	}
	return rcuo
}

// ClearDescription clears the value of the "description" field.
func (rcuo *RateCardUpdateOne) ClearDescription() *RateCardUpdateOne {
	rcuo.mutation.ClearDescription()
	return rcuo
}

// SetEntitlementTemplateMetadata sets the "entitlement_template_metadata" field.
func (rcuo *RateCardUpdateOne) SetEntitlementTemplateMetadata(m map[string]string) *RateCardUpdateOne {
	rcuo.mutation.SetEntitlementTemplateMetadata(m)
	return rcuo
}

// ClearEntitlementTemplateMetadata clears the value of the "entitlement_template_metadata" field.
func (rcuo *RateCardUpdateOne) ClearEntitlementTemplateMetadata() *RateCardUpdateOne {
	rcuo.mutation.ClearEntitlementTemplateMetadata()
	return rcuo
}

// SetEntitlementTemplateConfig sets the "entitlement_template_config" field.
func (rcuo *RateCardUpdateOne) SetEntitlementTemplateConfig(u []uint8) *RateCardUpdateOne {
	rcuo.mutation.SetEntitlementTemplateConfig(u)
	return rcuo
}

// AppendEntitlementTemplateConfig appends u to the "entitlement_template_config" field.
func (rcuo *RateCardUpdateOne) AppendEntitlementTemplateConfig(u []uint8) *RateCardUpdateOne {
	rcuo.mutation.AppendEntitlementTemplateConfig(u)
	return rcuo
}

// ClearEntitlementTemplateConfig clears the value of the "entitlement_template_config" field.
func (rcuo *RateCardUpdateOne) ClearEntitlementTemplateConfig() *RateCardUpdateOne {
	rcuo.mutation.ClearEntitlementTemplateConfig()
	return rcuo
}

// SetFeatureKey sets the "feature_key" field.
func (rcuo *RateCardUpdateOne) SetFeatureKey(s string) *RateCardUpdateOne {
	rcuo.mutation.SetFeatureKey(s)
	return rcuo
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableFeatureKey(s *string) *RateCardUpdateOne {
	if s != nil {
		rcuo.SetFeatureKey(*s)
	}
	return rcuo
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (rcuo *RateCardUpdateOne) ClearFeatureKey() *RateCardUpdateOne {
	rcuo.mutation.ClearFeatureKey()
	return rcuo
}

// SetFeatureID sets the "feature_id" field.
func (rcuo *RateCardUpdateOne) SetFeatureID(s string) *RateCardUpdateOne {
	rcuo.mutation.SetFeatureID(s)
	return rcuo
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableFeatureID(s *string) *RateCardUpdateOne {
	if s != nil {
		rcuo.SetFeatureID(*s)
	}
	return rcuo
}

// ClearFeatureID clears the value of the "feature_id" field.
func (rcuo *RateCardUpdateOne) ClearFeatureID() *RateCardUpdateOne {
	rcuo.mutation.ClearFeatureID()
	return rcuo
}

// SetTaxConfig sets the "tax_config" field.
func (rcuo *RateCardUpdateOne) SetTaxConfig(pc *productcatalog.TaxConfig) *RateCardUpdateOne {
	rcuo.mutation.SetTaxConfig(pc)
	return rcuo
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (rcuo *RateCardUpdateOne) ClearTaxConfig() *RateCardUpdateOne {
	rcuo.mutation.ClearTaxConfig()
	return rcuo
}

// SetBillingCadence sets the "billing_cadence" field.
func (rcuo *RateCardUpdateOne) SetBillingCadence(i isodate.String) *RateCardUpdateOne {
	rcuo.mutation.SetBillingCadence(i)
	return rcuo
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableBillingCadence(i *isodate.String) *RateCardUpdateOne {
	if i != nil {
		rcuo.SetBillingCadence(*i)
	}
	return rcuo
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (rcuo *RateCardUpdateOne) ClearBillingCadence() *RateCardUpdateOne {
	rcuo.mutation.ClearBillingCadence()
	return rcuo
}

// SetPrice sets the "price" field.
func (rcuo *RateCardUpdateOne) SetPrice(pr *productcatalog.Price) *RateCardUpdateOne {
	rcuo.mutation.SetPrice(pr)
	return rcuo
}

// ClearPrice clears the value of the "price" field.
func (rcuo *RateCardUpdateOne) ClearPrice() *RateCardUpdateOne {
	rcuo.mutation.ClearPrice()
	return rcuo
}

// SetDiscounts sets the "discounts" field.
func (rcuo *RateCardUpdateOne) SetDiscounts(pr *productcatalog.Discounts) *RateCardUpdateOne {
	rcuo.mutation.SetDiscounts(pr)
	return rcuo
}

// ClearDiscounts clears the value of the "discounts" field.
func (rcuo *RateCardUpdateOne) ClearDiscounts() *RateCardUpdateOne {
	rcuo.mutation.ClearDiscounts()
	return rcuo
}

// SetAddonRatecardID sets the "addon_ratecard" edge to the AddonRateCard entity by ID.
func (rcuo *RateCardUpdateOne) SetAddonRatecardID(id string) *RateCardUpdateOne {
	rcuo.mutation.SetAddonRatecardID(id)
	return rcuo
}

// SetNillableAddonRatecardID sets the "addon_ratecard" edge to the AddonRateCard entity by ID if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableAddonRatecardID(id *string) *RateCardUpdateOne {
	if id != nil {
		rcuo = rcuo.SetAddonRatecardID(*id)
	}
	return rcuo
}

// SetAddonRatecard sets the "addon_ratecard" edge to the AddonRateCard entity.
func (rcuo *RateCardUpdateOne) SetAddonRatecard(a *AddonRateCard) *RateCardUpdateOne {
	return rcuo.SetAddonRatecardID(a.ID)
}

// SetPlanRatecardID sets the "plan_ratecard" edge to the PlanRateCard entity by ID.
func (rcuo *RateCardUpdateOne) SetPlanRatecardID(id string) *RateCardUpdateOne {
	rcuo.mutation.SetPlanRatecardID(id)
	return rcuo
}

// SetNillablePlanRatecardID sets the "plan_ratecard" edge to the PlanRateCard entity by ID if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillablePlanRatecardID(id *string) *RateCardUpdateOne {
	if id != nil {
		rcuo = rcuo.SetPlanRatecardID(*id)
	}
	return rcuo
}

// SetPlanRatecard sets the "plan_ratecard" edge to the PlanRateCard entity.
func (rcuo *RateCardUpdateOne) SetPlanRatecard(p *PlanRateCard) *RateCardUpdateOne {
	return rcuo.SetPlanRatecardID(p.ID)
}

// SetSubscriptionItemID sets the "subscription_item" edge to the SubscriptionItem entity by ID.
func (rcuo *RateCardUpdateOne) SetSubscriptionItemID(id string) *RateCardUpdateOne {
	rcuo.mutation.SetSubscriptionItemID(id)
	return rcuo
}

// SetNillableSubscriptionItemID sets the "subscription_item" edge to the SubscriptionItem entity by ID if the given value is not nil.
func (rcuo *RateCardUpdateOne) SetNillableSubscriptionItemID(id *string) *RateCardUpdateOne {
	if id != nil {
		rcuo = rcuo.SetSubscriptionItemID(*id)
	}
	return rcuo
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (rcuo *RateCardUpdateOne) SetSubscriptionItem(s *SubscriptionItem) *RateCardUpdateOne {
	return rcuo.SetSubscriptionItemID(s.ID)
}

// SetFeature sets the "feature" edge to the Feature entity.
func (rcuo *RateCardUpdateOne) SetFeature(f *Feature) *RateCardUpdateOne {
	return rcuo.SetFeatureID(f.ID)
}

// Mutation returns the RateCardMutation object of the builder.
func (rcuo *RateCardUpdateOne) Mutation() *RateCardMutation {
	return rcuo.mutation
}

// ClearAddonRatecard clears the "addon_ratecard" edge to the AddonRateCard entity.
func (rcuo *RateCardUpdateOne) ClearAddonRatecard() *RateCardUpdateOne {
	rcuo.mutation.ClearAddonRatecard()
	return rcuo
}

// ClearPlanRatecard clears the "plan_ratecard" edge to the PlanRateCard entity.
func (rcuo *RateCardUpdateOne) ClearPlanRatecard() *RateCardUpdateOne {
	rcuo.mutation.ClearPlanRatecard()
	return rcuo
}

// ClearSubscriptionItem clears the "subscription_item" edge to the SubscriptionItem entity.
func (rcuo *RateCardUpdateOne) ClearSubscriptionItem() *RateCardUpdateOne {
	rcuo.mutation.ClearSubscriptionItem()
	return rcuo
}

// ClearFeature clears the "feature" edge to the Feature entity.
func (rcuo *RateCardUpdateOne) ClearFeature() *RateCardUpdateOne {
	rcuo.mutation.ClearFeature()
	return rcuo
}

// Where appends a list predicates to the RateCardUpdate builder.
func (rcuo *RateCardUpdateOne) Where(ps ...predicate.RateCard) *RateCardUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RateCardUpdateOne) Select(field string, fields ...string) *RateCardUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RateCard entity.
func (rcuo *RateCardUpdateOne) Save(ctx context.Context) (*RateCard, error) {
	rcuo.defaults()
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RateCardUpdateOne) SaveX(ctx context.Context) *RateCard {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RateCardUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RateCardUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcuo *RateCardUpdateOne) defaults() {
	if _, ok := rcuo.mutation.UpdatedAt(); !ok {
		v := ratecard.UpdateDefaultUpdatedAt()
		rcuo.mutation.SetUpdatedAt(v)
	}
}

func (rcuo *RateCardUpdateOne) sqlSave(ctx context.Context) (_node *RateCard, err error) {
	_spec := sqlgraph.NewUpdateSpec(ratecard.Table, ratecard.Columns, sqlgraph.NewFieldSpec(ratecard.FieldID, field.TypeString))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "RateCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ratecard.FieldID)
		for _, f := range fields {
			if !ratecard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != ratecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Metadata(); ok {
		_spec.SetField(ratecard.FieldMetadata, field.TypeJSON, value)
	}
	if rcuo.mutation.MetadataCleared() {
		_spec.ClearField(ratecard.FieldMetadata, field.TypeJSON)
	}
	if value, ok := rcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rcuo.mutation.DeletedAt(); ok {
		_spec.SetField(ratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if rcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(ratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rcuo.mutation.Name(); ok {
		_spec.SetField(ratecard.FieldName, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Description(); ok {
		_spec.SetField(ratecard.FieldDescription, field.TypeString, value)
	}
	if rcuo.mutation.DescriptionCleared() {
		_spec.ClearField(ratecard.FieldDescription, field.TypeString)
	}
	if value, ok := rcuo.mutation.EntitlementTemplateMetadata(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateMetadata, field.TypeJSON, value)
	}
	if rcuo.mutation.EntitlementTemplateMetadataCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateMetadata, field.TypeJSON)
	}
	if rcuo.mutation.EntitlementTemplateIsSoftLimitCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateIsSoftLimit, field.TypeBool)
	}
	if rcuo.mutation.EntitlementTemplateIssueAfterResetCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateIssueAfterReset, field.TypeFloat64)
	}
	if rcuo.mutation.EntitlementTemplateIssueAfterResetPriorityCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateIssueAfterResetPriority, field.TypeUint8)
	}
	if rcuo.mutation.EntitlementTemplatePreserveOverageAtResetCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplatePreserveOverageAtReset, field.TypeBool)
	}
	if value, ok := rcuo.mutation.EntitlementTemplateConfig(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateConfig, field.TypeJSON, value)
	}
	if value, ok := rcuo.mutation.AppendedEntitlementTemplateConfig(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ratecard.FieldEntitlementTemplateConfig, value)
		})
	}
	if rcuo.mutation.EntitlementTemplateConfigCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateConfig, field.TypeJSON)
	}
	if rcuo.mutation.EntitlementTemplateUsagePeriodCleared() {
		_spec.ClearField(ratecard.FieldEntitlementTemplateUsagePeriod, field.TypeString)
	}
	if value, ok := rcuo.mutation.FeatureKey(); ok {
		_spec.SetField(ratecard.FieldFeatureKey, field.TypeString, value)
	}
	if rcuo.mutation.FeatureKeyCleared() {
		_spec.ClearField(ratecard.FieldFeatureKey, field.TypeString)
	}
	if value, ok := rcuo.mutation.TaxConfig(); ok {
		vv, err := ratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(ratecard.FieldTaxConfig, field.TypeString, vv)
	}
	if rcuo.mutation.TaxConfigCleared() {
		_spec.ClearField(ratecard.FieldTaxConfig, field.TypeString)
	}
	if value, ok := rcuo.mutation.BillingCadence(); ok {
		_spec.SetField(ratecard.FieldBillingCadence, field.TypeString, value)
	}
	if rcuo.mutation.BillingCadenceCleared() {
		_spec.ClearField(ratecard.FieldBillingCadence, field.TypeString)
	}
	if value, ok := rcuo.mutation.Price(); ok {
		vv, err := ratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(ratecard.FieldPrice, field.TypeString, vv)
	}
	if rcuo.mutation.PriceCleared() {
		_spec.ClearField(ratecard.FieldPrice, field.TypeString)
	}
	if value, ok := rcuo.mutation.Discounts(); ok {
		vv, err := ratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(ratecard.FieldDiscounts, field.TypeString, vv)
	}
	if rcuo.mutation.DiscountsCleared() {
		_spec.ClearField(ratecard.FieldDiscounts, field.TypeString)
	}
	if rcuo.mutation.AddonRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.AddonRatecardTable,
			Columns: []string{ratecard.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.AddonRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.AddonRatecardTable,
			Columns: []string{ratecard.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.PlanRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.PlanRatecardTable,
			Columns: []string{ratecard.PlanRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.PlanRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.PlanRatecardTable,
			Columns: []string{ratecard.PlanRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.SubscriptionItemTable,
			Columns: []string{ratecard.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.SubscriptionItemTable,
			Columns: []string{ratecard.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ratecard.FeatureTable,
			Columns: []string{ratecard.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ratecard.FeatureTable,
			Columns: []string{ratecard.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RateCard{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}

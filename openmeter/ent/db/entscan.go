// Code generated by ent, DO NOT EDIT.

package db

// App
func (e *App) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *App) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// AppCustomer
func (e *AppCustomer) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *AppCustomer) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// AppStripe
func (e *AppStripe) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *AppStripe) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// AppStripeCustomer
func (e *AppStripeCustomer) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *AppStripeCustomer) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BalanceSnapshot
func (e *BalanceSnapshot) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BalanceSnapshot) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingCustomerOverride
func (e *BillingCustomerOverride) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingCustomerOverride) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoice
func (e *BillingInvoice) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoice) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoiceDiscount
func (e *BillingInvoiceDiscount) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoiceDiscount) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoiceFlatFeeLineConfig
func (e *BillingInvoiceFlatFeeLineConfig) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoiceFlatFeeLineConfig) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoiceLine
func (e *BillingInvoiceLine) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoiceLine) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoiceLineDiscount
func (e *BillingInvoiceLineDiscount) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoiceLineDiscount) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoiceUsageBasedLineConfig
func (e *BillingInvoiceUsageBasedLineConfig) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoiceUsageBasedLineConfig) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingInvoiceValidationIssue
func (e *BillingInvoiceValidationIssue) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingInvoiceValidationIssue) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingProfile
func (e *BillingProfile) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingProfile) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingSequenceNumbers
func (e *BillingSequenceNumbers) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingSequenceNumbers) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// BillingWorkflowConfig
func (e *BillingWorkflowConfig) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *BillingWorkflowConfig) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// Customer
func (e *Customer) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *Customer) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// CustomerSubjects
func (e *CustomerSubjects) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *CustomerSubjects) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// Entitlement
func (e *Entitlement) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *Entitlement) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// Feature
func (e *Feature) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *Feature) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// Grant
func (e *Grant) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *Grant) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// NotificationChannel
func (e *NotificationChannel) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *NotificationChannel) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// NotificationEvent
func (e *NotificationEvent) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *NotificationEvent) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// NotificationEventDeliveryStatus
func (e *NotificationEventDeliveryStatus) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *NotificationEventDeliveryStatus) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// NotificationRule
func (e *NotificationRule) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *NotificationRule) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// Plan
func (e *Plan) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *Plan) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// PlanPhase
func (e *PlanPhase) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *PlanPhase) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// PlanRateCard
func (e *PlanRateCard) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *PlanRateCard) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// Subscription
func (e *Subscription) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *Subscription) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// SubscriptionItem
func (e *SubscriptionItem) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *SubscriptionItem) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// SubscriptionPhase
func (e *SubscriptionPhase) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *SubscriptionPhase) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

// UsageReset
func (e *UsageReset) ScanValues(columns []string) ([]any, error) {
	return e.scanValues(columns)
}

func (e *UsageReset) AssignValues(columns []string, values []any) error {
	return e.assignValues(columns, values)
}

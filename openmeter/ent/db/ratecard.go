// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/ratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// RateCard is the model entity for the RateCard schema.
type RateCard struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// EntitlementTemplateEntitlementType holds the value of the "entitlement_template_entitlement_type" field.
	EntitlementTemplateEntitlementType ratecard.EntitlementTemplateEntitlementType `json:"entitlement_template_entitlement_type,omitempty"`
	// EntitlementTemplateMetadata holds the value of the "entitlement_template_metadata" field.
	EntitlementTemplateMetadata map[string]string `json:"entitlement_template_metadata,omitempty"`
	// EntitlementTemplateIsSoftLimit holds the value of the "entitlement_template_is_soft_limit" field.
	EntitlementTemplateIsSoftLimit *bool `json:"entitlement_template_is_soft_limit,omitempty"`
	// EntitlementTemplateIssueAfterReset holds the value of the "entitlement_template_issue_after_reset" field.
	EntitlementTemplateIssueAfterReset *float64 `json:"entitlement_template_issue_after_reset,omitempty"`
	// EntitlementTemplateIssueAfterResetPriority holds the value of the "entitlement_template_issue_after_reset_priority" field.
	EntitlementTemplateIssueAfterResetPriority *uint8 `json:"entitlement_template_issue_after_reset_priority,omitempty"`
	// EntitlementTemplatePreserveOverageAtReset holds the value of the "entitlement_template_preserve_overage_at_reset" field.
	EntitlementTemplatePreserveOverageAtReset *bool `json:"entitlement_template_preserve_overage_at_reset,omitempty"`
	// EntitlementTemplateConfig holds the value of the "entitlement_template_config" field.
	EntitlementTemplateConfig []uint8 `json:"entitlement_template_config,omitempty"`
	// EntitlementTemplateUsagePeriod holds the value of the "entitlement_template_usage_period" field.
	EntitlementTemplateUsagePeriod *string `json:"entitlement_template_usage_period,omitempty"`
	// Type holds the value of the "type" field.
	Type productcatalog.RateCardType `json:"type,omitempty"`
	// FeatureKey holds the value of the "feature_key" field.
	FeatureKey *string `json:"feature_key,omitempty"`
	// FeatureID holds the value of the "feature_id" field.
	FeatureID *string `json:"feature_id,omitempty"`
	// TaxConfig holds the value of the "tax_config" field.
	TaxConfig *productcatalog.TaxConfig `json:"tax_config,omitempty"`
	// BillingCadence holds the value of the "billing_cadence" field.
	BillingCadence *isodate.String `json:"billing_cadence,omitempty"`
	// Price holds the value of the "price" field.
	Price *productcatalog.Price `json:"price,omitempty"`
	// Discounts holds the value of the "discounts" field.
	Discounts *productcatalog.Discounts `json:"discounts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RateCardQuery when eager-loading is set.
	Edges        RateCardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RateCardEdges holds the relations/edges for other nodes in the graph.
type RateCardEdges struct {
	// AddonRatecard holds the value of the addon_ratecard edge.
	AddonRatecard *AddonRateCard `json:"addon_ratecard,omitempty"`
	// PlanRatecard holds the value of the plan_ratecard edge.
	PlanRatecard *PlanRateCard `json:"plan_ratecard,omitempty"`
	// SubscriptionItem holds the value of the subscription_item edge.
	SubscriptionItem *SubscriptionItem `json:"subscription_item,omitempty"`
	// Feature holds the value of the feature edge.
	Feature *Feature `json:"feature,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AddonRatecardOrErr returns the AddonRatecard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateCardEdges) AddonRatecardOrErr() (*AddonRateCard, error) {
	if e.AddonRatecard != nil {
		return e.AddonRatecard, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: addonratecard.Label}
	}
	return nil, &NotLoadedError{edge: "addon_ratecard"}
}

// PlanRatecardOrErr returns the PlanRatecard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateCardEdges) PlanRatecardOrErr() (*PlanRateCard, error) {
	if e.PlanRatecard != nil {
		return e.PlanRatecard, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: planratecard.Label}
	}
	return nil, &NotLoadedError{edge: "plan_ratecard"}
}

// SubscriptionItemOrErr returns the SubscriptionItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateCardEdges) SubscriptionItemOrErr() (*SubscriptionItem, error) {
	if e.SubscriptionItem != nil {
		return e.SubscriptionItem, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: subscriptionitem.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_item"}
}

// FeatureOrErr returns the Feature value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateCardEdges) FeatureOrErr() (*Feature, error) {
	if e.Feature != nil {
		return e.Feature, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: feature.Label}
	}
	return nil, &NotLoadedError{edge: "feature"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RateCard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ratecard.FieldMetadata, ratecard.FieldEntitlementTemplateMetadata, ratecard.FieldEntitlementTemplateConfig:
			values[i] = new([]byte)
		case ratecard.FieldEntitlementTemplateIsSoftLimit, ratecard.FieldEntitlementTemplatePreserveOverageAtReset:
			values[i] = new(sql.NullBool)
		case ratecard.FieldEntitlementTemplateIssueAfterReset:
			values[i] = new(sql.NullFloat64)
		case ratecard.FieldEntitlementTemplateIssueAfterResetPriority:
			values[i] = new(sql.NullInt64)
		case ratecard.FieldID, ratecard.FieldNamespace, ratecard.FieldName, ratecard.FieldDescription, ratecard.FieldKey, ratecard.FieldEntitlementTemplateEntitlementType, ratecard.FieldEntitlementTemplateUsagePeriod, ratecard.FieldType, ratecard.FieldFeatureKey, ratecard.FieldFeatureID, ratecard.FieldBillingCadence:
			values[i] = new(sql.NullString)
		case ratecard.FieldCreatedAt, ratecard.FieldUpdatedAt, ratecard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case ratecard.FieldTaxConfig:
			values[i] = ratecard.ValueScanner.TaxConfig.ScanValue()
		case ratecard.FieldPrice:
			values[i] = ratecard.ValueScanner.Price.ScanValue()
		case ratecard.FieldDiscounts:
			values[i] = ratecard.ValueScanner.Discounts.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RateCard fields.
func (rc *RateCard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ratecard.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rc.ID = value.String
			}
		case ratecard.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				rc.Namespace = value.String
			}
		case ratecard.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case ratecard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rc.CreatedAt = value.Time
			}
		case ratecard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rc.UpdatedAt = value.Time
			}
		case ratecard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rc.DeletedAt = new(time.Time)
				*rc.DeletedAt = value.Time
			}
		case ratecard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rc.Name = value.String
			}
		case ratecard.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rc.Description = new(string)
				*rc.Description = value.String
			}
		case ratecard.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				rc.Key = value.String
			}
		case ratecard.FieldEntitlementTemplateEntitlementType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_entitlement_type", values[i])
			} else if value.Valid {
				rc.EntitlementTemplateEntitlementType = ratecard.EntitlementTemplateEntitlementType(value.String)
			}
		case ratecard.FieldEntitlementTemplateMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.EntitlementTemplateMetadata); err != nil {
					return fmt.Errorf("unmarshal field entitlement_template_metadata: %w", err)
				}
			}
		case ratecard.FieldEntitlementTemplateIsSoftLimit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_is_soft_limit", values[i])
			} else if value.Valid {
				rc.EntitlementTemplateIsSoftLimit = new(bool)
				*rc.EntitlementTemplateIsSoftLimit = value.Bool
			}
		case ratecard.FieldEntitlementTemplateIssueAfterReset:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_issue_after_reset", values[i])
			} else if value.Valid {
				rc.EntitlementTemplateIssueAfterReset = new(float64)
				*rc.EntitlementTemplateIssueAfterReset = value.Float64
			}
		case ratecard.FieldEntitlementTemplateIssueAfterResetPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_issue_after_reset_priority", values[i])
			} else if value.Valid {
				rc.EntitlementTemplateIssueAfterResetPriority = new(uint8)
				*rc.EntitlementTemplateIssueAfterResetPriority = uint8(value.Int64)
			}
		case ratecard.FieldEntitlementTemplatePreserveOverageAtReset:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_preserve_overage_at_reset", values[i])
			} else if value.Valid {
				rc.EntitlementTemplatePreserveOverageAtReset = new(bool)
				*rc.EntitlementTemplatePreserveOverageAtReset = value.Bool
			}
		case ratecard.FieldEntitlementTemplateConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.EntitlementTemplateConfig); err != nil {
					return fmt.Errorf("unmarshal field entitlement_template_config: %w", err)
				}
			}
		case ratecard.FieldEntitlementTemplateUsagePeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_template_usage_period", values[i])
			} else if value.Valid {
				rc.EntitlementTemplateUsagePeriod = new(string)
				*rc.EntitlementTemplateUsagePeriod = value.String
			}
		case ratecard.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rc.Type = productcatalog.RateCardType(value.String)
			}
		case ratecard.FieldFeatureKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_key", values[i])
			} else if value.Valid {
				rc.FeatureKey = new(string)
				*rc.FeatureKey = value.String
			}
		case ratecard.FieldFeatureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value.Valid {
				rc.FeatureID = new(string)
				*rc.FeatureID = value.String
			}
		case ratecard.FieldTaxConfig:
			if value, err := ratecard.ValueScanner.TaxConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				rc.TaxConfig = value
			}
		case ratecard.FieldBillingCadence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_cadence", values[i])
			} else if value.Valid {
				rc.BillingCadence = new(isodate.String)
				*rc.BillingCadence = isodate.String(value.String)
			}
		case ratecard.FieldPrice:
			if value, err := ratecard.ValueScanner.Price.FromValue(values[i]); err != nil {
				return err
			} else {
				rc.Price = value
			}
		case ratecard.FieldDiscounts:
			if value, err := ratecard.ValueScanner.Discounts.FromValue(values[i]); err != nil {
				return err
			} else {
				rc.Discounts = value
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RateCard.
// This includes values selected through modifiers, order, etc.
func (rc *RateCard) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryAddonRatecard queries the "addon_ratecard" edge of the RateCard entity.
func (rc *RateCard) QueryAddonRatecard() *AddonRateCardQuery {
	return NewRateCardClient(rc.config).QueryAddonRatecard(rc)
}

// QueryPlanRatecard queries the "plan_ratecard" edge of the RateCard entity.
func (rc *RateCard) QueryPlanRatecard() *PlanRateCardQuery {
	return NewRateCardClient(rc.config).QueryPlanRatecard(rc)
}

// QuerySubscriptionItem queries the "subscription_item" edge of the RateCard entity.
func (rc *RateCard) QuerySubscriptionItem() *SubscriptionItemQuery {
	return NewRateCardClient(rc.config).QuerySubscriptionItem(rc)
}

// QueryFeature queries the "feature" edge of the RateCard entity.
func (rc *RateCard) QueryFeature() *FeatureQuery {
	return NewRateCardClient(rc.config).QueryFeature(rc)
}

// Update returns a builder for updating this RateCard.
// Note that you need to call RateCard.Unwrap() before calling this method if this RateCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RateCard) Update() *RateCardUpdateOne {
	return NewRateCardClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RateCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RateCard) Unwrap() *RateCard {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("db: RateCard is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RateCard) String() string {
	var builder strings.Builder
	builder.WriteString("RateCard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("namespace=")
	builder.WriteString(rc.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", rc.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := rc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rc.Name)
	builder.WriteString(", ")
	if v := rc.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(rc.Key)
	builder.WriteString(", ")
	builder.WriteString("entitlement_template_entitlement_type=")
	builder.WriteString(fmt.Sprintf("%v", rc.EntitlementTemplateEntitlementType))
	builder.WriteString(", ")
	builder.WriteString("entitlement_template_metadata=")
	builder.WriteString(fmt.Sprintf("%v", rc.EntitlementTemplateMetadata))
	builder.WriteString(", ")
	if v := rc.EntitlementTemplateIsSoftLimit; v != nil {
		builder.WriteString("entitlement_template_is_soft_limit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.EntitlementTemplateIssueAfterReset; v != nil {
		builder.WriteString("entitlement_template_issue_after_reset=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.EntitlementTemplateIssueAfterResetPriority; v != nil {
		builder.WriteString("entitlement_template_issue_after_reset_priority=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.EntitlementTemplatePreserveOverageAtReset; v != nil {
		builder.WriteString("entitlement_template_preserve_overage_at_reset=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("entitlement_template_config=")
	builder.WriteString(fmt.Sprintf("%v", rc.EntitlementTemplateConfig))
	builder.WriteString(", ")
	if v := rc.EntitlementTemplateUsagePeriod; v != nil {
		builder.WriteString("entitlement_template_usage_period=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", rc.Type))
	builder.WriteString(", ")
	if v := rc.FeatureKey; v != nil {
		builder.WriteString("feature_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rc.FeatureID; v != nil {
		builder.WriteString("feature_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rc.TaxConfig; v != nil {
		builder.WriteString("tax_config=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.BillingCadence; v != nil {
		builder.WriteString("billing_cadence=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := rc.Discounts; v != nil {
		builder.WriteString("discounts=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RateCards is a parsable slice of RateCard.
type RateCards []*RateCard

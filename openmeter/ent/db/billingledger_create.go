// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingLedgerCreate is the builder for creating a BillingLedger entity.
type BillingLedgerCreate struct {
	config
	mutation *BillingLedgerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (blc *BillingLedgerCreate) SetNamespace(s string) *BillingLedgerCreate {
	blc.mutation.SetNamespace(s)
	return blc
}

// SetCreatedAt sets the "created_at" field.
func (blc *BillingLedgerCreate) SetCreatedAt(t time.Time) *BillingLedgerCreate {
	blc.mutation.SetCreatedAt(t)
	return blc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (blc *BillingLedgerCreate) SetNillableCreatedAt(t *time.Time) *BillingLedgerCreate {
	if t != nil {
		blc.SetCreatedAt(*t)
	}
	return blc
}

// SetUpdatedAt sets the "updated_at" field.
func (blc *BillingLedgerCreate) SetUpdatedAt(t time.Time) *BillingLedgerCreate {
	blc.mutation.SetUpdatedAt(t)
	return blc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (blc *BillingLedgerCreate) SetNillableUpdatedAt(t *time.Time) *BillingLedgerCreate {
	if t != nil {
		blc.SetUpdatedAt(*t)
	}
	return blc
}

// SetDeletedAt sets the "deleted_at" field.
func (blc *BillingLedgerCreate) SetDeletedAt(t time.Time) *BillingLedgerCreate {
	blc.mutation.SetDeletedAt(t)
	return blc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (blc *BillingLedgerCreate) SetNillableDeletedAt(t *time.Time) *BillingLedgerCreate {
	if t != nil {
		blc.SetDeletedAt(*t)
	}
	return blc
}

// SetCustomerID sets the "customer_id" field.
func (blc *BillingLedgerCreate) SetCustomerID(s string) *BillingLedgerCreate {
	blc.mutation.SetCustomerID(s)
	return blc
}

// SetCurrency sets the "currency" field.
func (blc *BillingLedgerCreate) SetCurrency(c currencyx.Code) *BillingLedgerCreate {
	blc.mutation.SetCurrency(c)
	return blc
}

// SetID sets the "id" field.
func (blc *BillingLedgerCreate) SetID(s string) *BillingLedgerCreate {
	blc.mutation.SetID(s)
	return blc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (blc *BillingLedgerCreate) SetNillableID(s *string) *BillingLedgerCreate {
	if s != nil {
		blc.SetID(*s)
	}
	return blc
}

// AddSubledgerIDs adds the "subledgers" edge to the BillingSubledger entity by IDs.
func (blc *BillingLedgerCreate) AddSubledgerIDs(ids ...string) *BillingLedgerCreate {
	blc.mutation.AddSubledgerIDs(ids...)
	return blc
}

// AddSubledgers adds the "subledgers" edges to the BillingSubledger entity.
func (blc *BillingLedgerCreate) AddSubledgers(b ...*BillingSubledger) *BillingLedgerCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blc.AddSubledgerIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the BillingSubledgerTransaction entity by IDs.
func (blc *BillingLedgerCreate) AddTransactionIDs(ids ...string) *BillingLedgerCreate {
	blc.mutation.AddTransactionIDs(ids...)
	return blc
}

// AddTransactions adds the "transactions" edges to the BillingSubledgerTransaction entity.
func (blc *BillingLedgerCreate) AddTransactions(b ...*BillingSubledgerTransaction) *BillingLedgerCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return blc.AddTransactionIDs(ids...)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (blc *BillingLedgerCreate) SetCustomer(c *Customer) *BillingLedgerCreate {
	return blc.SetCustomerID(c.ID)
}

// Mutation returns the BillingLedgerMutation object of the builder.
func (blc *BillingLedgerCreate) Mutation() *BillingLedgerMutation {
	return blc.mutation
}

// Save creates the BillingLedger in the database.
func (blc *BillingLedgerCreate) Save(ctx context.Context) (*BillingLedger, error) {
	blc.defaults()
	return withHooks(ctx, blc.sqlSave, blc.mutation, blc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (blc *BillingLedgerCreate) SaveX(ctx context.Context) *BillingLedger {
	v, err := blc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blc *BillingLedgerCreate) Exec(ctx context.Context) error {
	_, err := blc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blc *BillingLedgerCreate) ExecX(ctx context.Context) {
	if err := blc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blc *BillingLedgerCreate) defaults() {
	if _, ok := blc.mutation.CreatedAt(); !ok {
		v := billingledger.DefaultCreatedAt()
		blc.mutation.SetCreatedAt(v)
	}
	if _, ok := blc.mutation.UpdatedAt(); !ok {
		v := billingledger.DefaultUpdatedAt()
		blc.mutation.SetUpdatedAt(v)
	}
	if _, ok := blc.mutation.ID(); !ok {
		v := billingledger.DefaultID()
		blc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blc *BillingLedgerCreate) check() error {
	if _, ok := blc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingLedger.namespace"`)}
	}
	if v, ok := blc.mutation.Namespace(); ok {
		if err := billingledger.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingLedger.namespace": %w`, err)}
		}
	}
	if _, ok := blc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingLedger.created_at"`)}
	}
	if _, ok := blc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingLedger.updated_at"`)}
	}
	if _, ok := blc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "BillingLedger.customer_id"`)}
	}
	if _, ok := blc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingLedger.currency"`)}
	}
	if v, ok := blc.mutation.Currency(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingLedger.currency": %w`, err)}
		}
	}
	if len(blc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`db: missing required edge "BillingLedger.customer"`)}
	}
	return nil
}

func (blc *BillingLedgerCreate) sqlSave(ctx context.Context) (*BillingLedger, error) {
	if err := blc.check(); err != nil {
		return nil, err
	}
	_node, _spec := blc.createSpec()
	if err := sqlgraph.CreateNode(ctx, blc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingLedger.ID type: %T", _spec.ID.Value)
		}
	}
	blc.mutation.id = &_node.ID
	blc.mutation.done = true
	return _node, nil
}

func (blc *BillingLedgerCreate) createSpec() (*BillingLedger, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingLedger{config: blc.config}
		_spec = sqlgraph.NewCreateSpec(billingledger.Table, sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString))
	)
	_spec.OnConflict = blc.conflict
	if id, ok := blc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := blc.mutation.Namespace(); ok {
		_spec.SetField(billingledger.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := blc.mutation.CreatedAt(); ok {
		_spec.SetField(billingledger.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := blc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingledger.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := blc.mutation.DeletedAt(); ok {
		_spec.SetField(billingledger.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := blc.mutation.Currency(); ok {
		_spec.SetField(billingledger.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if nodes := blc.mutation.SubledgersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.SubledgersTable,
			Columns: []string{billingledger.SubledgersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := blc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingledger.TransactionsTable,
			Columns: []string{billingledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := blc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingledger.CustomerTable,
			Columns: []string{billingledger.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingLedger.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingLedgerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (blc *BillingLedgerCreate) OnConflict(opts ...sql.ConflictOption) *BillingLedgerUpsertOne {
	blc.conflict = opts
	return &BillingLedgerUpsertOne{
		create: blc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingLedger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (blc *BillingLedgerCreate) OnConflictColumns(columns ...string) *BillingLedgerUpsertOne {
	blc.conflict = append(blc.conflict, sql.ConflictColumns(columns...))
	return &BillingLedgerUpsertOne{
		create: blc,
	}
}

type (
	// BillingLedgerUpsertOne is the builder for "upsert"-ing
	//  one BillingLedger node.
	BillingLedgerUpsertOne struct {
		create *BillingLedgerCreate
	}

	// BillingLedgerUpsert is the "OnConflict" setter.
	BillingLedgerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingLedgerUpsert) SetUpdatedAt(v time.Time) *BillingLedgerUpsert {
	u.Set(billingledger.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingLedgerUpsert) UpdateUpdatedAt() *BillingLedgerUpsert {
	u.SetExcluded(billingledger.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingLedgerUpsert) SetDeletedAt(v time.Time) *BillingLedgerUpsert {
	u.Set(billingledger.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingLedgerUpsert) UpdateDeletedAt() *BillingLedgerUpsert {
	u.SetExcluded(billingledger.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingLedgerUpsert) ClearDeletedAt() *BillingLedgerUpsert {
	u.SetNull(billingledger.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingLedger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingledger.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingLedgerUpsertOne) UpdateNewValues() *BillingLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingledger.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingledger.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingledger.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CustomerID(); exists {
			s.SetIgnore(billingledger.FieldCustomerID)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billingledger.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingLedger.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingLedgerUpsertOne) Ignore() *BillingLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingLedgerUpsertOne) DoNothing() *BillingLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingLedgerCreate.OnConflict
// documentation for more info.
func (u *BillingLedgerUpsertOne) Update(set func(*BillingLedgerUpsert)) *BillingLedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingLedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingLedgerUpsertOne) SetUpdatedAt(v time.Time) *BillingLedgerUpsertOne {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingLedgerUpsertOne) UpdateUpdatedAt() *BillingLedgerUpsertOne {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingLedgerUpsertOne) SetDeletedAt(v time.Time) *BillingLedgerUpsertOne {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingLedgerUpsertOne) UpdateDeletedAt() *BillingLedgerUpsertOne {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingLedgerUpsertOne) ClearDeletedAt() *BillingLedgerUpsertOne {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BillingLedgerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingLedgerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingLedgerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingLedgerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingLedgerUpsertOne.ID is not supported by MySQL driver. Use BillingLedgerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingLedgerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingLedgerCreateBulk is the builder for creating many BillingLedger entities in bulk.
type BillingLedgerCreateBulk struct {
	config
	err      error
	builders []*BillingLedgerCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingLedger entities in the database.
func (blcb *BillingLedgerCreateBulk) Save(ctx context.Context) ([]*BillingLedger, error) {
	if blcb.err != nil {
		return nil, blcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(blcb.builders))
	nodes := make([]*BillingLedger, len(blcb.builders))
	mutators := make([]Mutator, len(blcb.builders))
	for i := range blcb.builders {
		func(i int, root context.Context) {
			builder := blcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingLedgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, blcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = blcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, blcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, blcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (blcb *BillingLedgerCreateBulk) SaveX(ctx context.Context) []*BillingLedger {
	v, err := blcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blcb *BillingLedgerCreateBulk) Exec(ctx context.Context) error {
	_, err := blcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blcb *BillingLedgerCreateBulk) ExecX(ctx context.Context) {
	if err := blcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingLedger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingLedgerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (blcb *BillingLedgerCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingLedgerUpsertBulk {
	blcb.conflict = opts
	return &BillingLedgerUpsertBulk{
		create: blcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingLedger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (blcb *BillingLedgerCreateBulk) OnConflictColumns(columns ...string) *BillingLedgerUpsertBulk {
	blcb.conflict = append(blcb.conflict, sql.ConflictColumns(columns...))
	return &BillingLedgerUpsertBulk{
		create: blcb,
	}
}

// BillingLedgerUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingLedger nodes.
type BillingLedgerUpsertBulk struct {
	create *BillingLedgerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingLedger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingledger.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingLedgerUpsertBulk) UpdateNewValues() *BillingLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingledger.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingledger.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingledger.FieldCreatedAt)
			}
			if _, exists := b.mutation.CustomerID(); exists {
				s.SetIgnore(billingledger.FieldCustomerID)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billingledger.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingLedger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingLedgerUpsertBulk) Ignore() *BillingLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingLedgerUpsertBulk) DoNothing() *BillingLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingLedgerCreateBulk.OnConflict
// documentation for more info.
func (u *BillingLedgerUpsertBulk) Update(set func(*BillingLedgerUpsert)) *BillingLedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingLedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingLedgerUpsertBulk) SetUpdatedAt(v time.Time) *BillingLedgerUpsertBulk {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingLedgerUpsertBulk) UpdateUpdatedAt() *BillingLedgerUpsertBulk {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingLedgerUpsertBulk) SetDeletedAt(v time.Time) *BillingLedgerUpsertBulk {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingLedgerUpsertBulk) UpdateDeletedAt() *BillingLedgerUpsertBulk {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingLedgerUpsertBulk) ClearDeletedAt() *BillingLedgerUpsertBulk {
	return u.Update(func(s *BillingLedgerUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BillingLedgerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingLedgerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingLedgerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingLedgerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionentitlement"
)

// SubscriptionEntitlement is the model entity for the SubscriptionEntitlement schema.
type SubscriptionEntitlement struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// EntitlementID holds the value of the "entitlement_id" field.
	EntitlementID string `json:"entitlement_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// SubscriptionPhaseKey holds the value of the "subscription_phase_key" field.
	SubscriptionPhaseKey string `json:"subscription_phase_key,omitempty"`
	// SubscriptionItemKey holds the value of the "subscription_item_key" field.
	SubscriptionItemKey string `json:"subscription_item_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionEntitlementQuery when eager-loading is set.
	Edges        SubscriptionEntitlementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionEntitlementEdges holds the relations/edges for other nodes in the graph.
type SubscriptionEntitlementEdges struct {
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// Entitlement holds the value of the entitlement edge.
	Entitlement *Entitlement `json:"entitlement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEntitlementEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// EntitlementOrErr returns the Entitlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEntitlementEdges) EntitlementOrErr() (*Entitlement, error) {
	if e.Entitlement != nil {
		return e.Entitlement, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: entitlement.Label}
	}
	return nil, &NotLoadedError{edge: "entitlement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionEntitlement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionentitlement.FieldID, subscriptionentitlement.FieldNamespace, subscriptionentitlement.FieldEntitlementID, subscriptionentitlement.FieldSubscriptionID, subscriptionentitlement.FieldSubscriptionPhaseKey, subscriptionentitlement.FieldSubscriptionItemKey:
			values[i] = new(sql.NullString)
		case subscriptionentitlement.FieldCreatedAt, subscriptionentitlement.FieldUpdatedAt, subscriptionentitlement.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionEntitlement fields.
func (se *SubscriptionEntitlement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionentitlement.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				se.ID = value.String
			}
		case subscriptionentitlement.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				se.Namespace = value.String
			}
		case subscriptionentitlement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				se.CreatedAt = value.Time
			}
		case subscriptionentitlement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				se.UpdatedAt = value.Time
			}
		case subscriptionentitlement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				se.DeletedAt = new(time.Time)
				*se.DeletedAt = value.Time
			}
		case subscriptionentitlement.FieldEntitlementID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_id", values[i])
			} else if value.Valid {
				se.EntitlementID = value.String
			}
		case subscriptionentitlement.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				se.SubscriptionID = value.String
			}
		case subscriptionentitlement.FieldSubscriptionPhaseKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_phase_key", values[i])
			} else if value.Valid {
				se.SubscriptionPhaseKey = value.String
			}
		case subscriptionentitlement.FieldSubscriptionItemKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_item_key", values[i])
			} else if value.Valid {
				se.SubscriptionItemKey = value.String
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionEntitlement.
// This includes values selected through modifiers, order, etc.
func (se *SubscriptionEntitlement) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// QuerySubscription queries the "subscription" edge of the SubscriptionEntitlement entity.
func (se *SubscriptionEntitlement) QuerySubscription() *SubscriptionQuery {
	return NewSubscriptionEntitlementClient(se.config).QuerySubscription(se)
}

// QueryEntitlement queries the "entitlement" edge of the SubscriptionEntitlement entity.
func (se *SubscriptionEntitlement) QueryEntitlement() *EntitlementQuery {
	return NewSubscriptionEntitlementClient(se.config).QueryEntitlement(se)
}

// Update returns a builder for updating this SubscriptionEntitlement.
// Note that you need to call SubscriptionEntitlement.Unwrap() before calling this method if this SubscriptionEntitlement
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SubscriptionEntitlement) Update() *SubscriptionEntitlementUpdateOne {
	return NewSubscriptionEntitlementClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SubscriptionEntitlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SubscriptionEntitlement) Unwrap() *SubscriptionEntitlement {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionEntitlement is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SubscriptionEntitlement) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionEntitlement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("namespace=")
	builder.WriteString(se.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(se.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(se.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := se.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("entitlement_id=")
	builder.WriteString(se.EntitlementID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(se.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("subscription_phase_key=")
	builder.WriteString(se.SubscriptionPhaseKey)
	builder.WriteString(", ")
	builder.WriteString("subscription_item_key=")
	builder.WriteString(se.SubscriptionItemKey)
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionEntitlements is a parsable slice of SubscriptionEntitlement.
type SubscriptionEntitlements []*SubscriptionEntitlement

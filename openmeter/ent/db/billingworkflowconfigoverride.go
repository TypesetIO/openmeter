// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfigoverride"
)

// BillingWorkflowConfigOverride is the model entity for the BillingWorkflowConfigOverride schema.
type BillingWorkflowConfigOverride struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Alignment holds the value of the "alignment" field.
	Alignment *billing.AlignmentKind `json:"alignment,omitempty"`
	// ItemCollectionPeriodSeconds holds the value of the "item_collection_period_seconds" field.
	ItemCollectionPeriodSeconds *int64 `json:"item_collection_period_seconds,omitempty"`
	// InvoiceAutoAdvance holds the value of the "invoice_auto_advance" field.
	InvoiceAutoAdvance *bool `json:"invoice_auto_advance,omitempty"`
	// InvoiceDraftPeriodSeconds holds the value of the "invoice_draft_period_seconds" field.
	InvoiceDraftPeriodSeconds *int64 `json:"invoice_draft_period_seconds,omitempty"`
	// InvoiceDueAfterSeconds holds the value of the "invoice_due_after_seconds" field.
	InvoiceDueAfterSeconds *int64 `json:"invoice_due_after_seconds,omitempty"`
	// InvoiceCollectionMethod holds the value of the "invoice_collection_method" field.
	InvoiceCollectionMethod *billing.CollectionMethod `json:"invoice_collection_method,omitempty"`
	// InvoiceLineItemResolution holds the value of the "invoice_line_item_resolution" field.
	InvoiceLineItemResolution *billing.GranualityResolution `json:"invoice_line_item_resolution,omitempty"`
	// InvoiceLineItemPerSubject holds the value of the "invoice_line_item_per_subject" field.
	InvoiceLineItemPerSubject *bool `json:"invoice_line_item_per_subject,omitempty"`
	selectValues              sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingWorkflowConfigOverride) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingworkflowconfigoverride.FieldInvoiceAutoAdvance, billingworkflowconfigoverride.FieldInvoiceLineItemPerSubject:
			values[i] = new(sql.NullBool)
		case billingworkflowconfigoverride.FieldItemCollectionPeriodSeconds, billingworkflowconfigoverride.FieldInvoiceDraftPeriodSeconds, billingworkflowconfigoverride.FieldInvoiceDueAfterSeconds:
			values[i] = new(sql.NullInt64)
		case billingworkflowconfigoverride.FieldID, billingworkflowconfigoverride.FieldNamespace, billingworkflowconfigoverride.FieldAlignment, billingworkflowconfigoverride.FieldInvoiceCollectionMethod, billingworkflowconfigoverride.FieldInvoiceLineItemResolution:
			values[i] = new(sql.NullString)
		case billingworkflowconfigoverride.FieldCreatedAt, billingworkflowconfigoverride.FieldUpdatedAt, billingworkflowconfigoverride.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingWorkflowConfigOverride fields.
func (bwco *BillingWorkflowConfigOverride) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingworkflowconfigoverride.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bwco.ID = value.String
			}
		case billingworkflowconfigoverride.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bwco.Namespace = value.String
			}
		case billingworkflowconfigoverride.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bwco.CreatedAt = value.Time
			}
		case billingworkflowconfigoverride.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bwco.UpdatedAt = value.Time
			}
		case billingworkflowconfigoverride.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bwco.DeletedAt = new(time.Time)
				*bwco.DeletedAt = value.Time
			}
		case billingworkflowconfigoverride.FieldAlignment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alignment", values[i])
			} else if value.Valid {
				bwco.Alignment = new(billing.AlignmentKind)
				*bwco.Alignment = billing.AlignmentKind(value.String)
			}
		case billingworkflowconfigoverride.FieldItemCollectionPeriodSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_collection_period_seconds", values[i])
			} else if value.Valid {
				bwco.ItemCollectionPeriodSeconds = new(int64)
				*bwco.ItemCollectionPeriodSeconds = value.Int64
			}
		case billingworkflowconfigoverride.FieldInvoiceAutoAdvance:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_auto_advance", values[i])
			} else if value.Valid {
				bwco.InvoiceAutoAdvance = new(bool)
				*bwco.InvoiceAutoAdvance = value.Bool
			}
		case billingworkflowconfigoverride.FieldInvoiceDraftPeriodSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_draft_period_seconds", values[i])
			} else if value.Valid {
				bwco.InvoiceDraftPeriodSeconds = new(int64)
				*bwco.InvoiceDraftPeriodSeconds = value.Int64
			}
		case billingworkflowconfigoverride.FieldInvoiceDueAfterSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_due_after_seconds", values[i])
			} else if value.Valid {
				bwco.InvoiceDueAfterSeconds = new(int64)
				*bwco.InvoiceDueAfterSeconds = value.Int64
			}
		case billingworkflowconfigoverride.FieldInvoiceCollectionMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_collection_method", values[i])
			} else if value.Valid {
				bwco.InvoiceCollectionMethod = new(billing.CollectionMethod)
				*bwco.InvoiceCollectionMethod = billing.CollectionMethod(value.String)
			}
		case billingworkflowconfigoverride.FieldInvoiceLineItemResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_line_item_resolution", values[i])
			} else if value.Valid {
				bwco.InvoiceLineItemResolution = new(billing.GranualityResolution)
				*bwco.InvoiceLineItemResolution = billing.GranualityResolution(value.String)
			}
		case billingworkflowconfigoverride.FieldInvoiceLineItemPerSubject:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_line_item_per_subject", values[i])
			} else if value.Valid {
				bwco.InvoiceLineItemPerSubject = new(bool)
				*bwco.InvoiceLineItemPerSubject = value.Bool
			}
		default:
			bwco.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingWorkflowConfigOverride.
// This includes values selected through modifiers, order, etc.
func (bwco *BillingWorkflowConfigOverride) Value(name string) (ent.Value, error) {
	return bwco.selectValues.Get(name)
}

// Update returns a builder for updating this BillingWorkflowConfigOverride.
// Note that you need to call BillingWorkflowConfigOverride.Unwrap() before calling this method if this BillingWorkflowConfigOverride
// was returned from a transaction, and the transaction was committed or rolled back.
func (bwco *BillingWorkflowConfigOverride) Update() *BillingWorkflowConfigOverrideUpdateOne {
	return NewBillingWorkflowConfigOverrideClient(bwco.config).UpdateOne(bwco)
}

// Unwrap unwraps the BillingWorkflowConfigOverride entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bwco *BillingWorkflowConfigOverride) Unwrap() *BillingWorkflowConfigOverride {
	_tx, ok := bwco.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingWorkflowConfigOverride is not a transactional entity")
	}
	bwco.config.driver = _tx.drv
	return bwco
}

// String implements the fmt.Stringer.
func (bwco *BillingWorkflowConfigOverride) String() string {
	var builder strings.Builder
	builder.WriteString("BillingWorkflowConfigOverride(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bwco.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bwco.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bwco.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bwco.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bwco.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bwco.Alignment; v != nil {
		builder.WriteString("alignment=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.ItemCollectionPeriodSeconds; v != nil {
		builder.WriteString("item_collection_period_seconds=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.InvoiceAutoAdvance; v != nil {
		builder.WriteString("invoice_auto_advance=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.InvoiceDraftPeriodSeconds; v != nil {
		builder.WriteString("invoice_draft_period_seconds=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.InvoiceDueAfterSeconds; v != nil {
		builder.WriteString("invoice_due_after_seconds=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.InvoiceCollectionMethod; v != nil {
		builder.WriteString("invoice_collection_method=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.InvoiceLineItemResolution; v != nil {
		builder.WriteString("invoice_line_item_resolution=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bwco.InvoiceLineItemPerSubject; v != nil {
		builder.WriteString("invoice_line_item_per_subject=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingWorkflowConfigOverrides is a parsable slice of BillingWorkflowConfigOverride.
type BillingWorkflowConfigOverrides []*BillingWorkflowConfigOverride

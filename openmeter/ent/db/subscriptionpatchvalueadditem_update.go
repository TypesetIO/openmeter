// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueadditem"
)

// SubscriptionPatchValueAddItemUpdate is the builder for updating SubscriptionPatchValueAddItem entities.
type SubscriptionPatchValueAddItemUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionPatchValueAddItemMutation
}

// Where appends a list predicates to the SubscriptionPatchValueAddItemUpdate builder.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) Where(ps ...predicate.SubscriptionPatchValueAddItem) *SubscriptionPatchValueAddItemUpdate {
	spvaiu.mutation.Where(ps...)
	return spvaiu
}

// Mutation returns the SubscriptionPatchValueAddItemMutation object of the builder.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) Mutation() *SubscriptionPatchValueAddItemMutation {
	return spvaiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spvaiu.sqlSave, spvaiu.mutation, spvaiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) SaveX(ctx context.Context) int {
	affected, err := spvaiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) Exec(ctx context.Context) error {
	_, err := spvaiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) ExecX(ctx context.Context) {
	if err := spvaiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvaiu *SubscriptionPatchValueAddItemUpdate) check() error {
	if spvaiu.mutation.SubscriptionPatchCleared() && len(spvaiu.mutation.SubscriptionPatchIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPatchValueAddItem.subscription_patch"`)
	}
	return nil
}

func (spvaiu *SubscriptionPatchValueAddItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spvaiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpatchvalueadditem.Table, subscriptionpatchvalueadditem.Columns, sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString))
	if ps := spvaiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spvaiu.mutation.FeatureKeyCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldFeatureKey, field.TypeString)
	}
	if spvaiu.mutation.CreateEntitlementEntitlementTypeCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType, field.TypeString)
	}
	if spvaiu.mutation.CreateEntitlementMeasureUsageFromCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom, field.TypeTime)
	}
	if spvaiu.mutation.CreateEntitlementIssueAfterResetCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset, field.TypeFloat64)
	}
	if spvaiu.mutation.CreateEntitlementIssueAfterResetPriorityCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority, field.TypeUint8)
	}
	if spvaiu.mutation.CreateEntitlementIsSoftLimitCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit, field.TypeBool)
	}
	if spvaiu.mutation.CreateEntitlementPreserveOverageAtResetCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset, field.TypeBool)
	}
	if spvaiu.mutation.CreateEntitlementConfigCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementConfig, field.TypeJSON)
	}
	if spvaiu.mutation.CreateEntitlementUsagePeriodIntervalCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval, field.TypeString)
	}
	if spvaiu.mutation.CreateEntitlementUsagePeriodAnchorCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor, field.TypeTime)
	}
	if spvaiu.mutation.CreatePriceValueCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreatePriceValue, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spvaiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpatchvalueadditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spvaiu.mutation.done = true
	return n, nil
}

// SubscriptionPatchValueAddItemUpdateOne is the builder for updating a single SubscriptionPatchValueAddItem entity.
type SubscriptionPatchValueAddItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionPatchValueAddItemMutation
}

// Mutation returns the SubscriptionPatchValueAddItemMutation object of the builder.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) Mutation() *SubscriptionPatchValueAddItemMutation {
	return spvaiuo.mutation
}

// Where appends a list predicates to the SubscriptionPatchValueAddItemUpdate builder.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) Where(ps ...predicate.SubscriptionPatchValueAddItem) *SubscriptionPatchValueAddItemUpdateOne {
	spvaiuo.mutation.Where(ps...)
	return spvaiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) Select(field string, fields ...string) *SubscriptionPatchValueAddItemUpdateOne {
	spvaiuo.fields = append([]string{field}, fields...)
	return spvaiuo
}

// Save executes the query and returns the updated SubscriptionPatchValueAddItem entity.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) Save(ctx context.Context) (*SubscriptionPatchValueAddItem, error) {
	return withHooks(ctx, spvaiuo.sqlSave, spvaiuo.mutation, spvaiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) SaveX(ctx context.Context) *SubscriptionPatchValueAddItem {
	node, err := spvaiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) Exec(ctx context.Context) error {
	_, err := spvaiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) ExecX(ctx context.Context) {
	if err := spvaiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) check() error {
	if spvaiuo.mutation.SubscriptionPatchCleared() && len(spvaiuo.mutation.SubscriptionPatchIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPatchValueAddItem.subscription_patch"`)
	}
	return nil
}

func (spvaiuo *SubscriptionPatchValueAddItemUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionPatchValueAddItem, err error) {
	if err := spvaiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpatchvalueadditem.Table, subscriptionpatchvalueadditem.Columns, sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString))
	id, ok := spvaiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionPatchValueAddItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spvaiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionpatchvalueadditem.FieldID)
		for _, f := range fields {
			if !subscriptionpatchvalueadditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionpatchvalueadditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spvaiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spvaiuo.mutation.FeatureKeyCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldFeatureKey, field.TypeString)
	}
	if spvaiuo.mutation.CreateEntitlementEntitlementTypeCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementEntitlementType, field.TypeString)
	}
	if spvaiuo.mutation.CreateEntitlementMeasureUsageFromCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementMeasureUsageFrom, field.TypeTime)
	}
	if spvaiuo.mutation.CreateEntitlementIssueAfterResetCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterReset, field.TypeFloat64)
	}
	if spvaiuo.mutation.CreateEntitlementIssueAfterResetPriorityCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementIssueAfterResetPriority, field.TypeUint8)
	}
	if spvaiuo.mutation.CreateEntitlementIsSoftLimitCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementIsSoftLimit, field.TypeBool)
	}
	if spvaiuo.mutation.CreateEntitlementPreserveOverageAtResetCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementPreserveOverageAtReset, field.TypeBool)
	}
	if spvaiuo.mutation.CreateEntitlementConfigCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementConfig, field.TypeJSON)
	}
	if spvaiuo.mutation.CreateEntitlementUsagePeriodIntervalCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodInterval, field.TypeString)
	}
	if spvaiuo.mutation.CreateEntitlementUsagePeriodAnchorCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreateEntitlementUsagePeriodAnchor, field.TypeTime)
	}
	if spvaiuo.mutation.CreatePriceValueCleared() {
		_spec.ClearField(subscriptionpatchvalueadditem.FieldCreatePriceValue, field.TypeString)
	}
	_node = &SubscriptionPatchValueAddItem{config: spvaiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spvaiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpatchvalueadditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spvaiuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
)

// BillingSubledgerCreate is the builder for creating a BillingSubledger entity.
type BillingSubledgerCreate struct {
	config
	mutation *BillingSubledgerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bsc *BillingSubledgerCreate) SetNamespace(s string) *BillingSubledgerCreate {
	bsc.mutation.SetNamespace(s)
	return bsc
}

// SetMetadata sets the "metadata" field.
func (bsc *BillingSubledgerCreate) SetMetadata(m map[string]string) *BillingSubledgerCreate {
	bsc.mutation.SetMetadata(m)
	return bsc
}

// SetCreatedAt sets the "created_at" field.
func (bsc *BillingSubledgerCreate) SetCreatedAt(t time.Time) *BillingSubledgerCreate {
	bsc.mutation.SetCreatedAt(t)
	return bsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsc *BillingSubledgerCreate) SetNillableCreatedAt(t *time.Time) *BillingSubledgerCreate {
	if t != nil {
		bsc.SetCreatedAt(*t)
	}
	return bsc
}

// SetUpdatedAt sets the "updated_at" field.
func (bsc *BillingSubledgerCreate) SetUpdatedAt(t time.Time) *BillingSubledgerCreate {
	bsc.mutation.SetUpdatedAt(t)
	return bsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bsc *BillingSubledgerCreate) SetNillableUpdatedAt(t *time.Time) *BillingSubledgerCreate {
	if t != nil {
		bsc.SetUpdatedAt(*t)
	}
	return bsc
}

// SetDeletedAt sets the "deleted_at" field.
func (bsc *BillingSubledgerCreate) SetDeletedAt(t time.Time) *BillingSubledgerCreate {
	bsc.mutation.SetDeletedAt(t)
	return bsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bsc *BillingSubledgerCreate) SetNillableDeletedAt(t *time.Time) *BillingSubledgerCreate {
	if t != nil {
		bsc.SetDeletedAt(*t)
	}
	return bsc
}

// SetName sets the "name" field.
func (bsc *BillingSubledgerCreate) SetName(s string) *BillingSubledgerCreate {
	bsc.mutation.SetName(s)
	return bsc
}

// SetDescription sets the "description" field.
func (bsc *BillingSubledgerCreate) SetDescription(s string) *BillingSubledgerCreate {
	bsc.mutation.SetDescription(s)
	return bsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bsc *BillingSubledgerCreate) SetNillableDescription(s *string) *BillingSubledgerCreate {
	if s != nil {
		bsc.SetDescription(*s)
	}
	return bsc
}

// SetKey sets the "key" field.
func (bsc *BillingSubledgerCreate) SetKey(s string) *BillingSubledgerCreate {
	bsc.mutation.SetKey(s)
	return bsc
}

// SetLedgerID sets the "ledger_id" field.
func (bsc *BillingSubledgerCreate) SetLedgerID(s string) *BillingSubledgerCreate {
	bsc.mutation.SetLedgerID(s)
	return bsc
}

// SetPriority sets the "priority" field.
func (bsc *BillingSubledgerCreate) SetPriority(i int64) *BillingSubledgerCreate {
	bsc.mutation.SetPriority(i)
	return bsc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (bsc *BillingSubledgerCreate) SetNillablePriority(i *int64) *BillingSubledgerCreate {
	if i != nil {
		bsc.SetPriority(*i)
	}
	return bsc
}

// SetID sets the "id" field.
func (bsc *BillingSubledgerCreate) SetID(s string) *BillingSubledgerCreate {
	bsc.mutation.SetID(s)
	return bsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bsc *BillingSubledgerCreate) SetNillableID(s *string) *BillingSubledgerCreate {
	if s != nil {
		bsc.SetID(*s)
	}
	return bsc
}

// SetLedger sets the "ledger" edge to the BillingLedger entity.
func (bsc *BillingSubledgerCreate) SetLedger(b *BillingLedger) *BillingSubledgerCreate {
	return bsc.SetLedgerID(b.ID)
}

// AddTransactionIDs adds the "transactions" edge to the BillingSubledgerTransaction entity by IDs.
func (bsc *BillingSubledgerCreate) AddTransactionIDs(ids ...string) *BillingSubledgerCreate {
	bsc.mutation.AddTransactionIDs(ids...)
	return bsc
}

// AddTransactions adds the "transactions" edges to the BillingSubledgerTransaction entity.
func (bsc *BillingSubledgerCreate) AddTransactions(b ...*BillingSubledgerTransaction) *BillingSubledgerCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsc.AddTransactionIDs(ids...)
}

// Mutation returns the BillingSubledgerMutation object of the builder.
func (bsc *BillingSubledgerCreate) Mutation() *BillingSubledgerMutation {
	return bsc.mutation
}

// Save creates the BillingSubledger in the database.
func (bsc *BillingSubledgerCreate) Save(ctx context.Context) (*BillingSubledger, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BillingSubledgerCreate) SaveX(ctx context.Context) *BillingSubledger {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BillingSubledgerCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BillingSubledgerCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BillingSubledgerCreate) defaults() {
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		v := billingsubledger.DefaultCreatedAt()
		bsc.mutation.SetCreatedAt(v)
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		v := billingsubledger.DefaultUpdatedAt()
		bsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bsc.mutation.Priority(); !ok {
		v := billingsubledger.DefaultPriority
		bsc.mutation.SetPriority(v)
	}
	if _, ok := bsc.mutation.ID(); !ok {
		v := billingsubledger.DefaultID()
		bsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BillingSubledgerCreate) check() error {
	if _, ok := bsc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingSubledger.namespace"`)}
	}
	if v, ok := bsc.mutation.Namespace(); ok {
		if err := billingsubledger.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingSubledger.namespace": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingSubledger.created_at"`)}
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingSubledger.updated_at"`)}
	}
	if _, ok := bsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingSubledger.name"`)}
	}
	if _, ok := bsc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "BillingSubledger.key"`)}
	}
	if v, ok := bsc.mutation.Key(); ok {
		if err := billingsubledger.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "BillingSubledger.key": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.LedgerID(); !ok {
		return &ValidationError{Name: "ledger_id", err: errors.New(`db: missing required field "BillingSubledger.ledger_id"`)}
	}
	if _, ok := bsc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`db: missing required field "BillingSubledger.priority"`)}
	}
	if len(bsc.mutation.LedgerIDs()) == 0 {
		return &ValidationError{Name: "ledger", err: errors.New(`db: missing required edge "BillingSubledger.ledger"`)}
	}
	return nil
}

func (bsc *BillingSubledgerCreate) sqlSave(ctx context.Context) (*BillingSubledger, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingSubledger.ID type: %T", _spec.ID.Value)
		}
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BillingSubledgerCreate) createSpec() (*BillingSubledger, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingSubledger{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(billingsubledger.Table, sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString))
	)
	_spec.OnConflict = bsc.conflict
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bsc.mutation.Namespace(); ok {
		_spec.SetField(billingsubledger.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bsc.mutation.Metadata(); ok {
		_spec.SetField(billingsubledger.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bsc.mutation.CreatedAt(); ok {
		_spec.SetField(billingsubledger.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsubledger.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bsc.mutation.DeletedAt(); ok {
		_spec.SetField(billingsubledger.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bsc.mutation.Name(); ok {
		_spec.SetField(billingsubledger.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bsc.mutation.Description(); ok {
		_spec.SetField(billingsubledger.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := bsc.mutation.Key(); ok {
		_spec.SetField(billingsubledger.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := bsc.mutation.Priority(); ok {
		_spec.SetField(billingsubledger.FieldPriority, field.TypeInt64, value)
		_node.Priority = value
	}
	if nodes := bsc.mutation.LedgerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingsubledger.LedgerTable,
			Columns: []string{billingsubledger.LedgerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LedgerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bsc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingsubledger.TransactionsTable,
			Columns: []string{billingsubledger.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingSubledger.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingSubledgerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bsc *BillingSubledgerCreate) OnConflict(opts ...sql.ConflictOption) *BillingSubledgerUpsertOne {
	bsc.conflict = opts
	return &BillingSubledgerUpsertOne{
		create: bsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingSubledger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bsc *BillingSubledgerCreate) OnConflictColumns(columns ...string) *BillingSubledgerUpsertOne {
	bsc.conflict = append(bsc.conflict, sql.ConflictColumns(columns...))
	return &BillingSubledgerUpsertOne{
		create: bsc,
	}
}

type (
	// BillingSubledgerUpsertOne is the builder for "upsert"-ing
	//  one BillingSubledger node.
	BillingSubledgerUpsertOne struct {
		create *BillingSubledgerCreate
	}

	// BillingSubledgerUpsert is the "OnConflict" setter.
	BillingSubledgerUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingSubledgerUpsert) SetMetadata(v map[string]string) *BillingSubledgerUpsert {
	u.Set(billingsubledger.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingSubledgerUpsert) UpdateMetadata() *BillingSubledgerUpsert {
	u.SetExcluded(billingsubledger.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingSubledgerUpsert) ClearMetadata() *BillingSubledgerUpsert {
	u.SetNull(billingsubledger.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingSubledgerUpsert) SetUpdatedAt(v time.Time) *BillingSubledgerUpsert {
	u.Set(billingsubledger.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingSubledgerUpsert) UpdateUpdatedAt() *BillingSubledgerUpsert {
	u.SetExcluded(billingsubledger.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingSubledgerUpsert) SetDeletedAt(v time.Time) *BillingSubledgerUpsert {
	u.Set(billingsubledger.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingSubledgerUpsert) UpdateDeletedAt() *BillingSubledgerUpsert {
	u.SetExcluded(billingsubledger.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingSubledgerUpsert) ClearDeletedAt() *BillingSubledgerUpsert {
	u.SetNull(billingsubledger.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingSubledgerUpsert) SetName(v string) *BillingSubledgerUpsert {
	u.Set(billingsubledger.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingSubledgerUpsert) UpdateName() *BillingSubledgerUpsert {
	u.SetExcluded(billingsubledger.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingSubledgerUpsert) SetDescription(v string) *BillingSubledgerUpsert {
	u.Set(billingsubledger.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingSubledgerUpsert) UpdateDescription() *BillingSubledgerUpsert {
	u.SetExcluded(billingsubledger.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingSubledgerUpsert) ClearDescription() *BillingSubledgerUpsert {
	u.SetNull(billingsubledger.FieldDescription)
	return u
}

// SetPriority sets the "priority" field.
func (u *BillingSubledgerUpsert) SetPriority(v int64) *BillingSubledgerUpsert {
	u.Set(billingsubledger.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *BillingSubledgerUpsert) UpdatePriority() *BillingSubledgerUpsert {
	u.SetExcluded(billingsubledger.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *BillingSubledgerUpsert) AddPriority(v int64) *BillingSubledgerUpsert {
	u.Add(billingsubledger.FieldPriority, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingSubledger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingsubledger.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingSubledgerUpsertOne) UpdateNewValues() *BillingSubledgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingsubledger.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingsubledger.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingsubledger.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(billingsubledger.FieldKey)
		}
		if _, exists := u.create.mutation.LedgerID(); exists {
			s.SetIgnore(billingsubledger.FieldLedgerID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingSubledger.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingSubledgerUpsertOne) Ignore() *BillingSubledgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingSubledgerUpsertOne) DoNothing() *BillingSubledgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingSubledgerCreate.OnConflict
// documentation for more info.
func (u *BillingSubledgerUpsertOne) Update(set func(*BillingSubledgerUpsert)) *BillingSubledgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingSubledgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingSubledgerUpsertOne) SetMetadata(v map[string]string) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingSubledgerUpsertOne) UpdateMetadata() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingSubledgerUpsertOne) ClearMetadata() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingSubledgerUpsertOne) SetUpdatedAt(v time.Time) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingSubledgerUpsertOne) UpdateUpdatedAt() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingSubledgerUpsertOne) SetDeletedAt(v time.Time) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingSubledgerUpsertOne) UpdateDeletedAt() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingSubledgerUpsertOne) ClearDeletedAt() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingSubledgerUpsertOne) SetName(v string) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingSubledgerUpsertOne) UpdateName() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingSubledgerUpsertOne) SetDescription(v string) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingSubledgerUpsertOne) UpdateDescription() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingSubledgerUpsertOne) ClearDescription() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.ClearDescription()
	})
}

// SetPriority sets the "priority" field.
func (u *BillingSubledgerUpsertOne) SetPriority(v int64) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *BillingSubledgerUpsertOne) AddPriority(v int64) *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *BillingSubledgerUpsertOne) UpdatePriority() *BillingSubledgerUpsertOne {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdatePriority()
	})
}

// Exec executes the query.
func (u *BillingSubledgerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingSubledgerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingSubledgerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingSubledgerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingSubledgerUpsertOne.ID is not supported by MySQL driver. Use BillingSubledgerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingSubledgerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingSubledgerCreateBulk is the builder for creating many BillingSubledger entities in bulk.
type BillingSubledgerCreateBulk struct {
	config
	err      error
	builders []*BillingSubledgerCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingSubledger entities in the database.
func (bscb *BillingSubledgerCreateBulk) Save(ctx context.Context) ([]*BillingSubledger, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BillingSubledger, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingSubledgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BillingSubledgerCreateBulk) SaveX(ctx context.Context) []*BillingSubledger {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BillingSubledgerCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BillingSubledgerCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingSubledger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingSubledgerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bscb *BillingSubledgerCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingSubledgerUpsertBulk {
	bscb.conflict = opts
	return &BillingSubledgerUpsertBulk{
		create: bscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingSubledger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bscb *BillingSubledgerCreateBulk) OnConflictColumns(columns ...string) *BillingSubledgerUpsertBulk {
	bscb.conflict = append(bscb.conflict, sql.ConflictColumns(columns...))
	return &BillingSubledgerUpsertBulk{
		create: bscb,
	}
}

// BillingSubledgerUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingSubledger nodes.
type BillingSubledgerUpsertBulk struct {
	create *BillingSubledgerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingSubledger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingsubledger.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingSubledgerUpsertBulk) UpdateNewValues() *BillingSubledgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingsubledger.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingsubledger.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingsubledger.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(billingsubledger.FieldKey)
			}
			if _, exists := b.mutation.LedgerID(); exists {
				s.SetIgnore(billingsubledger.FieldLedgerID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingSubledger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingSubledgerUpsertBulk) Ignore() *BillingSubledgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingSubledgerUpsertBulk) DoNothing() *BillingSubledgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingSubledgerCreateBulk.OnConflict
// documentation for more info.
func (u *BillingSubledgerUpsertBulk) Update(set func(*BillingSubledgerUpsert)) *BillingSubledgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingSubledgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingSubledgerUpsertBulk) SetMetadata(v map[string]string) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingSubledgerUpsertBulk) UpdateMetadata() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingSubledgerUpsertBulk) ClearMetadata() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingSubledgerUpsertBulk) SetUpdatedAt(v time.Time) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingSubledgerUpsertBulk) UpdateUpdatedAt() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingSubledgerUpsertBulk) SetDeletedAt(v time.Time) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingSubledgerUpsertBulk) UpdateDeletedAt() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingSubledgerUpsertBulk) ClearDeletedAt() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingSubledgerUpsertBulk) SetName(v string) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingSubledgerUpsertBulk) UpdateName() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingSubledgerUpsertBulk) SetDescription(v string) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingSubledgerUpsertBulk) UpdateDescription() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingSubledgerUpsertBulk) ClearDescription() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.ClearDescription()
	})
}

// SetPriority sets the "priority" field.
func (u *BillingSubledgerUpsertBulk) SetPriority(v int64) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *BillingSubledgerUpsertBulk) AddPriority(v int64) *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *BillingSubledgerUpsertBulk) UpdatePriority() *BillingSubledgerUpsertBulk {
	return u.Update(func(s *BillingSubledgerUpsert) {
		s.UpdatePriority()
	})
}

// Exec executes the query.
func (u *BillingSubledgerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingSubledgerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingSubledgerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingSubledgerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

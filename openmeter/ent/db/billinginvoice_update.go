// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/invopop/gobl/l10n"
	"github.com/openmeterio/openmeter/openmeter/billing/invoice"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/timezone"
)

// BillingInvoiceUpdate is the builder for updating BillingInvoice entities.
type BillingInvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// Where appends a list predicates to the BillingInvoiceUpdate builder.
func (biu *BillingInvoiceUpdate) Where(ps ...predicate.BillingInvoice) *BillingInvoiceUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetUpdatedAt sets the "updated_at" field.
func (biu *BillingInvoiceUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetUpdatedAt(t)
	return biu
}

// SetDeletedAt sets the "deleted_at" field.
func (biu *BillingInvoiceUpdate) SetDeletedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDeletedAt(t)
	return biu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDeletedAt(*t)
	}
	return biu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biu *BillingInvoiceUpdate) ClearDeletedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearDeletedAt()
	return biu
}

// SetMetadata sets the "metadata" field.
func (biu *BillingInvoiceUpdate) SetMetadata(m map[string]string) *BillingInvoiceUpdate {
	biu.mutation.SetMetadata(m)
	return biu
}

// ClearMetadata clears the value of the "metadata" field.
func (biu *BillingInvoiceUpdate) ClearMetadata() *BillingInvoiceUpdate {
	biu.mutation.ClearMetadata()
	return biu
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressCountry(lcc l10n.ISOCountryCode) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressCountry(lcc)
	return biu
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressCountry(lcc *l10n.ISOCountryCode) *BillingInvoiceUpdate {
	if lcc != nil {
		biu.SetBillingAddressCountry(*lcc)
	}
	return biu
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressCountry() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressCountry()
	return biu
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressPostalCode(s string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressPostalCode(s)
	return biu
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressPostalCode(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetBillingAddressPostalCode(*s)
	}
	return biu
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressPostalCode() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressPostalCode()
	return biu
}

// SetBillingAddressState sets the "billing_address_state" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressState(s string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressState(s)
	return biu
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressState(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetBillingAddressState(*s)
	}
	return biu
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressState() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressState()
	return biu
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressCity(s string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressCity(s)
	return biu
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressCity(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetBillingAddressCity(*s)
	}
	return biu
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressCity() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressCity()
	return biu
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressLine1(s string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressLine1(s)
	return biu
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressLine1(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetBillingAddressLine1(*s)
	}
	return biu
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressLine1() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressLine1()
	return biu
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressLine2(s string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressLine2(s)
	return biu
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressLine2(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetBillingAddressLine2(*s)
	}
	return biu
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressLine2() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressLine2()
	return biu
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (biu *BillingInvoiceUpdate) SetBillingAddressPhoneNumber(s string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingAddressPhoneNumber(s)
	return biu
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableBillingAddressPhoneNumber(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetBillingAddressPhoneNumber(*s)
	}
	return biu
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (biu *BillingInvoiceUpdate) ClearBillingAddressPhoneNumber() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingAddressPhoneNumber()
	return biu
}

// SetCustomerSnapshotTaken sets the "customer_snapshot_taken" field.
func (biu *BillingInvoiceUpdate) SetCustomerSnapshotTaken(b bool) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerSnapshotTaken(b)
	return biu
}

// SetNillableCustomerSnapshotTaken sets the "customer_snapshot_taken" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerSnapshotTaken(b *bool) *BillingInvoiceUpdate {
	if b != nil {
		biu.SetCustomerSnapshotTaken(*b)
	}
	return biu
}

// SetCustomerName sets the "customer_name" field.
func (biu *BillingInvoiceUpdate) SetCustomerName(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerName(s)
	return biu
}

// SetNillableCustomerName sets the "customer_name" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerName(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerName(*s)
	}
	return biu
}

// ClearCustomerName clears the value of the "customer_name" field.
func (biu *BillingInvoiceUpdate) ClearCustomerName() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerName()
	return biu
}

// SetCustomerPrimaryEmail sets the "customer_primary_email" field.
func (biu *BillingInvoiceUpdate) SetCustomerPrimaryEmail(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerPrimaryEmail(s)
	return biu
}

// SetNillableCustomerPrimaryEmail sets the "customer_primary_email" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerPrimaryEmail(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerPrimaryEmail(*s)
	}
	return biu
}

// ClearCustomerPrimaryEmail clears the value of the "customer_primary_email" field.
func (biu *BillingInvoiceUpdate) ClearCustomerPrimaryEmail() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerPrimaryEmail()
	return biu
}

// SetPrecedingInvoiceIds sets the "preceding_invoice_ids" field.
func (biu *BillingInvoiceUpdate) SetPrecedingInvoiceIds(s []string) *BillingInvoiceUpdate {
	biu.mutation.SetPrecedingInvoiceIds(s)
	return biu
}

// AppendPrecedingInvoiceIds appends s to the "preceding_invoice_ids" field.
func (biu *BillingInvoiceUpdate) AppendPrecedingInvoiceIds(s []string) *BillingInvoiceUpdate {
	biu.mutation.AppendPrecedingInvoiceIds(s)
	return biu
}

// ClearPrecedingInvoiceIds clears the value of the "preceding_invoice_ids" field.
func (biu *BillingInvoiceUpdate) ClearPrecedingInvoiceIds() *BillingInvoiceUpdate {
	biu.mutation.ClearPrecedingInvoiceIds()
	return biu
}

// SetIssuedAt sets the "issued_at" field.
func (biu *BillingInvoiceUpdate) SetIssuedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetIssuedAt(t)
	return biu
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableIssuedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetIssuedAt(*t)
	}
	return biu
}

// ClearIssuedAt clears the value of the "issued_at" field.
func (biu *BillingInvoiceUpdate) ClearIssuedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearIssuedAt()
	return biu
}

// SetVoidedAt sets the "voided_at" field.
func (biu *BillingInvoiceUpdate) SetVoidedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetVoidedAt(t)
	return biu
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableVoidedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetVoidedAt(*t)
	}
	return biu
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (biu *BillingInvoiceUpdate) ClearVoidedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearVoidedAt()
	return biu
}

// SetTimezone sets the "timezone" field.
func (biu *BillingInvoiceUpdate) SetTimezone(t timezone.Timezone) *BillingInvoiceUpdate {
	biu.mutation.SetTimezone(t)
	return biu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableTimezone(t *timezone.Timezone) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetTimezone(*t)
	}
	return biu
}

// SetDueDate sets the "due_date" field.
func (biu *BillingInvoiceUpdate) SetDueDate(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDueDate(t)
	return biu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDueDate(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDueDate(*t)
	}
	return biu
}

// ClearDueDate clears the value of the "due_date" field.
func (biu *BillingInvoiceUpdate) ClearDueDate() *BillingInvoiceUpdate {
	biu.mutation.ClearDueDate()
	return biu
}

// SetStatus sets the "status" field.
func (biu *BillingInvoiceUpdate) SetStatus(is invoice.InvoiceStatus) *BillingInvoiceUpdate {
	biu.mutation.SetStatus(is)
	return biu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableStatus(is *invoice.InvoiceStatus) *BillingInvoiceUpdate {
	if is != nil {
		biu.SetStatus(*is)
	}
	return biu
}

// SetProviderConfig sets the "provider_config" field.
func (biu *BillingInvoiceUpdate) SetProviderConfig(pr provider.Configuration) *BillingInvoiceUpdate {
	biu.mutation.SetProviderConfig(pr)
	return biu
}

// SetNillableProviderConfig sets the "provider_config" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableProviderConfig(pr *provider.Configuration) *BillingInvoiceUpdate {
	if pr != nil {
		biu.SetProviderConfig(*pr)
	}
	return biu
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (biu *BillingInvoiceUpdate) SetWorkflowConfigID(s string) *BillingInvoiceUpdate {
	biu.mutation.SetWorkflowConfigID(s)
	return biu
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableWorkflowConfigID(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetWorkflowConfigID(*s)
	}
	return biu
}

// SetProviderReference sets the "provider_reference" field.
func (biu *BillingInvoiceUpdate) SetProviderReference(pr provider.Reference) *BillingInvoiceUpdate {
	biu.mutation.SetProviderReference(pr)
	return biu
}

// SetNillableProviderReference sets the "provider_reference" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableProviderReference(pr *provider.Reference) *BillingInvoiceUpdate {
	if pr != nil {
		biu.SetProviderReference(*pr)
	}
	return biu
}

// SetPeriodStart sets the "period_start" field.
func (biu *BillingInvoiceUpdate) SetPeriodStart(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetPeriodStart(t)
	return biu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePeriodStart(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetPeriodStart(*t)
	}
	return biu
}

// SetPeriodEnd sets the "period_end" field.
func (biu *BillingInvoiceUpdate) SetPeriodEnd(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetPeriodEnd(t)
	return biu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetPeriodEnd(*t)
	}
	return biu
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (biu *BillingInvoiceUpdate) SetBillingWorkflowConfigID(id string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingWorkflowConfigID(id)
	return biu
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biu *BillingInvoiceUpdate) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceUpdate {
	return biu.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceItemIDs adds the "billing_invoice_items" edge to the BillingInvoiceItem entity by IDs.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.AddBillingInvoiceItemIDs(ids...)
	return biu
}

// AddBillingInvoiceItems adds the "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddBillingInvoiceItemIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (biu *BillingInvoiceUpdate) Mutation() *BillingInvoiceMutation {
	return biu.mutation
}

// ClearBillingWorkflowConfig clears the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biu *BillingInvoiceUpdate) ClearBillingWorkflowConfig() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingWorkflowConfig()
	return biu
}

// ClearBillingInvoiceItems clears all "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biu *BillingInvoiceUpdate) ClearBillingInvoiceItems() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingInvoiceItems()
	return biu
}

// RemoveBillingInvoiceItemIDs removes the "billing_invoice_items" edge to BillingInvoiceItem entities by IDs.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.RemoveBillingInvoiceItemIDs(ids...)
	return biu
}

// RemoveBillingInvoiceItems removes "billing_invoice_items" edges to BillingInvoiceItem entities.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveBillingInvoiceItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BillingInvoiceUpdate) Save(ctx context.Context) (int, error) {
	biu.defaults()
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BillingInvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BillingInvoiceUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BillingInvoiceUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biu *BillingInvoiceUpdate) defaults() {
	if _, ok := biu.mutation.UpdatedAt(); !ok {
		v := billinginvoice.UpdateDefaultUpdatedAt()
		biu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BillingInvoiceUpdate) check() error {
	if v, ok := biu.mutation.BillingAddressCountry(); ok {
		if err := billinginvoice.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.billing_address_country": %w`, err)}
		}
	}
	if v, ok := biu.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if v, ok := biu.mutation.ProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "provider_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.provider_config": %w`, err)}
		}
	}
	if biu.mutation.BillingProfileCleared() && len(biu.mutation.BillingProfileIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_profile"`)
	}
	if biu.mutation.BillingWorkflowConfigCleared() && len(biu.mutation.BillingWorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_workflow_config"`)
	}
	if biu.mutation.CustomerCleared() && len(biu.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.customer"`)
	}
	return nil
}

func (biu *BillingInvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoice.Table, billinginvoice.Columns, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
	}
	if biu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
	}
	if biu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoice.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biu.mutation.BillingAddressCountry(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressCountry, field.TypeString, value)
	}
	if biu.mutation.BillingAddressCountryCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressCountry, field.TypeString)
	}
	if value, ok := biu.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressPostalCode, field.TypeString, value)
	}
	if biu.mutation.BillingAddressPostalCodeCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressPostalCode, field.TypeString)
	}
	if value, ok := biu.mutation.BillingAddressState(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressState, field.TypeString, value)
	}
	if biu.mutation.BillingAddressStateCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressState, field.TypeString)
	}
	if value, ok := biu.mutation.BillingAddressCity(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressCity, field.TypeString, value)
	}
	if biu.mutation.BillingAddressCityCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressCity, field.TypeString)
	}
	if value, ok := biu.mutation.BillingAddressLine1(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressLine1, field.TypeString, value)
	}
	if biu.mutation.BillingAddressLine1Cleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressLine1, field.TypeString)
	}
	if value, ok := biu.mutation.BillingAddressLine2(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressLine2, field.TypeString, value)
	}
	if biu.mutation.BillingAddressLine2Cleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressLine2, field.TypeString)
	}
	if value, ok := biu.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressPhoneNumber, field.TypeString, value)
	}
	if biu.mutation.BillingAddressPhoneNumberCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressPhoneNumber, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerSnapshotTaken(); ok {
		_spec.SetField(billinginvoice.FieldCustomerSnapshotTaken, field.TypeBool, value)
	}
	if value, ok := biu.mutation.CustomerName(); ok {
		_spec.SetField(billinginvoice.FieldCustomerName, field.TypeString, value)
	}
	if biu.mutation.CustomerNameCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerName, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerPrimaryEmail(); ok {
		_spec.SetField(billinginvoice.FieldCustomerPrimaryEmail, field.TypeString, value)
	}
	if biu.mutation.CustomerPrimaryEmailCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerPrimaryEmail, field.TypeString)
	}
	if value, ok := biu.mutation.PrecedingInvoiceIds(); ok {
		_spec.SetField(billinginvoice.FieldPrecedingInvoiceIds, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.AppendedPrecedingInvoiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, billinginvoice.FieldPrecedingInvoiceIds, value)
		})
	}
	if biu.mutation.PrecedingInvoiceIdsCleared() {
		_spec.ClearField(billinginvoice.FieldPrecedingInvoiceIds, field.TypeJSON)
	}
	if value, ok := biu.mutation.IssuedAt(); ok {
		_spec.SetField(billinginvoice.FieldIssuedAt, field.TypeTime, value)
	}
	if biu.mutation.IssuedAtCleared() {
		_spec.ClearField(billinginvoice.FieldIssuedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
	}
	if biu.mutation.VoidedAtCleared() {
		_spec.ClearField(billinginvoice.FieldVoidedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.Timezone(); ok {
		_spec.SetField(billinginvoice.FieldTimezone, field.TypeString, value)
	}
	if value, ok := biu.mutation.DueDate(); ok {
		_spec.SetField(billinginvoice.FieldDueDate, field.TypeTime, value)
	}
	if biu.mutation.DueDateCleared() {
		_spec.ClearField(billinginvoice.FieldDueDate, field.TypeTime)
	}
	if value, ok := biu.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biu.mutation.ProviderConfig(); ok {
		vv, err := billinginvoice.ValueScanner.ProviderConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoice.FieldProviderConfig, field.TypeString, vv)
	}
	if value, ok := biu.mutation.ProviderReference(); ok {
		vv, err := billinginvoice.ValueScanner.ProviderReference.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoice.FieldProviderReference, field.TypeString, vv)
	}
	if value, ok := biu.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biu.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
	}
	if biu.mutation.BillingWorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedBillingInvoiceItemsIDs(); len(nodes) > 0 && !biu.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingInvoiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BillingInvoiceUpdateOne is the builder for updating a single BillingInvoice entity.
type BillingInvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (biuo *BillingInvoiceUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetUpdatedAt(t)
	return biuo
}

// SetDeletedAt sets the "deleted_at" field.
func (biuo *BillingInvoiceUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDeletedAt(t)
	return biuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDeletedAt(*t)
	}
	return biuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearDeletedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDeletedAt()
	return biuo
}

// SetMetadata sets the "metadata" field.
func (biuo *BillingInvoiceUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetMetadata(m)
	return biuo
}

// ClearMetadata clears the value of the "metadata" field.
func (biuo *BillingInvoiceUpdateOne) ClearMetadata() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearMetadata()
	return biuo
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressCountry(lcc l10n.ISOCountryCode) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressCountry(lcc)
	return biuo
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressCountry(lcc *l10n.ISOCountryCode) *BillingInvoiceUpdateOne {
	if lcc != nil {
		biuo.SetBillingAddressCountry(*lcc)
	}
	return biuo
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressCountry() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressCountry()
	return biuo
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressPostalCode(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressPostalCode(s)
	return biuo
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressPostalCode(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetBillingAddressPostalCode(*s)
	}
	return biuo
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressPostalCode() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressPostalCode()
	return biuo
}

// SetBillingAddressState sets the "billing_address_state" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressState(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressState(s)
	return biuo
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressState(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetBillingAddressState(*s)
	}
	return biuo
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressState() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressState()
	return biuo
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressCity(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressCity(s)
	return biuo
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressCity(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetBillingAddressCity(*s)
	}
	return biuo
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressCity() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressCity()
	return biuo
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressLine1(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressLine1(s)
	return biuo
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressLine1(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetBillingAddressLine1(*s)
	}
	return biuo
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressLine1() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressLine1()
	return biuo
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressLine2(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressLine2(s)
	return biuo
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressLine2(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetBillingAddressLine2(*s)
	}
	return biuo
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressLine2() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressLine2()
	return biuo
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (biuo *BillingInvoiceUpdateOne) SetBillingAddressPhoneNumber(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingAddressPhoneNumber(s)
	return biuo
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableBillingAddressPhoneNumber(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetBillingAddressPhoneNumber(*s)
	}
	return biuo
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (biuo *BillingInvoiceUpdateOne) ClearBillingAddressPhoneNumber() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingAddressPhoneNumber()
	return biuo
}

// SetCustomerSnapshotTaken sets the "customer_snapshot_taken" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerSnapshotTaken(b bool) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerSnapshotTaken(b)
	return biuo
}

// SetNillableCustomerSnapshotTaken sets the "customer_snapshot_taken" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerSnapshotTaken(b *bool) *BillingInvoiceUpdateOne {
	if b != nil {
		biuo.SetCustomerSnapshotTaken(*b)
	}
	return biuo
}

// SetCustomerName sets the "customer_name" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerName(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerName(s)
	return biuo
}

// SetNillableCustomerName sets the "customer_name" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerName(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerName(*s)
	}
	return biuo
}

// ClearCustomerName clears the value of the "customer_name" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerName() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerName()
	return biuo
}

// SetCustomerPrimaryEmail sets the "customer_primary_email" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerPrimaryEmail(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerPrimaryEmail(s)
	return biuo
}

// SetNillableCustomerPrimaryEmail sets the "customer_primary_email" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerPrimaryEmail(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerPrimaryEmail(*s)
	}
	return biuo
}

// ClearCustomerPrimaryEmail clears the value of the "customer_primary_email" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerPrimaryEmail() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerPrimaryEmail()
	return biuo
}

// SetPrecedingInvoiceIds sets the "preceding_invoice_ids" field.
func (biuo *BillingInvoiceUpdateOne) SetPrecedingInvoiceIds(s []string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPrecedingInvoiceIds(s)
	return biuo
}

// AppendPrecedingInvoiceIds appends s to the "preceding_invoice_ids" field.
func (biuo *BillingInvoiceUpdateOne) AppendPrecedingInvoiceIds(s []string) *BillingInvoiceUpdateOne {
	biuo.mutation.AppendPrecedingInvoiceIds(s)
	return biuo
}

// ClearPrecedingInvoiceIds clears the value of the "preceding_invoice_ids" field.
func (biuo *BillingInvoiceUpdateOne) ClearPrecedingInvoiceIds() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearPrecedingInvoiceIds()
	return biuo
}

// SetIssuedAt sets the "issued_at" field.
func (biuo *BillingInvoiceUpdateOne) SetIssuedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetIssuedAt(t)
	return biuo
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableIssuedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetIssuedAt(*t)
	}
	return biuo
}

// ClearIssuedAt clears the value of the "issued_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearIssuedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearIssuedAt()
	return biuo
}

// SetVoidedAt sets the "voided_at" field.
func (biuo *BillingInvoiceUpdateOne) SetVoidedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetVoidedAt(t)
	return biuo
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableVoidedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetVoidedAt(*t)
	}
	return biuo
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearVoidedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearVoidedAt()
	return biuo
}

// SetTimezone sets the "timezone" field.
func (biuo *BillingInvoiceUpdateOne) SetTimezone(t timezone.Timezone) *BillingInvoiceUpdateOne {
	biuo.mutation.SetTimezone(t)
	return biuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableTimezone(t *timezone.Timezone) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetTimezone(*t)
	}
	return biuo
}

// SetDueDate sets the "due_date" field.
func (biuo *BillingInvoiceUpdateOne) SetDueDate(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDueDate(t)
	return biuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDueDate(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDueDate(*t)
	}
	return biuo
}

// ClearDueDate clears the value of the "due_date" field.
func (biuo *BillingInvoiceUpdateOne) ClearDueDate() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDueDate()
	return biuo
}

// SetStatus sets the "status" field.
func (biuo *BillingInvoiceUpdateOne) SetStatus(is invoice.InvoiceStatus) *BillingInvoiceUpdateOne {
	biuo.mutation.SetStatus(is)
	return biuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableStatus(is *invoice.InvoiceStatus) *BillingInvoiceUpdateOne {
	if is != nil {
		biuo.SetStatus(*is)
	}
	return biuo
}

// SetProviderConfig sets the "provider_config" field.
func (biuo *BillingInvoiceUpdateOne) SetProviderConfig(pr provider.Configuration) *BillingInvoiceUpdateOne {
	biuo.mutation.SetProviderConfig(pr)
	return biuo
}

// SetNillableProviderConfig sets the "provider_config" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableProviderConfig(pr *provider.Configuration) *BillingInvoiceUpdateOne {
	if pr != nil {
		biuo.SetProviderConfig(*pr)
	}
	return biuo
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (biuo *BillingInvoiceUpdateOne) SetWorkflowConfigID(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetWorkflowConfigID(s)
	return biuo
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableWorkflowConfigID(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetWorkflowConfigID(*s)
	}
	return biuo
}

// SetProviderReference sets the "provider_reference" field.
func (biuo *BillingInvoiceUpdateOne) SetProviderReference(pr provider.Reference) *BillingInvoiceUpdateOne {
	biuo.mutation.SetProviderReference(pr)
	return biuo
}

// SetNillableProviderReference sets the "provider_reference" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableProviderReference(pr *provider.Reference) *BillingInvoiceUpdateOne {
	if pr != nil {
		biuo.SetProviderReference(*pr)
	}
	return biuo
}

// SetPeriodStart sets the "period_start" field.
func (biuo *BillingInvoiceUpdateOne) SetPeriodStart(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPeriodStart(t)
	return biuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePeriodStart(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetPeriodStart(*t)
	}
	return biuo
}

// SetPeriodEnd sets the "period_end" field.
func (biuo *BillingInvoiceUpdateOne) SetPeriodEnd(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPeriodEnd(t)
	return biuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetPeriodEnd(*t)
	}
	return biuo
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (biuo *BillingInvoiceUpdateOne) SetBillingWorkflowConfigID(id string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingWorkflowConfigID(id)
	return biuo
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biuo *BillingInvoiceUpdateOne) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceUpdateOne {
	return biuo.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceItemIDs adds the "billing_invoice_items" edge to the BillingInvoiceItem entity by IDs.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.AddBillingInvoiceItemIDs(ids...)
	return biuo
}

// AddBillingInvoiceItems adds the "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddBillingInvoiceItemIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (biuo *BillingInvoiceUpdateOne) Mutation() *BillingInvoiceMutation {
	return biuo.mutation
}

// ClearBillingWorkflowConfig clears the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingWorkflowConfig() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingWorkflowConfig()
	return biuo
}

// ClearBillingInvoiceItems clears all "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingInvoiceItems() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingInvoiceItems()
	return biuo
}

// RemoveBillingInvoiceItemIDs removes the "billing_invoice_items" edge to BillingInvoiceItem entities by IDs.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.RemoveBillingInvoiceItemIDs(ids...)
	return biuo
}

// RemoveBillingInvoiceItems removes "billing_invoice_items" edges to BillingInvoiceItem entities.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveBillingInvoiceItemIDs(ids...)
}

// Where appends a list predicates to the BillingInvoiceUpdate builder.
func (biuo *BillingInvoiceUpdateOne) Where(ps ...predicate.BillingInvoice) *BillingInvoiceUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BillingInvoiceUpdateOne) Select(field string, fields ...string) *BillingInvoiceUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BillingInvoice entity.
func (biuo *BillingInvoiceUpdateOne) Save(ctx context.Context) (*BillingInvoice, error) {
	biuo.defaults()
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BillingInvoiceUpdateOne) SaveX(ctx context.Context) *BillingInvoice {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BillingInvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BillingInvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biuo *BillingInvoiceUpdateOne) defaults() {
	if _, ok := biuo.mutation.UpdatedAt(); !ok {
		v := billinginvoice.UpdateDefaultUpdatedAt()
		biuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BillingInvoiceUpdateOne) check() error {
	if v, ok := biuo.mutation.BillingAddressCountry(); ok {
		if err := billinginvoice.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.billing_address_country": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.ProviderConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "provider_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.provider_config": %w`, err)}
		}
	}
	if biuo.mutation.BillingProfileCleared() && len(biuo.mutation.BillingProfileIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_profile"`)
	}
	if biuo.mutation.BillingWorkflowConfigCleared() && len(biuo.mutation.BillingWorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_workflow_config"`)
	}
	if biuo.mutation.CustomerCleared() && len(biuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.customer"`)
	}
	return nil
}

func (biuo *BillingInvoiceUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoice, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoice.Table, billinginvoice.Columns, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoice.FieldID)
		for _, f := range fields {
			if !billinginvoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
	}
	if biuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
	}
	if biuo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoice.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biuo.mutation.BillingAddressCountry(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressCountry, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressCountryCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressCountry, field.TypeString)
	}
	if value, ok := biuo.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressPostalCode, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressPostalCodeCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressPostalCode, field.TypeString)
	}
	if value, ok := biuo.mutation.BillingAddressState(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressState, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressStateCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressState, field.TypeString)
	}
	if value, ok := biuo.mutation.BillingAddressCity(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressCity, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressCityCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressCity, field.TypeString)
	}
	if value, ok := biuo.mutation.BillingAddressLine1(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressLine1, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressLine1Cleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressLine1, field.TypeString)
	}
	if value, ok := biuo.mutation.BillingAddressLine2(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressLine2, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressLine2Cleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressLine2, field.TypeString)
	}
	if value, ok := biuo.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(billinginvoice.FieldBillingAddressPhoneNumber, field.TypeString, value)
	}
	if biuo.mutation.BillingAddressPhoneNumberCleared() {
		_spec.ClearField(billinginvoice.FieldBillingAddressPhoneNumber, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerSnapshotTaken(); ok {
		_spec.SetField(billinginvoice.FieldCustomerSnapshotTaken, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.CustomerName(); ok {
		_spec.SetField(billinginvoice.FieldCustomerName, field.TypeString, value)
	}
	if biuo.mutation.CustomerNameCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerName, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerPrimaryEmail(); ok {
		_spec.SetField(billinginvoice.FieldCustomerPrimaryEmail, field.TypeString, value)
	}
	if biuo.mutation.CustomerPrimaryEmailCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerPrimaryEmail, field.TypeString)
	}
	if value, ok := biuo.mutation.PrecedingInvoiceIds(); ok {
		_spec.SetField(billinginvoice.FieldPrecedingInvoiceIds, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.AppendedPrecedingInvoiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, billinginvoice.FieldPrecedingInvoiceIds, value)
		})
	}
	if biuo.mutation.PrecedingInvoiceIdsCleared() {
		_spec.ClearField(billinginvoice.FieldPrecedingInvoiceIds, field.TypeJSON)
	}
	if value, ok := biuo.mutation.IssuedAt(); ok {
		_spec.SetField(billinginvoice.FieldIssuedAt, field.TypeTime, value)
	}
	if biuo.mutation.IssuedAtCleared() {
		_spec.ClearField(billinginvoice.FieldIssuedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
	}
	if biuo.mutation.VoidedAtCleared() {
		_spec.ClearField(billinginvoice.FieldVoidedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.Timezone(); ok {
		_spec.SetField(billinginvoice.FieldTimezone, field.TypeString, value)
	}
	if value, ok := biuo.mutation.DueDate(); ok {
		_spec.SetField(billinginvoice.FieldDueDate, field.TypeTime, value)
	}
	if biuo.mutation.DueDateCleared() {
		_spec.ClearField(billinginvoice.FieldDueDate, field.TypeTime)
	}
	if value, ok := biuo.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biuo.mutation.ProviderConfig(); ok {
		vv, err := billinginvoice.ValueScanner.ProviderConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoice.FieldProviderConfig, field.TypeString, vv)
	}
	if value, ok := biuo.mutation.ProviderReference(); ok {
		vv, err := billinginvoice.ValueScanner.ProviderReference.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoice.FieldProviderReference, field.TypeString, vv)
	}
	if value, ok := biuo.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
	}
	if biuo.mutation.BillingWorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedBillingInvoiceItemsIDs(); len(nodes) > 0 && !biuo.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingInvoiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoice{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}

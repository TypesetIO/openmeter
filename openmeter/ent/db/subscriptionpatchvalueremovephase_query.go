// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueremovephase"
)

// SubscriptionPatchValueRemovePhaseQuery is the builder for querying SubscriptionPatchValueRemovePhase entities.
type SubscriptionPatchValueRemovePhaseQuery struct {
	config
	ctx                   *QueryContext
	order                 []subscriptionpatchvalueremovephase.OrderOption
	inters                []Interceptor
	predicates            []predicate.SubscriptionPatchValueRemovePhase
	withSubscriptionPatch *SubscriptionPatchQuery
	modifiers             []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionPatchValueRemovePhaseQuery builder.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Where(ps ...predicate.SubscriptionPatchValueRemovePhase) *SubscriptionPatchValueRemovePhaseQuery {
	spvrpq.predicates = append(spvrpq.predicates, ps...)
	return spvrpq
}

// Limit the number of records to be returned by this query.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Limit(limit int) *SubscriptionPatchValueRemovePhaseQuery {
	spvrpq.ctx.Limit = &limit
	return spvrpq
}

// Offset to start from.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Offset(offset int) *SubscriptionPatchValueRemovePhaseQuery {
	spvrpq.ctx.Offset = &offset
	return spvrpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Unique(unique bool) *SubscriptionPatchValueRemovePhaseQuery {
	spvrpq.ctx.Unique = &unique
	return spvrpq
}

// Order specifies how the records should be ordered.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Order(o ...subscriptionpatchvalueremovephase.OrderOption) *SubscriptionPatchValueRemovePhaseQuery {
	spvrpq.order = append(spvrpq.order, o...)
	return spvrpq
}

// QuerySubscriptionPatch chains the current query on the "subscription_patch" edge.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) QuerySubscriptionPatch() *SubscriptionPatchQuery {
	query := (&SubscriptionPatchClient{config: spvrpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spvrpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spvrpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionpatchvalueremovephase.Table, subscriptionpatchvalueremovephase.FieldID, selector),
			sqlgraph.To(subscriptionpatch.Table, subscriptionpatch.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, subscriptionpatchvalueremovephase.SubscriptionPatchTable, subscriptionpatchvalueremovephase.SubscriptionPatchColumn),
		)
		fromU = sqlgraph.SetNeighbors(spvrpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionPatchValueRemovePhase entity from the query.
// Returns a *NotFoundError when no SubscriptionPatchValueRemovePhase was found.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) First(ctx context.Context) (*SubscriptionPatchValueRemovePhase, error) {
	nodes, err := spvrpq.Limit(1).All(setContextOp(ctx, spvrpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionpatchvalueremovephase.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) FirstX(ctx context.Context) *SubscriptionPatchValueRemovePhase {
	node, err := spvrpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionPatchValueRemovePhase ID from the query.
// Returns a *NotFoundError when no SubscriptionPatchValueRemovePhase ID was found.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = spvrpq.Limit(1).IDs(setContextOp(ctx, spvrpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionpatchvalueremovephase.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) FirstIDX(ctx context.Context) string {
	id, err := spvrpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionPatchValueRemovePhase entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionPatchValueRemovePhase entity is found.
// Returns a *NotFoundError when no SubscriptionPatchValueRemovePhase entities are found.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Only(ctx context.Context) (*SubscriptionPatchValueRemovePhase, error) {
	nodes, err := spvrpq.Limit(2).All(setContextOp(ctx, spvrpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionpatchvalueremovephase.Label}
	default:
		return nil, &NotSingularError{subscriptionpatchvalueremovephase.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) OnlyX(ctx context.Context) *SubscriptionPatchValueRemovePhase {
	node, err := spvrpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionPatchValueRemovePhase ID in the query.
// Returns a *NotSingularError when more than one SubscriptionPatchValueRemovePhase ID is found.
// Returns a *NotFoundError when no entities are found.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = spvrpq.Limit(2).IDs(setContextOp(ctx, spvrpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionpatchvalueremovephase.Label}
	default:
		err = &NotSingularError{subscriptionpatchvalueremovephase.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) OnlyIDX(ctx context.Context) string {
	id, err := spvrpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionPatchValueRemovePhases.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) All(ctx context.Context) ([]*SubscriptionPatchValueRemovePhase, error) {
	ctx = setContextOp(ctx, spvrpq.ctx, ent.OpQueryAll)
	if err := spvrpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionPatchValueRemovePhase, *SubscriptionPatchValueRemovePhaseQuery]()
	return withInterceptors[[]*SubscriptionPatchValueRemovePhase](ctx, spvrpq, qr, spvrpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) AllX(ctx context.Context) []*SubscriptionPatchValueRemovePhase {
	nodes, err := spvrpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionPatchValueRemovePhase IDs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) IDs(ctx context.Context) (ids []string, err error) {
	if spvrpq.ctx.Unique == nil && spvrpq.path != nil {
		spvrpq.Unique(true)
	}
	ctx = setContextOp(ctx, spvrpq.ctx, ent.OpQueryIDs)
	if err = spvrpq.Select(subscriptionpatchvalueremovephase.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) IDsX(ctx context.Context) []string {
	ids, err := spvrpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, spvrpq.ctx, ent.OpQueryCount)
	if err := spvrpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, spvrpq, querierCount[*SubscriptionPatchValueRemovePhaseQuery](), spvrpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) CountX(ctx context.Context) int {
	count, err := spvrpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, spvrpq.ctx, ent.OpQueryExist)
	switch _, err := spvrpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) ExistX(ctx context.Context) bool {
	exist, err := spvrpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionPatchValueRemovePhaseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Clone() *SubscriptionPatchValueRemovePhaseQuery {
	if spvrpq == nil {
		return nil
	}
	return &SubscriptionPatchValueRemovePhaseQuery{
		config:                spvrpq.config,
		ctx:                   spvrpq.ctx.Clone(),
		order:                 append([]subscriptionpatchvalueremovephase.OrderOption{}, spvrpq.order...),
		inters:                append([]Interceptor{}, spvrpq.inters...),
		predicates:            append([]predicate.SubscriptionPatchValueRemovePhase{}, spvrpq.predicates...),
		withSubscriptionPatch: spvrpq.withSubscriptionPatch.Clone(),
		// clone intermediate query.
		sql:  spvrpq.sql.Clone(),
		path: spvrpq.path,
	}
}

// WithSubscriptionPatch tells the query-builder to eager-load the nodes that are connected to
// the "subscription_patch" edge. The optional arguments are used to configure the query builder of the edge.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) WithSubscriptionPatch(opts ...func(*SubscriptionPatchQuery)) *SubscriptionPatchValueRemovePhaseQuery {
	query := (&SubscriptionPatchClient{config: spvrpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spvrpq.withSubscriptionPatch = query
	return spvrpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionPatchValueRemovePhase.Query().
//		GroupBy(subscriptionpatchvalueremovephase.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) GroupBy(field string, fields ...string) *SubscriptionPatchValueRemovePhaseGroupBy {
	spvrpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionPatchValueRemovePhaseGroupBy{build: spvrpq}
	grbuild.flds = &spvrpq.ctx.Fields
	grbuild.label = subscriptionpatchvalueremovephase.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.SubscriptionPatchValueRemovePhase.Query().
//		Select(subscriptionpatchvalueremovephase.FieldNamespace).
//		Scan(ctx, &v)
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Select(fields ...string) *SubscriptionPatchValueRemovePhaseSelect {
	spvrpq.ctx.Fields = append(spvrpq.ctx.Fields, fields...)
	sbuild := &SubscriptionPatchValueRemovePhaseSelect{SubscriptionPatchValueRemovePhaseQuery: spvrpq}
	sbuild.label = subscriptionpatchvalueremovephase.Label
	sbuild.flds, sbuild.scan = &spvrpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionPatchValueRemovePhaseSelect configured with the given aggregations.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) Aggregate(fns ...AggregateFunc) *SubscriptionPatchValueRemovePhaseSelect {
	return spvrpq.Select().Aggregate(fns...)
}

func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range spvrpq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, spvrpq); err != nil {
				return err
			}
		}
	}
	for _, f := range spvrpq.ctx.Fields {
		if !subscriptionpatchvalueremovephase.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if spvrpq.path != nil {
		prev, err := spvrpq.path(ctx)
		if err != nil {
			return err
		}
		spvrpq.sql = prev
	}
	return nil
}

func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionPatchValueRemovePhase, error) {
	var (
		nodes       = []*SubscriptionPatchValueRemovePhase{}
		_spec       = spvrpq.querySpec()
		loadedTypes = [1]bool{
			spvrpq.withSubscriptionPatch != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionPatchValueRemovePhase).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionPatchValueRemovePhase{config: spvrpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(spvrpq.modifiers) > 0 {
		_spec.Modifiers = spvrpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, spvrpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := spvrpq.withSubscriptionPatch; query != nil {
		if err := spvrpq.loadSubscriptionPatch(ctx, query, nodes, nil,
			func(n *SubscriptionPatchValueRemovePhase, e *SubscriptionPatch) { n.Edges.SubscriptionPatch = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) loadSubscriptionPatch(ctx context.Context, query *SubscriptionPatchQuery, nodes []*SubscriptionPatchValueRemovePhase, init func(*SubscriptionPatchValueRemovePhase), assign func(*SubscriptionPatchValueRemovePhase, *SubscriptionPatch)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionPatchValueRemovePhase)
	for i := range nodes {
		fk := nodes[i].SubscriptionPatchID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionpatch.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_patch_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spvrpq.querySpec()
	if len(spvrpq.modifiers) > 0 {
		_spec.Modifiers = spvrpq.modifiers
	}
	_spec.Node.Columns = spvrpq.ctx.Fields
	if len(spvrpq.ctx.Fields) > 0 {
		_spec.Unique = spvrpq.ctx.Unique != nil && *spvrpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, spvrpq.driver, _spec)
}

func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionpatchvalueremovephase.Table, subscriptionpatchvalueremovephase.Columns, sqlgraph.NewFieldSpec(subscriptionpatchvalueremovephase.FieldID, field.TypeString))
	_spec.From = spvrpq.sql
	if unique := spvrpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if spvrpq.path != nil {
		_spec.Unique = true
	}
	if fields := spvrpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionpatchvalueremovephase.FieldID)
		for i := range fields {
			if fields[i] != subscriptionpatchvalueremovephase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if spvrpq.withSubscriptionPatch != nil {
			_spec.Node.AddColumnOnce(subscriptionpatchvalueremovephase.FieldSubscriptionPatchID)
		}
	}
	if ps := spvrpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spvrpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spvrpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spvrpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spvrpq.driver.Dialect())
	t1 := builder.Table(subscriptionpatchvalueremovephase.Table)
	columns := spvrpq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionpatchvalueremovephase.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spvrpq.sql != nil {
		selector = spvrpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spvrpq.ctx.Unique != nil && *spvrpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range spvrpq.modifiers {
		m(selector)
	}
	for _, p := range spvrpq.predicates {
		p(selector)
	}
	for _, p := range spvrpq.order {
		p(selector)
	}
	if offset := spvrpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spvrpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) ForUpdate(opts ...sql.LockOption) *SubscriptionPatchValueRemovePhaseQuery {
	if spvrpq.driver.Dialect() == dialect.Postgres {
		spvrpq.Unique(false)
	}
	spvrpq.modifiers = append(spvrpq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return spvrpq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (spvrpq *SubscriptionPatchValueRemovePhaseQuery) ForShare(opts ...sql.LockOption) *SubscriptionPatchValueRemovePhaseQuery {
	if spvrpq.driver.Dialect() == dialect.Postgres {
		spvrpq.Unique(false)
	}
	spvrpq.modifiers = append(spvrpq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return spvrpq
}

// SubscriptionPatchValueRemovePhaseGroupBy is the group-by builder for SubscriptionPatchValueRemovePhase entities.
type SubscriptionPatchValueRemovePhaseGroupBy struct {
	selector
	build *SubscriptionPatchValueRemovePhaseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spvrpgb *SubscriptionPatchValueRemovePhaseGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionPatchValueRemovePhaseGroupBy {
	spvrpgb.fns = append(spvrpgb.fns, fns...)
	return spvrpgb
}

// Scan applies the selector query and scans the result into the given value.
func (spvrpgb *SubscriptionPatchValueRemovePhaseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spvrpgb.build.ctx, ent.OpQueryGroupBy)
	if err := spvrpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionPatchValueRemovePhaseQuery, *SubscriptionPatchValueRemovePhaseGroupBy](ctx, spvrpgb.build, spvrpgb, spvrpgb.build.inters, v)
}

func (spvrpgb *SubscriptionPatchValueRemovePhaseGroupBy) sqlScan(ctx context.Context, root *SubscriptionPatchValueRemovePhaseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(spvrpgb.fns))
	for _, fn := range spvrpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*spvrpgb.flds)+len(spvrpgb.fns))
		for _, f := range *spvrpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*spvrpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spvrpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionPatchValueRemovePhaseSelect is the builder for selecting fields of SubscriptionPatchValueRemovePhase entities.
type SubscriptionPatchValueRemovePhaseSelect struct {
	*SubscriptionPatchValueRemovePhaseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (spvrps *SubscriptionPatchValueRemovePhaseSelect) Aggregate(fns ...AggregateFunc) *SubscriptionPatchValueRemovePhaseSelect {
	spvrps.fns = append(spvrps.fns, fns...)
	return spvrps
}

// Scan applies the selector query and scans the result into the given value.
func (spvrps *SubscriptionPatchValueRemovePhaseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spvrps.ctx, ent.OpQuerySelect)
	if err := spvrps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionPatchValueRemovePhaseQuery, *SubscriptionPatchValueRemovePhaseSelect](ctx, spvrps.SubscriptionPatchValueRemovePhaseQuery, spvrps, spvrps.inters, v)
}

func (spvrps *SubscriptionPatchValueRemovePhaseSelect) sqlScan(ctx context.Context, root *SubscriptionPatchValueRemovePhaseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(spvrps.fns))
	for _, fn := range spvrps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*spvrps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spvrps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

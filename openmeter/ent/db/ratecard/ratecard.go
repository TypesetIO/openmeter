// Code generated by ent, DO NOT EDIT.

package ratecard

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

const (
	// Label holds the string label denoting the ratecard type in the database.
	Label = "rate_card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldEntitlementTemplateEntitlementType holds the string denoting the entitlement_template_entitlement_type field in the database.
	FieldEntitlementTemplateEntitlementType = "entitlement_template_entitlement_type"
	// FieldEntitlementTemplateMetadata holds the string denoting the entitlement_template_metadata field in the database.
	FieldEntitlementTemplateMetadata = "entitlement_template_metadata"
	// FieldEntitlementTemplateIsSoftLimit holds the string denoting the entitlement_template_is_soft_limit field in the database.
	FieldEntitlementTemplateIsSoftLimit = "entitlement_template_is_soft_limit"
	// FieldEntitlementTemplateIssueAfterReset holds the string denoting the entitlement_template_issue_after_reset field in the database.
	FieldEntitlementTemplateIssueAfterReset = "entitlement_template_issue_after_reset"
	// FieldEntitlementTemplateIssueAfterResetPriority holds the string denoting the entitlement_template_issue_after_reset_priority field in the database.
	FieldEntitlementTemplateIssueAfterResetPriority = "entitlement_template_issue_after_reset_priority"
	// FieldEntitlementTemplatePreserveOverageAtReset holds the string denoting the entitlement_template_preserve_overage_at_reset field in the database.
	FieldEntitlementTemplatePreserveOverageAtReset = "entitlement_template_preserve_overage_at_reset"
	// FieldEntitlementTemplateConfig holds the string denoting the entitlement_template_config field in the database.
	FieldEntitlementTemplateConfig = "entitlement_template_config"
	// FieldEntitlementTemplateUsagePeriod holds the string denoting the entitlement_template_usage_period field in the database.
	FieldEntitlementTemplateUsagePeriod = "entitlement_template_usage_period"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFeatureKey holds the string denoting the feature_key field in the database.
	FieldFeatureKey = "feature_key"
	// FieldFeatureID holds the string denoting the feature_id field in the database.
	FieldFeatureID = "feature_id"
	// FieldTaxConfig holds the string denoting the tax_config field in the database.
	FieldTaxConfig = "tax_config"
	// FieldBillingCadence holds the string denoting the billing_cadence field in the database.
	FieldBillingCadence = "billing_cadence"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDiscounts holds the string denoting the discounts field in the database.
	FieldDiscounts = "discounts"
	// EdgeAddonRatecard holds the string denoting the addon_ratecard edge name in mutations.
	EdgeAddonRatecard = "addon_ratecard"
	// EdgePlanRatecard holds the string denoting the plan_ratecard edge name in mutations.
	EdgePlanRatecard = "plan_ratecard"
	// EdgeSubscriptionItem holds the string denoting the subscription_item edge name in mutations.
	EdgeSubscriptionItem = "subscription_item"
	// EdgeFeature holds the string denoting the feature edge name in mutations.
	EdgeFeature = "feature"
	// Table holds the table name of the ratecard in the database.
	Table = "rate_cards"
	// AddonRatecardTable is the table that holds the addon_ratecard relation/edge.
	AddonRatecardTable = "addon_rate_cards"
	// AddonRatecardInverseTable is the table name for the AddonRateCard entity.
	// It exists in this package in order to avoid circular dependency with the "addonratecard" package.
	AddonRatecardInverseTable = "addon_rate_cards"
	// AddonRatecardColumn is the table column denoting the addon_ratecard relation/edge.
	AddonRatecardColumn = "ratecard_id"
	// PlanRatecardTable is the table that holds the plan_ratecard relation/edge.
	PlanRatecardTable = "plan_rate_cards"
	// PlanRatecardInverseTable is the table name for the PlanRateCard entity.
	// It exists in this package in order to avoid circular dependency with the "planratecard" package.
	PlanRatecardInverseTable = "plan_rate_cards"
	// PlanRatecardColumn is the table column denoting the plan_ratecard relation/edge.
	PlanRatecardColumn = "ratecard_id"
	// SubscriptionItemTable is the table that holds the subscription_item relation/edge.
	SubscriptionItemTable = "subscription_items"
	// SubscriptionItemInverseTable is the table name for the SubscriptionItem entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionitem" package.
	SubscriptionItemInverseTable = "subscription_items"
	// SubscriptionItemColumn is the table column denoting the subscription_item relation/edge.
	SubscriptionItemColumn = "ratecard_id"
	// FeatureTable is the table that holds the feature relation/edge.
	FeatureTable = "rate_cards"
	// FeatureInverseTable is the table name for the Feature entity.
	// It exists in this package in order to avoid circular dependency with the "feature" package.
	FeatureInverseTable = "features"
	// FeatureColumn is the table column denoting the feature relation/edge.
	FeatureColumn = "feature_id"
)

// Columns holds all SQL columns for ratecard fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldKey,
	FieldEntitlementTemplateEntitlementType,
	FieldEntitlementTemplateMetadata,
	FieldEntitlementTemplateIsSoftLimit,
	FieldEntitlementTemplateIssueAfterReset,
	FieldEntitlementTemplateIssueAfterResetPriority,
	FieldEntitlementTemplatePreserveOverageAtReset,
	FieldEntitlementTemplateConfig,
	FieldEntitlementTemplateUsagePeriod,
	FieldType,
	FieldFeatureKey,
	FieldFeatureID,
	FieldTaxConfig,
	FieldBillingCadence,
	FieldPrice,
	FieldDiscounts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// ValueScanner of all RateCard fields.
	ValueScanner struct {
		TaxConfig field.TypeValueScanner[*productcatalog.TaxConfig]
		Price     field.TypeValueScanner[*productcatalog.Price]
		Discounts field.TypeValueScanner[*productcatalog.Discounts]
	}
)

// EntitlementTemplateEntitlementType defines the type for the "entitlement_template_entitlement_type" enum field.
type EntitlementTemplateEntitlementType string

// EntitlementTemplateEntitlementType values.
const (
	EntitlementTemplateEntitlementTypeMetered EntitlementTemplateEntitlementType = "metered"
	EntitlementTemplateEntitlementTypeStatic  EntitlementTemplateEntitlementType = "static"
	EntitlementTemplateEntitlementTypeBoolean EntitlementTemplateEntitlementType = "boolean"
)

func (etet EntitlementTemplateEntitlementType) String() string {
	return string(etet)
}

// EntitlementTemplateEntitlementTypeValidator is a validator for the "entitlement_template_entitlement_type" field enum values. It is called by the builders before save.
func EntitlementTemplateEntitlementTypeValidator(etet EntitlementTemplateEntitlementType) error {
	switch etet {
	case EntitlementTemplateEntitlementTypeMetered, EntitlementTemplateEntitlementTypeStatic, EntitlementTemplateEntitlementTypeBoolean:
		return nil
	default:
		return fmt.Errorf("ratecard: invalid enum value for entitlement_template_entitlement_type field: %q", etet)
	}
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type productcatalog.RateCardType) error {
	switch _type {
	case "flat_fee", "usage_based":
		return nil
	default:
		return fmt.Errorf("ratecard: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the RateCard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByEntitlementTemplateEntitlementType orders the results by the entitlement_template_entitlement_type field.
func ByEntitlementTemplateEntitlementType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplateEntitlementType, opts...).ToFunc()
}

// ByEntitlementTemplateIsSoftLimit orders the results by the entitlement_template_is_soft_limit field.
func ByEntitlementTemplateIsSoftLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplateIsSoftLimit, opts...).ToFunc()
}

// ByEntitlementTemplateIssueAfterReset orders the results by the entitlement_template_issue_after_reset field.
func ByEntitlementTemplateIssueAfterReset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplateIssueAfterReset, opts...).ToFunc()
}

// ByEntitlementTemplateIssueAfterResetPriority orders the results by the entitlement_template_issue_after_reset_priority field.
func ByEntitlementTemplateIssueAfterResetPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplateIssueAfterResetPriority, opts...).ToFunc()
}

// ByEntitlementTemplatePreserveOverageAtReset orders the results by the entitlement_template_preserve_overage_at_reset field.
func ByEntitlementTemplatePreserveOverageAtReset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplatePreserveOverageAtReset, opts...).ToFunc()
}

// ByEntitlementTemplateUsagePeriod orders the results by the entitlement_template_usage_period field.
func ByEntitlementTemplateUsagePeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplateUsagePeriod, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFeatureKey orders the results by the feature_key field.
func ByFeatureKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureKey, opts...).ToFunc()
}

// ByFeatureID orders the results by the feature_id field.
func ByFeatureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureID, opts...).ToFunc()
}

// ByTaxConfig orders the results by the tax_config field.
func ByTaxConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxConfig, opts...).ToFunc()
}

// ByBillingCadence orders the results by the billing_cadence field.
func ByBillingCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCadence, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDiscounts orders the results by the discounts field.
func ByDiscounts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscounts, opts...).ToFunc()
}

// ByAddonRatecardField orders the results by addon_ratecard field.
func ByAddonRatecardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddonRatecardStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanRatecardField orders the results by plan_ratecard field.
func ByPlanRatecardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanRatecardStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionItemField orders the results by subscription_item field.
func BySubscriptionItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeatureField orders the results by feature field.
func ByFeatureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureStep(), sql.OrderByField(field, opts...))
	}
}
func newAddonRatecardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddonRatecardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AddonRatecardTable, AddonRatecardColumn),
	)
}
func newPlanRatecardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanRatecardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlanRatecardTable, PlanRatecardColumn),
	)
}
func newSubscriptionItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SubscriptionItemTable, SubscriptionItemColumn),
	)
}
func newFeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeatureTable, FeatureColumn),
	)
}

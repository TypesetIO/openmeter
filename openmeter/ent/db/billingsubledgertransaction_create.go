// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
)

// BillingSubledgerTransactionCreate is the builder for creating a BillingSubledgerTransaction entity.
type BillingSubledgerTransactionCreate struct {
	config
	mutation *BillingSubledgerTransactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bstc *BillingSubledgerTransactionCreate) SetNamespace(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetNamespace(s)
	return bstc
}

// SetMetadata sets the "metadata" field.
func (bstc *BillingSubledgerTransactionCreate) SetMetadata(m map[string]string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetMetadata(m)
	return bstc
}

// SetCreatedAt sets the "created_at" field.
func (bstc *BillingSubledgerTransactionCreate) SetCreatedAt(t time.Time) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetCreatedAt(t)
	return bstc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableCreatedAt(t *time.Time) *BillingSubledgerTransactionCreate {
	if t != nil {
		bstc.SetCreatedAt(*t)
	}
	return bstc
}

// SetUpdatedAt sets the "updated_at" field.
func (bstc *BillingSubledgerTransactionCreate) SetUpdatedAt(t time.Time) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetUpdatedAt(t)
	return bstc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableUpdatedAt(t *time.Time) *BillingSubledgerTransactionCreate {
	if t != nil {
		bstc.SetUpdatedAt(*t)
	}
	return bstc
}

// SetDeletedAt sets the "deleted_at" field.
func (bstc *BillingSubledgerTransactionCreate) SetDeletedAt(t time.Time) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetDeletedAt(t)
	return bstc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableDeletedAt(t *time.Time) *BillingSubledgerTransactionCreate {
	if t != nil {
		bstc.SetDeletedAt(*t)
	}
	return bstc
}

// SetName sets the "name" field.
func (bstc *BillingSubledgerTransactionCreate) SetName(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetName(s)
	return bstc
}

// SetDescription sets the "description" field.
func (bstc *BillingSubledgerTransactionCreate) SetDescription(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetDescription(s)
	return bstc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableDescription(s *string) *BillingSubledgerTransactionCreate {
	if s != nil {
		bstc.SetDescription(*s)
	}
	return bstc
}

// SetSubledgerID sets the "subledger_id" field.
func (bstc *BillingSubledgerTransactionCreate) SetSubledgerID(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetSubledgerID(s)
	return bstc
}

// SetLedgerID sets the "ledger_id" field.
func (bstc *BillingSubledgerTransactionCreate) SetLedgerID(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetLedgerID(s)
	return bstc
}

// SetAmount sets the "amount" field.
func (bstc *BillingSubledgerTransactionCreate) SetAmount(a alpacadecimal.Decimal) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetAmount(a)
	return bstc
}

// SetOwnerType sets the "owner_type" field.
func (bstc *BillingSubledgerTransactionCreate) SetOwnerType(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetOwnerType(s)
	return bstc
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableOwnerType(s *string) *BillingSubledgerTransactionCreate {
	if s != nil {
		bstc.SetOwnerType(*s)
	}
	return bstc
}

// SetOwnerID sets the "owner_id" field.
func (bstc *BillingSubledgerTransactionCreate) SetOwnerID(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetOwnerID(s)
	return bstc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableOwnerID(s *string) *BillingSubledgerTransactionCreate {
	if s != nil {
		bstc.SetOwnerID(*s)
	}
	return bstc
}

// SetID sets the "id" field.
func (bstc *BillingSubledgerTransactionCreate) SetID(s string) *BillingSubledgerTransactionCreate {
	bstc.mutation.SetID(s)
	return bstc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bstc *BillingSubledgerTransactionCreate) SetNillableID(s *string) *BillingSubledgerTransactionCreate {
	if s != nil {
		bstc.SetID(*s)
	}
	return bstc
}

// SetSubledger sets the "subledger" edge to the BillingSubledger entity.
func (bstc *BillingSubledgerTransactionCreate) SetSubledger(b *BillingSubledger) *BillingSubledgerTransactionCreate {
	return bstc.SetSubledgerID(b.ID)
}

// SetLedger sets the "ledger" edge to the BillingLedger entity.
func (bstc *BillingSubledgerTransactionCreate) SetLedger(b *BillingLedger) *BillingSubledgerTransactionCreate {
	return bstc.SetLedgerID(b.ID)
}

// Mutation returns the BillingSubledgerTransactionMutation object of the builder.
func (bstc *BillingSubledgerTransactionCreate) Mutation() *BillingSubledgerTransactionMutation {
	return bstc.mutation
}

// Save creates the BillingSubledgerTransaction in the database.
func (bstc *BillingSubledgerTransactionCreate) Save(ctx context.Context) (*BillingSubledgerTransaction, error) {
	bstc.defaults()
	return withHooks(ctx, bstc.sqlSave, bstc.mutation, bstc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bstc *BillingSubledgerTransactionCreate) SaveX(ctx context.Context) *BillingSubledgerTransaction {
	v, err := bstc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bstc *BillingSubledgerTransactionCreate) Exec(ctx context.Context) error {
	_, err := bstc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bstc *BillingSubledgerTransactionCreate) ExecX(ctx context.Context) {
	if err := bstc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bstc *BillingSubledgerTransactionCreate) defaults() {
	if _, ok := bstc.mutation.CreatedAt(); !ok {
		v := billingsubledgertransaction.DefaultCreatedAt()
		bstc.mutation.SetCreatedAt(v)
	}
	if _, ok := bstc.mutation.UpdatedAt(); !ok {
		v := billingsubledgertransaction.DefaultUpdatedAt()
		bstc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bstc.mutation.ID(); !ok {
		v := billingsubledgertransaction.DefaultID()
		bstc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bstc *BillingSubledgerTransactionCreate) check() error {
	if _, ok := bstc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingSubledgerTransaction.namespace"`)}
	}
	if v, ok := bstc.mutation.Namespace(); ok {
		if err := billingsubledgertransaction.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingSubledgerTransaction.namespace": %w`, err)}
		}
	}
	if _, ok := bstc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingSubledgerTransaction.created_at"`)}
	}
	if _, ok := bstc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingSubledgerTransaction.updated_at"`)}
	}
	if _, ok := bstc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingSubledgerTransaction.name"`)}
	}
	if _, ok := bstc.mutation.SubledgerID(); !ok {
		return &ValidationError{Name: "subledger_id", err: errors.New(`db: missing required field "BillingSubledgerTransaction.subledger_id"`)}
	}
	if _, ok := bstc.mutation.LedgerID(); !ok {
		return &ValidationError{Name: "ledger_id", err: errors.New(`db: missing required field "BillingSubledgerTransaction.ledger_id"`)}
	}
	if _, ok := bstc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingSubledgerTransaction.amount"`)}
	}
	if len(bstc.mutation.SubledgerIDs()) == 0 {
		return &ValidationError{Name: "subledger", err: errors.New(`db: missing required edge "BillingSubledgerTransaction.subledger"`)}
	}
	if len(bstc.mutation.LedgerIDs()) == 0 {
		return &ValidationError{Name: "ledger", err: errors.New(`db: missing required edge "BillingSubledgerTransaction.ledger"`)}
	}
	return nil
}

func (bstc *BillingSubledgerTransactionCreate) sqlSave(ctx context.Context) (*BillingSubledgerTransaction, error) {
	if err := bstc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bstc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bstc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingSubledgerTransaction.ID type: %T", _spec.ID.Value)
		}
	}
	bstc.mutation.id = &_node.ID
	bstc.mutation.done = true
	return _node, nil
}

func (bstc *BillingSubledgerTransactionCreate) createSpec() (*BillingSubledgerTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingSubledgerTransaction{config: bstc.config}
		_spec = sqlgraph.NewCreateSpec(billingsubledgertransaction.Table, sqlgraph.NewFieldSpec(billingsubledgertransaction.FieldID, field.TypeString))
	)
	_spec.OnConflict = bstc.conflict
	if id, ok := bstc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bstc.mutation.Namespace(); ok {
		_spec.SetField(billingsubledgertransaction.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bstc.mutation.Metadata(); ok {
		_spec.SetField(billingsubledgertransaction.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bstc.mutation.CreatedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bstc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bstc.mutation.DeletedAt(); ok {
		_spec.SetField(billingsubledgertransaction.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bstc.mutation.Name(); ok {
		_spec.SetField(billingsubledgertransaction.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bstc.mutation.Description(); ok {
		_spec.SetField(billingsubledgertransaction.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := bstc.mutation.Amount(); ok {
		_spec.SetField(billingsubledgertransaction.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := bstc.mutation.OwnerType(); ok {
		_spec.SetField(billingsubledgertransaction.FieldOwnerType, field.TypeString, value)
		_node.OwnerType = &value
	}
	if value, ok := bstc.mutation.OwnerID(); ok {
		_spec.SetField(billingsubledgertransaction.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = &value
	}
	if nodes := bstc.mutation.SubledgerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingsubledgertransaction.SubledgerTable,
			Columns: []string{billingsubledgertransaction.SubledgerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingsubledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubledgerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bstc.mutation.LedgerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingsubledgertransaction.LedgerTable,
			Columns: []string{billingsubledgertransaction.LedgerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LedgerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingSubledgerTransaction.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingSubledgerTransactionUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bstc *BillingSubledgerTransactionCreate) OnConflict(opts ...sql.ConflictOption) *BillingSubledgerTransactionUpsertOne {
	bstc.conflict = opts
	return &BillingSubledgerTransactionUpsertOne{
		create: bstc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingSubledgerTransaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bstc *BillingSubledgerTransactionCreate) OnConflictColumns(columns ...string) *BillingSubledgerTransactionUpsertOne {
	bstc.conflict = append(bstc.conflict, sql.ConflictColumns(columns...))
	return &BillingSubledgerTransactionUpsertOne{
		create: bstc,
	}
}

type (
	// BillingSubledgerTransactionUpsertOne is the builder for "upsert"-ing
	//  one BillingSubledgerTransaction node.
	BillingSubledgerTransactionUpsertOne struct {
		create *BillingSubledgerTransactionCreate
	}

	// BillingSubledgerTransactionUpsert is the "OnConflict" setter.
	BillingSubledgerTransactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingSubledgerTransactionUpsert) SetMetadata(v map[string]string) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateMetadata() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingSubledgerTransactionUpsert) ClearMetadata() *BillingSubledgerTransactionUpsert {
	u.SetNull(billingsubledgertransaction.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingSubledgerTransactionUpsert) SetUpdatedAt(v time.Time) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateUpdatedAt() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingSubledgerTransactionUpsert) SetDeletedAt(v time.Time) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateDeletedAt() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingSubledgerTransactionUpsert) ClearDeletedAt() *BillingSubledgerTransactionUpsert {
	u.SetNull(billingsubledgertransaction.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingSubledgerTransactionUpsert) SetName(v string) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateName() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingSubledgerTransactionUpsert) SetDescription(v string) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateDescription() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingSubledgerTransactionUpsert) ClearDescription() *BillingSubledgerTransactionUpsert {
	u.SetNull(billingsubledgertransaction.FieldDescription)
	return u
}

// SetOwnerType sets the "owner_type" field.
func (u *BillingSubledgerTransactionUpsert) SetOwnerType(v string) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldOwnerType, v)
	return u
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateOwnerType() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldOwnerType)
	return u
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *BillingSubledgerTransactionUpsert) ClearOwnerType() *BillingSubledgerTransactionUpsert {
	u.SetNull(billingsubledgertransaction.FieldOwnerType)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *BillingSubledgerTransactionUpsert) SetOwnerID(v string) *BillingSubledgerTransactionUpsert {
	u.Set(billingsubledgertransaction.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsert) UpdateOwnerID() *BillingSubledgerTransactionUpsert {
	u.SetExcluded(billingsubledgertransaction.FieldOwnerID)
	return u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *BillingSubledgerTransactionUpsert) ClearOwnerID() *BillingSubledgerTransactionUpsert {
	u.SetNull(billingsubledgertransaction.FieldOwnerID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingSubledgerTransaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingsubledgertransaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingSubledgerTransactionUpsertOne) UpdateNewValues() *BillingSubledgerTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingsubledgertransaction.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingsubledgertransaction.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingsubledgertransaction.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.SubledgerID(); exists {
			s.SetIgnore(billingsubledgertransaction.FieldSubledgerID)
		}
		if _, exists := u.create.mutation.LedgerID(); exists {
			s.SetIgnore(billingsubledgertransaction.FieldLedgerID)
		}
		if _, exists := u.create.mutation.Amount(); exists {
			s.SetIgnore(billingsubledgertransaction.FieldAmount)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingSubledgerTransaction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingSubledgerTransactionUpsertOne) Ignore() *BillingSubledgerTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingSubledgerTransactionUpsertOne) DoNothing() *BillingSubledgerTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingSubledgerTransactionCreate.OnConflict
// documentation for more info.
func (u *BillingSubledgerTransactionUpsertOne) Update(set func(*BillingSubledgerTransactionUpsert)) *BillingSubledgerTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingSubledgerTransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingSubledgerTransactionUpsertOne) SetMetadata(v map[string]string) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateMetadata() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingSubledgerTransactionUpsertOne) ClearMetadata() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingSubledgerTransactionUpsertOne) SetUpdatedAt(v time.Time) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateUpdatedAt() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingSubledgerTransactionUpsertOne) SetDeletedAt(v time.Time) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateDeletedAt() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingSubledgerTransactionUpsertOne) ClearDeletedAt() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingSubledgerTransactionUpsertOne) SetName(v string) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateName() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingSubledgerTransactionUpsertOne) SetDescription(v string) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateDescription() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingSubledgerTransactionUpsertOne) ClearDescription() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearDescription()
	})
}

// SetOwnerType sets the "owner_type" field.
func (u *BillingSubledgerTransactionUpsertOne) SetOwnerType(v string) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetOwnerType(v)
	})
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateOwnerType() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateOwnerType()
	})
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *BillingSubledgerTransactionUpsertOne) ClearOwnerType() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearOwnerType()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *BillingSubledgerTransactionUpsertOne) SetOwnerID(v string) *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertOne) UpdateOwnerID() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *BillingSubledgerTransactionUpsertOne) ClearOwnerID() *BillingSubledgerTransactionUpsertOne {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearOwnerID()
	})
}

// Exec executes the query.
func (u *BillingSubledgerTransactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingSubledgerTransactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingSubledgerTransactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingSubledgerTransactionUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingSubledgerTransactionUpsertOne.ID is not supported by MySQL driver. Use BillingSubledgerTransactionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingSubledgerTransactionUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingSubledgerTransactionCreateBulk is the builder for creating many BillingSubledgerTransaction entities in bulk.
type BillingSubledgerTransactionCreateBulk struct {
	config
	err      error
	builders []*BillingSubledgerTransactionCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingSubledgerTransaction entities in the database.
func (bstcb *BillingSubledgerTransactionCreateBulk) Save(ctx context.Context) ([]*BillingSubledgerTransaction, error) {
	if bstcb.err != nil {
		return nil, bstcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bstcb.builders))
	nodes := make([]*BillingSubledgerTransaction, len(bstcb.builders))
	mutators := make([]Mutator, len(bstcb.builders))
	for i := range bstcb.builders {
		func(i int, root context.Context) {
			builder := bstcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingSubledgerTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bstcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bstcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bstcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bstcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bstcb *BillingSubledgerTransactionCreateBulk) SaveX(ctx context.Context) []*BillingSubledgerTransaction {
	v, err := bstcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bstcb *BillingSubledgerTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := bstcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bstcb *BillingSubledgerTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := bstcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingSubledgerTransaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingSubledgerTransactionUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bstcb *BillingSubledgerTransactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingSubledgerTransactionUpsertBulk {
	bstcb.conflict = opts
	return &BillingSubledgerTransactionUpsertBulk{
		create: bstcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingSubledgerTransaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bstcb *BillingSubledgerTransactionCreateBulk) OnConflictColumns(columns ...string) *BillingSubledgerTransactionUpsertBulk {
	bstcb.conflict = append(bstcb.conflict, sql.ConflictColumns(columns...))
	return &BillingSubledgerTransactionUpsertBulk{
		create: bstcb,
	}
}

// BillingSubledgerTransactionUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingSubledgerTransaction nodes.
type BillingSubledgerTransactionUpsertBulk struct {
	create *BillingSubledgerTransactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingSubledgerTransaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingsubledgertransaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingSubledgerTransactionUpsertBulk) UpdateNewValues() *BillingSubledgerTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingsubledgertransaction.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingsubledgertransaction.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingsubledgertransaction.FieldCreatedAt)
			}
			if _, exists := b.mutation.SubledgerID(); exists {
				s.SetIgnore(billingsubledgertransaction.FieldSubledgerID)
			}
			if _, exists := b.mutation.LedgerID(); exists {
				s.SetIgnore(billingsubledgertransaction.FieldLedgerID)
			}
			if _, exists := b.mutation.Amount(); exists {
				s.SetIgnore(billingsubledgertransaction.FieldAmount)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingSubledgerTransaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingSubledgerTransactionUpsertBulk) Ignore() *BillingSubledgerTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingSubledgerTransactionUpsertBulk) DoNothing() *BillingSubledgerTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingSubledgerTransactionCreateBulk.OnConflict
// documentation for more info.
func (u *BillingSubledgerTransactionUpsertBulk) Update(set func(*BillingSubledgerTransactionUpsert)) *BillingSubledgerTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingSubledgerTransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetMetadata(v map[string]string) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateMetadata() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingSubledgerTransactionUpsertBulk) ClearMetadata() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetUpdatedAt(v time.Time) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateUpdatedAt() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetDeletedAt(v time.Time) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateDeletedAt() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingSubledgerTransactionUpsertBulk) ClearDeletedAt() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetName(v string) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateName() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetDescription(v string) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateDescription() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingSubledgerTransactionUpsertBulk) ClearDescription() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearDescription()
	})
}

// SetOwnerType sets the "owner_type" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetOwnerType(v string) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetOwnerType(v)
	})
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateOwnerType() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateOwnerType()
	})
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *BillingSubledgerTransactionUpsertBulk) ClearOwnerType() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearOwnerType()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *BillingSubledgerTransactionUpsertBulk) SetOwnerID(v string) *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *BillingSubledgerTransactionUpsertBulk) UpdateOwnerID() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *BillingSubledgerTransactionUpsertBulk) ClearOwnerID() *BillingSubledgerTransactionUpsertBulk {
	return u.Update(func(s *BillingSubledgerTransactionUpsert) {
		s.ClearOwnerID()
	})
}

// Exec executes the query.
func (u *BillingSubledgerTransactionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingSubledgerTransactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingSubledgerTransactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingSubledgerTransactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

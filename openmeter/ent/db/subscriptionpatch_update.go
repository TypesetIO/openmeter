// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatch"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueadditem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueaddphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionpatchvalueextendphase"
)

// SubscriptionPatchUpdate is the builder for updating SubscriptionPatch entities.
type SubscriptionPatchUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionPatchMutation
}

// Where appends a list predicates to the SubscriptionPatchUpdate builder.
func (spu *SubscriptionPatchUpdate) Where(ps ...predicate.SubscriptionPatch) *SubscriptionPatchUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SubscriptionPatchUpdate) SetUpdatedAt(t time.Time) *SubscriptionPatchUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *SubscriptionPatchUpdate) SetDeletedAt(t time.Time) *SubscriptionPatchUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *SubscriptionPatchUpdate) SetNillableDeletedAt(t *time.Time) *SubscriptionPatchUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *SubscriptionPatchUpdate) ClearDeletedAt() *SubscriptionPatchUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetMetadata sets the "metadata" field.
func (spu *SubscriptionPatchUpdate) SetMetadata(m map[string]string) *SubscriptionPatchUpdate {
	spu.mutation.SetMetadata(m)
	return spu
}

// ClearMetadata clears the value of the "metadata" field.
func (spu *SubscriptionPatchUpdate) ClearMetadata() *SubscriptionPatchUpdate {
	spu.mutation.ClearMetadata()
	return spu
}

// SetValueAddItemID sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity by ID.
func (spu *SubscriptionPatchUpdate) SetValueAddItemID(id string) *SubscriptionPatchUpdate {
	spu.mutation.SetValueAddItemID(id)
	return spu
}

// SetNillableValueAddItemID sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity by ID if the given value is not nil.
func (spu *SubscriptionPatchUpdate) SetNillableValueAddItemID(id *string) *SubscriptionPatchUpdate {
	if id != nil {
		spu = spu.SetValueAddItemID(*id)
	}
	return spu
}

// SetValueAddItem sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity.
func (spu *SubscriptionPatchUpdate) SetValueAddItem(s *SubscriptionPatchValueAddItem) *SubscriptionPatchUpdate {
	return spu.SetValueAddItemID(s.ID)
}

// SetValueAddPhaseID sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity by ID.
func (spu *SubscriptionPatchUpdate) SetValueAddPhaseID(id string) *SubscriptionPatchUpdate {
	spu.mutation.SetValueAddPhaseID(id)
	return spu
}

// SetNillableValueAddPhaseID sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity by ID if the given value is not nil.
func (spu *SubscriptionPatchUpdate) SetNillableValueAddPhaseID(id *string) *SubscriptionPatchUpdate {
	if id != nil {
		spu = spu.SetValueAddPhaseID(*id)
	}
	return spu
}

// SetValueAddPhase sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity.
func (spu *SubscriptionPatchUpdate) SetValueAddPhase(s *SubscriptionPatchValueAddPhase) *SubscriptionPatchUpdate {
	return spu.SetValueAddPhaseID(s.ID)
}

// SetValueExtendPhaseID sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity by ID.
func (spu *SubscriptionPatchUpdate) SetValueExtendPhaseID(id string) *SubscriptionPatchUpdate {
	spu.mutation.SetValueExtendPhaseID(id)
	return spu
}

// SetNillableValueExtendPhaseID sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity by ID if the given value is not nil.
func (spu *SubscriptionPatchUpdate) SetNillableValueExtendPhaseID(id *string) *SubscriptionPatchUpdate {
	if id != nil {
		spu = spu.SetValueExtendPhaseID(*id)
	}
	return spu
}

// SetValueExtendPhase sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity.
func (spu *SubscriptionPatchUpdate) SetValueExtendPhase(s *SubscriptionPatchValueExtendPhase) *SubscriptionPatchUpdate {
	return spu.SetValueExtendPhaseID(s.ID)
}

// Mutation returns the SubscriptionPatchMutation object of the builder.
func (spu *SubscriptionPatchUpdate) Mutation() *SubscriptionPatchMutation {
	return spu.mutation
}

// ClearValueAddItem clears the "value_add_item" edge to the SubscriptionPatchValueAddItem entity.
func (spu *SubscriptionPatchUpdate) ClearValueAddItem() *SubscriptionPatchUpdate {
	spu.mutation.ClearValueAddItem()
	return spu
}

// ClearValueAddPhase clears the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity.
func (spu *SubscriptionPatchUpdate) ClearValueAddPhase() *SubscriptionPatchUpdate {
	spu.mutation.ClearValueAddPhase()
	return spu
}

// ClearValueExtendPhase clears the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity.
func (spu *SubscriptionPatchUpdate) ClearValueExtendPhase() *SubscriptionPatchUpdate {
	spu.mutation.ClearValueExtendPhase()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SubscriptionPatchUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SubscriptionPatchUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SubscriptionPatchUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SubscriptionPatchUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SubscriptionPatchUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := subscriptionpatch.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SubscriptionPatchUpdate) check() error {
	if spu.mutation.SubscriptionCleared() && len(spu.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPatch.subscription"`)
	}
	return nil
}

func (spu *SubscriptionPatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpatch.Table, subscriptionpatch.Columns, sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldDeletedAt, field.TypeTime, value)
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionpatch.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionpatch.FieldMetadata, field.TypeJSON, value)
	}
	if spu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionpatch.FieldMetadata, field.TypeJSON)
	}
	if spu.mutation.ValueAddItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddItemTable,
			Columns: []string{subscriptionpatch.ValueAddItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.ValueAddItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddItemTable,
			Columns: []string{subscriptionpatch.ValueAddItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.ValueAddPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddPhaseTable,
			Columns: []string{subscriptionpatch.ValueAddPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.ValueAddPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddPhaseTable,
			Columns: []string{subscriptionpatch.ValueAddPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.ValueExtendPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueExtendPhaseTable,
			Columns: []string{subscriptionpatch.ValueExtendPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueextendphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.ValueExtendPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueExtendPhaseTable,
			Columns: []string{subscriptionpatch.ValueExtendPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueextendphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SubscriptionPatchUpdateOne is the builder for updating a single SubscriptionPatch entity.
type SubscriptionPatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionPatchMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SubscriptionPatchUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionPatchUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *SubscriptionPatchUpdateOne) SetDeletedAt(t time.Time) *SubscriptionPatchUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *SubscriptionPatchUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscriptionPatchUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *SubscriptionPatchUpdateOne) ClearDeletedAt() *SubscriptionPatchUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetMetadata sets the "metadata" field.
func (spuo *SubscriptionPatchUpdateOne) SetMetadata(m map[string]string) *SubscriptionPatchUpdateOne {
	spuo.mutation.SetMetadata(m)
	return spuo
}

// ClearMetadata clears the value of the "metadata" field.
func (spuo *SubscriptionPatchUpdateOne) ClearMetadata() *SubscriptionPatchUpdateOne {
	spuo.mutation.ClearMetadata()
	return spuo
}

// SetValueAddItemID sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity by ID.
func (spuo *SubscriptionPatchUpdateOne) SetValueAddItemID(id string) *SubscriptionPatchUpdateOne {
	spuo.mutation.SetValueAddItemID(id)
	return spuo
}

// SetNillableValueAddItemID sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity by ID if the given value is not nil.
func (spuo *SubscriptionPatchUpdateOne) SetNillableValueAddItemID(id *string) *SubscriptionPatchUpdateOne {
	if id != nil {
		spuo = spuo.SetValueAddItemID(*id)
	}
	return spuo
}

// SetValueAddItem sets the "value_add_item" edge to the SubscriptionPatchValueAddItem entity.
func (spuo *SubscriptionPatchUpdateOne) SetValueAddItem(s *SubscriptionPatchValueAddItem) *SubscriptionPatchUpdateOne {
	return spuo.SetValueAddItemID(s.ID)
}

// SetValueAddPhaseID sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity by ID.
func (spuo *SubscriptionPatchUpdateOne) SetValueAddPhaseID(id string) *SubscriptionPatchUpdateOne {
	spuo.mutation.SetValueAddPhaseID(id)
	return spuo
}

// SetNillableValueAddPhaseID sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity by ID if the given value is not nil.
func (spuo *SubscriptionPatchUpdateOne) SetNillableValueAddPhaseID(id *string) *SubscriptionPatchUpdateOne {
	if id != nil {
		spuo = spuo.SetValueAddPhaseID(*id)
	}
	return spuo
}

// SetValueAddPhase sets the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity.
func (spuo *SubscriptionPatchUpdateOne) SetValueAddPhase(s *SubscriptionPatchValueAddPhase) *SubscriptionPatchUpdateOne {
	return spuo.SetValueAddPhaseID(s.ID)
}

// SetValueExtendPhaseID sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity by ID.
func (spuo *SubscriptionPatchUpdateOne) SetValueExtendPhaseID(id string) *SubscriptionPatchUpdateOne {
	spuo.mutation.SetValueExtendPhaseID(id)
	return spuo
}

// SetNillableValueExtendPhaseID sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity by ID if the given value is not nil.
func (spuo *SubscriptionPatchUpdateOne) SetNillableValueExtendPhaseID(id *string) *SubscriptionPatchUpdateOne {
	if id != nil {
		spuo = spuo.SetValueExtendPhaseID(*id)
	}
	return spuo
}

// SetValueExtendPhase sets the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity.
func (spuo *SubscriptionPatchUpdateOne) SetValueExtendPhase(s *SubscriptionPatchValueExtendPhase) *SubscriptionPatchUpdateOne {
	return spuo.SetValueExtendPhaseID(s.ID)
}

// Mutation returns the SubscriptionPatchMutation object of the builder.
func (spuo *SubscriptionPatchUpdateOne) Mutation() *SubscriptionPatchMutation {
	return spuo.mutation
}

// ClearValueAddItem clears the "value_add_item" edge to the SubscriptionPatchValueAddItem entity.
func (spuo *SubscriptionPatchUpdateOne) ClearValueAddItem() *SubscriptionPatchUpdateOne {
	spuo.mutation.ClearValueAddItem()
	return spuo
}

// ClearValueAddPhase clears the "value_add_phase" edge to the SubscriptionPatchValueAddPhase entity.
func (spuo *SubscriptionPatchUpdateOne) ClearValueAddPhase() *SubscriptionPatchUpdateOne {
	spuo.mutation.ClearValueAddPhase()
	return spuo
}

// ClearValueExtendPhase clears the "value_extend_phase" edge to the SubscriptionPatchValueExtendPhase entity.
func (spuo *SubscriptionPatchUpdateOne) ClearValueExtendPhase() *SubscriptionPatchUpdateOne {
	spuo.mutation.ClearValueExtendPhase()
	return spuo
}

// Where appends a list predicates to the SubscriptionPatchUpdate builder.
func (spuo *SubscriptionPatchUpdateOne) Where(ps ...predicate.SubscriptionPatch) *SubscriptionPatchUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SubscriptionPatchUpdateOne) Select(field string, fields ...string) *SubscriptionPatchUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SubscriptionPatch entity.
func (spuo *SubscriptionPatchUpdateOne) Save(ctx context.Context) (*SubscriptionPatch, error) {
	spuo.defaults()
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SubscriptionPatchUpdateOne) SaveX(ctx context.Context) *SubscriptionPatch {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SubscriptionPatchUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SubscriptionPatchUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SubscriptionPatchUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := subscriptionpatch.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SubscriptionPatchUpdateOne) check() error {
	if spuo.mutation.SubscriptionCleared() && len(spuo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPatch.subscription"`)
	}
	return nil
}

func (spuo *SubscriptionPatchUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionPatch, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpatch.Table, subscriptionpatch.Columns, sqlgraph.NewFieldSpec(subscriptionpatch.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionPatch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionpatch.FieldID)
		for _, f := range fields {
			if !subscriptionpatch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionpatch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionpatch.FieldDeletedAt, field.TypeTime, value)
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionpatch.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionpatch.FieldMetadata, field.TypeJSON, value)
	}
	if spuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionpatch.FieldMetadata, field.TypeJSON)
	}
	if spuo.mutation.ValueAddItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddItemTable,
			Columns: []string{subscriptionpatch.ValueAddItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.ValueAddItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddItemTable,
			Columns: []string{subscriptionpatch.ValueAddItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueadditem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.ValueAddPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddPhaseTable,
			Columns: []string{subscriptionpatch.ValueAddPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.ValueAddPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueAddPhaseTable,
			Columns: []string{subscriptionpatch.ValueAddPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueaddphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.ValueExtendPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueExtendPhaseTable,
			Columns: []string{subscriptionpatch.ValueExtendPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueextendphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.ValueExtendPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscriptionpatch.ValueExtendPhaseTable,
			Columns: []string{subscriptionpatch.ValueExtendPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionpatchvalueextendphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionPatch{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}

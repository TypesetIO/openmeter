// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
)

// BillingCustomerOverride is the model entity for the BillingCustomerOverride schema.
type BillingCustomerOverride struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// BillingProfileID holds the value of the "billing_profile_id" field.
	BillingProfileID string `json:"billing_profile_id,omitempty"`
	// TaxProvider holds the value of the "tax_provider" field.
	TaxProvider *provider.TaxProvider `json:"tax_provider,omitempty"`
	// TaxProviderConfig holds the value of the "tax_provider_config" field.
	TaxProviderConfig *provider.TaxConfiguration `json:"tax_provider_config,omitempty"`
	// InvoicingProvider holds the value of the "invoicing_provider" field.
	InvoicingProvider *provider.InvoicingProvider `json:"invoicing_provider,omitempty"`
	// InvoicingProviderConfig holds the value of the "invoicing_provider_config" field.
	InvoicingProviderConfig *provider.InvoicingConfiguration `json:"invoicing_provider_config,omitempty"`
	// PaymentProvider holds the value of the "payment_provider" field.
	PaymentProvider *provider.PaymentProvider `json:"payment_provider,omitempty"`
	// PaymentProviderConfig holds the value of the "payment_provider_config" field.
	PaymentProviderConfig *provider.PaymentConfiguration `json:"payment_provider_config,omitempty"`
	// WorkflowConfigID holds the value of the "workflow_config_id" field.
	WorkflowConfigID *string `json:"workflow_config_id,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingCustomerOverride) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingcustomeroverride.FieldID, billingcustomeroverride.FieldNamespace, billingcustomeroverride.FieldCustomerID, billingcustomeroverride.FieldBillingProfileID, billingcustomeroverride.FieldTaxProvider, billingcustomeroverride.FieldInvoicingProvider, billingcustomeroverride.FieldPaymentProvider, billingcustomeroverride.FieldWorkflowConfigID:
			values[i] = new(sql.NullString)
		case billingcustomeroverride.FieldCreatedAt, billingcustomeroverride.FieldUpdatedAt, billingcustomeroverride.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case billingcustomeroverride.FieldTaxProviderConfig:
			values[i] = billingcustomeroverride.ValueScanner.TaxProviderConfig.ScanValue()
		case billingcustomeroverride.FieldInvoicingProviderConfig:
			values[i] = billingcustomeroverride.ValueScanner.InvoicingProviderConfig.ScanValue()
		case billingcustomeroverride.FieldPaymentProviderConfig:
			values[i] = billingcustomeroverride.ValueScanner.PaymentProviderConfig.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingCustomerOverride fields.
func (bco *BillingCustomerOverride) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingcustomeroverride.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bco.ID = value.String
			}
		case billingcustomeroverride.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bco.Namespace = value.String
			}
		case billingcustomeroverride.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bco.CreatedAt = value.Time
			}
		case billingcustomeroverride.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bco.UpdatedAt = value.Time
			}
		case billingcustomeroverride.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bco.DeletedAt = new(time.Time)
				*bco.DeletedAt = value.Time
			}
		case billingcustomeroverride.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bco.CustomerID = value.String
			}
		case billingcustomeroverride.FieldBillingProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_profile_id", values[i])
			} else if value.Valid {
				bco.BillingProfileID = value.String
			}
		case billingcustomeroverride.FieldTaxProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_provider", values[i])
			} else if value.Valid {
				bco.TaxProvider = new(provider.TaxProvider)
				*bco.TaxProvider = provider.TaxProvider(value.String)
			}
		case billingcustomeroverride.FieldTaxProviderConfig:
			if value, err := billingcustomeroverride.ValueScanner.TaxProviderConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				bco.TaxProviderConfig = value
			}
		case billingcustomeroverride.FieldInvoicingProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_provider", values[i])
			} else if value.Valid {
				bco.InvoicingProvider = new(provider.InvoicingProvider)
				*bco.InvoicingProvider = provider.InvoicingProvider(value.String)
			}
		case billingcustomeroverride.FieldInvoicingProviderConfig:
			if value, err := billingcustomeroverride.ValueScanner.InvoicingProviderConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				bco.InvoicingProviderConfig = value
			}
		case billingcustomeroverride.FieldPaymentProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_provider", values[i])
			} else if value.Valid {
				bco.PaymentProvider = new(provider.PaymentProvider)
				*bco.PaymentProvider = provider.PaymentProvider(value.String)
			}
		case billingcustomeroverride.FieldPaymentProviderConfig:
			if value, err := billingcustomeroverride.ValueScanner.PaymentProviderConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				bco.PaymentProviderConfig = value
			}
		case billingcustomeroverride.FieldWorkflowConfigID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_config_id", values[i])
			} else if value.Valid {
				bco.WorkflowConfigID = new(string)
				*bco.WorkflowConfigID = value.String
			}
		default:
			bco.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingCustomerOverride.
// This includes values selected through modifiers, order, etc.
func (bco *BillingCustomerOverride) Value(name string) (ent.Value, error) {
	return bco.selectValues.Get(name)
}

// Update returns a builder for updating this BillingCustomerOverride.
// Note that you need to call BillingCustomerOverride.Unwrap() before calling this method if this BillingCustomerOverride
// was returned from a transaction, and the transaction was committed or rolled back.
func (bco *BillingCustomerOverride) Update() *BillingCustomerOverrideUpdateOne {
	return NewBillingCustomerOverrideClient(bco.config).UpdateOne(bco)
}

// Unwrap unwraps the BillingCustomerOverride entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bco *BillingCustomerOverride) Unwrap() *BillingCustomerOverride {
	_tx, ok := bco.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingCustomerOverride is not a transactional entity")
	}
	bco.config.driver = _tx.drv
	return bco
}

// String implements the fmt.Stringer.
func (bco *BillingCustomerOverride) String() string {
	var builder strings.Builder
	builder.WriteString("BillingCustomerOverride(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bco.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bco.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bco.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bco.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bco.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(bco.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("billing_profile_id=")
	builder.WriteString(bco.BillingProfileID)
	builder.WriteString(", ")
	if v := bco.TaxProvider; v != nil {
		builder.WriteString("tax_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bco.TaxProviderConfig; v != nil {
		builder.WriteString("tax_provider_config=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bco.InvoicingProvider; v != nil {
		builder.WriteString("invoicing_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bco.InvoicingProviderConfig; v != nil {
		builder.WriteString("invoicing_provider_config=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bco.PaymentProvider; v != nil {
		builder.WriteString("payment_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bco.PaymentProviderConfig; v != nil {
		builder.WriteString("payment_provider_config=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bco.WorkflowConfigID; v != nil {
		builder.WriteString("workflow_config_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingCustomerOverrides is a parsable slice of BillingCustomerOverride.
type BillingCustomerOverrides []*BillingCustomerOverride

// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionentitlement"
)

// SubscriptionEntitlementUpdate is the builder for updating SubscriptionEntitlement entities.
type SubscriptionEntitlementUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionEntitlementMutation
}

// Where appends a list predicates to the SubscriptionEntitlementUpdate builder.
func (seu *SubscriptionEntitlementUpdate) Where(ps ...predicate.SubscriptionEntitlement) *SubscriptionEntitlementUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SubscriptionEntitlementUpdate) SetUpdatedAt(t time.Time) *SubscriptionEntitlementUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetDeletedAt sets the "deleted_at" field.
func (seu *SubscriptionEntitlementUpdate) SetDeletedAt(t time.Time) *SubscriptionEntitlementUpdate {
	seu.mutation.SetDeletedAt(t)
	return seu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (seu *SubscriptionEntitlementUpdate) SetNillableDeletedAt(t *time.Time) *SubscriptionEntitlementUpdate {
	if t != nil {
		seu.SetDeletedAt(*t)
	}
	return seu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (seu *SubscriptionEntitlementUpdate) ClearDeletedAt() *SubscriptionEntitlementUpdate {
	seu.mutation.ClearDeletedAt()
	return seu
}

// Mutation returns the SubscriptionEntitlementMutation object of the builder.
func (seu *SubscriptionEntitlementUpdate) Mutation() *SubscriptionEntitlementMutation {
	return seu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SubscriptionEntitlementUpdate) Save(ctx context.Context) (int, error) {
	seu.defaults()
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SubscriptionEntitlementUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SubscriptionEntitlementUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SubscriptionEntitlementUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SubscriptionEntitlementUpdate) defaults() {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		v := subscriptionentitlement.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SubscriptionEntitlementUpdate) check() error {
	if seu.mutation.SubscriptionCleared() && len(seu.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionEntitlement.subscription"`)
	}
	if seu.mutation.EntitlementCleared() && len(seu.mutation.EntitlementIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionEntitlement.entitlement"`)
	}
	return nil
}

func (seu *SubscriptionEntitlementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionentitlement.Table, subscriptionentitlement.Columns, sqlgraph.NewFieldSpec(subscriptionentitlement.FieldID, field.TypeString))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldDeletedAt, field.TypeTime, value)
	}
	if seu.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionentitlement.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionentitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SubscriptionEntitlementUpdateOne is the builder for updating a single SubscriptionEntitlement entity.
type SubscriptionEntitlementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionEntitlementMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SubscriptionEntitlementUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionEntitlementUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetDeletedAt sets the "deleted_at" field.
func (seuo *SubscriptionEntitlementUpdateOne) SetDeletedAt(t time.Time) *SubscriptionEntitlementUpdateOne {
	seuo.mutation.SetDeletedAt(t)
	return seuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (seuo *SubscriptionEntitlementUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscriptionEntitlementUpdateOne {
	if t != nil {
		seuo.SetDeletedAt(*t)
	}
	return seuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (seuo *SubscriptionEntitlementUpdateOne) ClearDeletedAt() *SubscriptionEntitlementUpdateOne {
	seuo.mutation.ClearDeletedAt()
	return seuo
}

// Mutation returns the SubscriptionEntitlementMutation object of the builder.
func (seuo *SubscriptionEntitlementUpdateOne) Mutation() *SubscriptionEntitlementMutation {
	return seuo.mutation
}

// Where appends a list predicates to the SubscriptionEntitlementUpdate builder.
func (seuo *SubscriptionEntitlementUpdateOne) Where(ps ...predicate.SubscriptionEntitlement) *SubscriptionEntitlementUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SubscriptionEntitlementUpdateOne) Select(field string, fields ...string) *SubscriptionEntitlementUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SubscriptionEntitlement entity.
func (seuo *SubscriptionEntitlementUpdateOne) Save(ctx context.Context) (*SubscriptionEntitlement, error) {
	seuo.defaults()
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SubscriptionEntitlementUpdateOne) SaveX(ctx context.Context) *SubscriptionEntitlement {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SubscriptionEntitlementUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SubscriptionEntitlementUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SubscriptionEntitlementUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		v := subscriptionentitlement.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SubscriptionEntitlementUpdateOne) check() error {
	if seuo.mutation.SubscriptionCleared() && len(seuo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionEntitlement.subscription"`)
	}
	if seuo.mutation.EntitlementCleared() && len(seuo.mutation.EntitlementIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionEntitlement.entitlement"`)
	}
	return nil
}

func (seuo *SubscriptionEntitlementUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionEntitlement, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionentitlement.Table, subscriptionentitlement.Columns, sqlgraph.NewFieldSpec(subscriptionentitlement.FieldID, field.TypeString))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionEntitlement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionentitlement.FieldID)
		for _, f := range fields {
			if !subscriptionentitlement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionentitlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionentitlement.FieldDeletedAt, field.TypeTime, value)
	}
	if seuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionentitlement.FieldDeletedAt, field.TypeTime)
	}
	_node = &SubscriptionEntitlement{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionentitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}

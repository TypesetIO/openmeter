// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/integrationstripecustomer"
)

// IntegrationStripeCustomer is the model entity for the IntegrationStripeCustomer schema.
type IntegrationStripeCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// StripeCustomerID holds the value of the "stripe_customer_id" field.
	StripeCustomerID *string `json:"stripe_customer_id,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IntegrationStripeCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case integrationstripecustomer.FieldID:
			values[i] = new(sql.NullInt64)
		case integrationstripecustomer.FieldNamespace, integrationstripecustomer.FieldAppID, integrationstripecustomer.FieldCustomerID, integrationstripecustomer.FieldStripeCustomerID:
			values[i] = new(sql.NullString)
		case integrationstripecustomer.FieldCreatedAt, integrationstripecustomer.FieldUpdatedAt, integrationstripecustomer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IntegrationStripeCustomer fields.
func (isc *IntegrationStripeCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case integrationstripecustomer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			isc.ID = int(value.Int64)
		case integrationstripecustomer.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				isc.Namespace = value.String
			}
		case integrationstripecustomer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				isc.CreatedAt = value.Time
			}
		case integrationstripecustomer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				isc.UpdatedAt = value.Time
			}
		case integrationstripecustomer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				isc.DeletedAt = new(time.Time)
				*isc.DeletedAt = value.Time
			}
		case integrationstripecustomer.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				isc.AppID = value.String
			}
		case integrationstripecustomer.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				isc.CustomerID = value.String
			}
		case integrationstripecustomer.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				isc.StripeCustomerID = new(string)
				*isc.StripeCustomerID = value.String
			}
		default:
			isc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IntegrationStripeCustomer.
// This includes values selected through modifiers, order, etc.
func (isc *IntegrationStripeCustomer) Value(name string) (ent.Value, error) {
	return isc.selectValues.Get(name)
}

// Update returns a builder for updating this IntegrationStripeCustomer.
// Note that you need to call IntegrationStripeCustomer.Unwrap() before calling this method if this IntegrationStripeCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (isc *IntegrationStripeCustomer) Update() *IntegrationStripeCustomerUpdateOne {
	return NewIntegrationStripeCustomerClient(isc.config).UpdateOne(isc)
}

// Unwrap unwraps the IntegrationStripeCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (isc *IntegrationStripeCustomer) Unwrap() *IntegrationStripeCustomer {
	_tx, ok := isc.config.driver.(*txDriver)
	if !ok {
		panic("db: IntegrationStripeCustomer is not a transactional entity")
	}
	isc.config.driver = _tx.drv
	return isc
}

// String implements the fmt.Stringer.
func (isc *IntegrationStripeCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("IntegrationStripeCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", isc.ID))
	builder.WriteString("namespace=")
	builder.WriteString(isc.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(isc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(isc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := isc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(isc.AppID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(isc.CustomerID)
	builder.WriteString(", ")
	if v := isc.StripeCustomerID; v != nil {
		builder.WriteString("stripe_customer_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// IntegrationStripeCustomers is a parsable slice of IntegrationStripeCustomer.
type IntegrationStripeCustomers []*IntegrationStripeCustomer

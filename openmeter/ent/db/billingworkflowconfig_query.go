// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingWorkflowConfigQuery is the builder for querying BillingWorkflowConfig entities.
type BillingWorkflowConfigQuery struct {
	config
	ctx                 *QueryContext
	order               []billingworkflowconfig.OrderOption
	inters              []Interceptor
	predicates          []predicate.BillingWorkflowConfig
	withBillingInvoices *BillingInvoiceQuery
	withBillingProfile  *BillingProfileQuery
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillingWorkflowConfigQuery builder.
func (bwcq *BillingWorkflowConfigQuery) Where(ps ...predicate.BillingWorkflowConfig) *BillingWorkflowConfigQuery {
	bwcq.predicates = append(bwcq.predicates, ps...)
	return bwcq
}

// Limit the number of records to be returned by this query.
func (bwcq *BillingWorkflowConfigQuery) Limit(limit int) *BillingWorkflowConfigQuery {
	bwcq.ctx.Limit = &limit
	return bwcq
}

// Offset to start from.
func (bwcq *BillingWorkflowConfigQuery) Offset(offset int) *BillingWorkflowConfigQuery {
	bwcq.ctx.Offset = &offset
	return bwcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bwcq *BillingWorkflowConfigQuery) Unique(unique bool) *BillingWorkflowConfigQuery {
	bwcq.ctx.Unique = &unique
	return bwcq
}

// Order specifies how the records should be ordered.
func (bwcq *BillingWorkflowConfigQuery) Order(o ...billingworkflowconfig.OrderOption) *BillingWorkflowConfigQuery {
	bwcq.order = append(bwcq.order, o...)
	return bwcq
}

// QueryBillingInvoices chains the current query on the "billing_invoices" edge.
func (bwcq *BillingWorkflowConfigQuery) QueryBillingInvoices() *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: bwcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bwcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bwcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingworkflowconfig.Table, billingworkflowconfig.FieldID, selector),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, billingworkflowconfig.BillingInvoicesTable, billingworkflowconfig.BillingInvoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bwcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingProfile chains the current query on the "billing_profile" edge.
func (bwcq *BillingWorkflowConfigQuery) QueryBillingProfile() *BillingProfileQuery {
	query := (&BillingProfileClient{config: bwcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bwcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bwcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingworkflowconfig.Table, billingworkflowconfig.FieldID, selector),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, billingworkflowconfig.BillingProfileTable, billingworkflowconfig.BillingProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(bwcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BillingWorkflowConfig entity from the query.
// Returns a *NotFoundError when no BillingWorkflowConfig was found.
func (bwcq *BillingWorkflowConfigQuery) First(ctx context.Context) (*BillingWorkflowConfig, error) {
	nodes, err := bwcq.Limit(1).All(setContextOp(ctx, bwcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billingworkflowconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) FirstX(ctx context.Context) *BillingWorkflowConfig {
	node, err := bwcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillingWorkflowConfig ID from the query.
// Returns a *NotFoundError when no BillingWorkflowConfig ID was found.
func (bwcq *BillingWorkflowConfigQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bwcq.Limit(1).IDs(setContextOp(ctx, bwcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billingworkflowconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) FirstIDX(ctx context.Context) string {
	id, err := bwcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillingWorkflowConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillingWorkflowConfig entity is found.
// Returns a *NotFoundError when no BillingWorkflowConfig entities are found.
func (bwcq *BillingWorkflowConfigQuery) Only(ctx context.Context) (*BillingWorkflowConfig, error) {
	nodes, err := bwcq.Limit(2).All(setContextOp(ctx, bwcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billingworkflowconfig.Label}
	default:
		return nil, &NotSingularError{billingworkflowconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) OnlyX(ctx context.Context) *BillingWorkflowConfig {
	node, err := bwcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillingWorkflowConfig ID in the query.
// Returns a *NotSingularError when more than one BillingWorkflowConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (bwcq *BillingWorkflowConfigQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bwcq.Limit(2).IDs(setContextOp(ctx, bwcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billingworkflowconfig.Label}
	default:
		err = &NotSingularError{billingworkflowconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) OnlyIDX(ctx context.Context) string {
	id, err := bwcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillingWorkflowConfigs.
func (bwcq *BillingWorkflowConfigQuery) All(ctx context.Context) ([]*BillingWorkflowConfig, error) {
	ctx = setContextOp(ctx, bwcq.ctx, ent.OpQueryAll)
	if err := bwcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillingWorkflowConfig, *BillingWorkflowConfigQuery]()
	return withInterceptors[[]*BillingWorkflowConfig](ctx, bwcq, qr, bwcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) AllX(ctx context.Context) []*BillingWorkflowConfig {
	nodes, err := bwcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillingWorkflowConfig IDs.
func (bwcq *BillingWorkflowConfigQuery) IDs(ctx context.Context) (ids []string, err error) {
	if bwcq.ctx.Unique == nil && bwcq.path != nil {
		bwcq.Unique(true)
	}
	ctx = setContextOp(ctx, bwcq.ctx, ent.OpQueryIDs)
	if err = bwcq.Select(billingworkflowconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) IDsX(ctx context.Context) []string {
	ids, err := bwcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bwcq *BillingWorkflowConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bwcq.ctx, ent.OpQueryCount)
	if err := bwcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bwcq, querierCount[*BillingWorkflowConfigQuery](), bwcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) CountX(ctx context.Context) int {
	count, err := bwcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bwcq *BillingWorkflowConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bwcq.ctx, ent.OpQueryExist)
	switch _, err := bwcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bwcq *BillingWorkflowConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := bwcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillingWorkflowConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bwcq *BillingWorkflowConfigQuery) Clone() *BillingWorkflowConfigQuery {
	if bwcq == nil {
		return nil
	}
	return &BillingWorkflowConfigQuery{
		config:              bwcq.config,
		ctx:                 bwcq.ctx.Clone(),
		order:               append([]billingworkflowconfig.OrderOption{}, bwcq.order...),
		inters:              append([]Interceptor{}, bwcq.inters...),
		predicates:          append([]predicate.BillingWorkflowConfig{}, bwcq.predicates...),
		withBillingInvoices: bwcq.withBillingInvoices.Clone(),
		withBillingProfile:  bwcq.withBillingProfile.Clone(),
		// clone intermediate query.
		sql:  bwcq.sql.Clone(),
		path: bwcq.path,
	}
}

// WithBillingInvoices tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoices" edge. The optional arguments are used to configure the query builder of the edge.
func (bwcq *BillingWorkflowConfigQuery) WithBillingInvoices(opts ...func(*BillingInvoiceQuery)) *BillingWorkflowConfigQuery {
	query := (&BillingInvoiceClient{config: bwcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bwcq.withBillingInvoices = query
	return bwcq
}

// WithBillingProfile tells the query-builder to eager-load the nodes that are connected to
// the "billing_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (bwcq *BillingWorkflowConfigQuery) WithBillingProfile(opts ...func(*BillingProfileQuery)) *BillingWorkflowConfigQuery {
	query := (&BillingProfileClient{config: bwcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bwcq.withBillingProfile = query
	return bwcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillingWorkflowConfig.Query().
//		GroupBy(billingworkflowconfig.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (bwcq *BillingWorkflowConfigQuery) GroupBy(field string, fields ...string) *BillingWorkflowConfigGroupBy {
	bwcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillingWorkflowConfigGroupBy{build: bwcq}
	grbuild.flds = &bwcq.ctx.Fields
	grbuild.label = billingworkflowconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.BillingWorkflowConfig.Query().
//		Select(billingworkflowconfig.FieldNamespace).
//		Scan(ctx, &v)
func (bwcq *BillingWorkflowConfigQuery) Select(fields ...string) *BillingWorkflowConfigSelect {
	bwcq.ctx.Fields = append(bwcq.ctx.Fields, fields...)
	sbuild := &BillingWorkflowConfigSelect{BillingWorkflowConfigQuery: bwcq}
	sbuild.label = billingworkflowconfig.Label
	sbuild.flds, sbuild.scan = &bwcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillingWorkflowConfigSelect configured with the given aggregations.
func (bwcq *BillingWorkflowConfigQuery) Aggregate(fns ...AggregateFunc) *BillingWorkflowConfigSelect {
	return bwcq.Select().Aggregate(fns...)
}

func (bwcq *BillingWorkflowConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bwcq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bwcq); err != nil {
				return err
			}
		}
	}
	for _, f := range bwcq.ctx.Fields {
		if !billingworkflowconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if bwcq.path != nil {
		prev, err := bwcq.path(ctx)
		if err != nil {
			return err
		}
		bwcq.sql = prev
	}
	return nil
}

func (bwcq *BillingWorkflowConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BillingWorkflowConfig, error) {
	var (
		nodes       = []*BillingWorkflowConfig{}
		_spec       = bwcq.querySpec()
		loadedTypes = [2]bool{
			bwcq.withBillingInvoices != nil,
			bwcq.withBillingProfile != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BillingWorkflowConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BillingWorkflowConfig{config: bwcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bwcq.modifiers) > 0 {
		_spec.Modifiers = bwcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bwcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bwcq.withBillingInvoices; query != nil {
		if err := bwcq.loadBillingInvoices(ctx, query, nodes, nil,
			func(n *BillingWorkflowConfig, e *BillingInvoice) { n.Edges.BillingInvoices = e }); err != nil {
			return nil, err
		}
	}
	if query := bwcq.withBillingProfile; query != nil {
		if err := bwcq.loadBillingProfile(ctx, query, nodes, nil,
			func(n *BillingWorkflowConfig, e *BillingProfile) { n.Edges.BillingProfile = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bwcq *BillingWorkflowConfigQuery) loadBillingInvoices(ctx context.Context, query *BillingInvoiceQuery, nodes []*BillingWorkflowConfig, init func(*BillingWorkflowConfig), assign func(*BillingWorkflowConfig, *BillingInvoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*BillingWorkflowConfig)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billinginvoice.FieldWorkflowConfigID)
	}
	query.Where(predicate.BillingInvoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(billingworkflowconfig.BillingInvoicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WorkflowConfigID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_config_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bwcq *BillingWorkflowConfigQuery) loadBillingProfile(ctx context.Context, query *BillingProfileQuery, nodes []*BillingWorkflowConfig, init func(*BillingWorkflowConfig), assign func(*BillingWorkflowConfig, *BillingProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*BillingWorkflowConfig)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingprofile.FieldWorkflowConfigID)
	}
	query.Where(predicate.BillingProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(billingworkflowconfig.BillingProfileColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WorkflowConfigID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_config_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bwcq *BillingWorkflowConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bwcq.querySpec()
	if len(bwcq.modifiers) > 0 {
		_spec.Modifiers = bwcq.modifiers
	}
	_spec.Node.Columns = bwcq.ctx.Fields
	if len(bwcq.ctx.Fields) > 0 {
		_spec.Unique = bwcq.ctx.Unique != nil && *bwcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bwcq.driver, _spec)
}

func (bwcq *BillingWorkflowConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(billingworkflowconfig.Table, billingworkflowconfig.Columns, sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString))
	_spec.From = bwcq.sql
	if unique := bwcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bwcq.path != nil {
		_spec.Unique = true
	}
	if fields := bwcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingworkflowconfig.FieldID)
		for i := range fields {
			if fields[i] != billingworkflowconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bwcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bwcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bwcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bwcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bwcq *BillingWorkflowConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bwcq.driver.Dialect())
	t1 := builder.Table(billingworkflowconfig.Table)
	columns := bwcq.ctx.Fields
	if len(columns) == 0 {
		columns = billingworkflowconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bwcq.sql != nil {
		selector = bwcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bwcq.ctx.Unique != nil && *bwcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bwcq.modifiers {
		m(selector)
	}
	for _, p := range bwcq.predicates {
		p(selector)
	}
	for _, p := range bwcq.order {
		p(selector)
	}
	if offset := bwcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bwcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (bwcq *BillingWorkflowConfigQuery) ForUpdate(opts ...sql.LockOption) *BillingWorkflowConfigQuery {
	if bwcq.driver.Dialect() == dialect.Postgres {
		bwcq.Unique(false)
	}
	bwcq.modifiers = append(bwcq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return bwcq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (bwcq *BillingWorkflowConfigQuery) ForShare(opts ...sql.LockOption) *BillingWorkflowConfigQuery {
	if bwcq.driver.Dialect() == dialect.Postgres {
		bwcq.Unique(false)
	}
	bwcq.modifiers = append(bwcq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return bwcq
}

// BillingWorkflowConfigGroupBy is the group-by builder for BillingWorkflowConfig entities.
type BillingWorkflowConfigGroupBy struct {
	selector
	build *BillingWorkflowConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bwcgb *BillingWorkflowConfigGroupBy) Aggregate(fns ...AggregateFunc) *BillingWorkflowConfigGroupBy {
	bwcgb.fns = append(bwcgb.fns, fns...)
	return bwcgb
}

// Scan applies the selector query and scans the result into the given value.
func (bwcgb *BillingWorkflowConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bwcgb.build.ctx, ent.OpQueryGroupBy)
	if err := bwcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingWorkflowConfigQuery, *BillingWorkflowConfigGroupBy](ctx, bwcgb.build, bwcgb, bwcgb.build.inters, v)
}

func (bwcgb *BillingWorkflowConfigGroupBy) sqlScan(ctx context.Context, root *BillingWorkflowConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bwcgb.fns))
	for _, fn := range bwcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bwcgb.flds)+len(bwcgb.fns))
		for _, f := range *bwcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bwcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bwcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillingWorkflowConfigSelect is the builder for selecting fields of BillingWorkflowConfig entities.
type BillingWorkflowConfigSelect struct {
	*BillingWorkflowConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bwcs *BillingWorkflowConfigSelect) Aggregate(fns ...AggregateFunc) *BillingWorkflowConfigSelect {
	bwcs.fns = append(bwcs.fns, fns...)
	return bwcs
}

// Scan applies the selector query and scans the result into the given value.
func (bwcs *BillingWorkflowConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bwcs.ctx, ent.OpQuerySelect)
	if err := bwcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingWorkflowConfigQuery, *BillingWorkflowConfigSelect](ctx, bwcs.BillingWorkflowConfigQuery, bwcs, bwcs.inters, v)
}

func (bwcs *BillingWorkflowConfigSelect) sqlScan(ctx context.Context, root *BillingWorkflowConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bwcs.fns))
	for _, fn := range bwcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bwcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bwcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/ratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// RateCardCreate is the builder for creating a RateCard entity.
type RateCardCreate struct {
	config
	mutation *RateCardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (rcc *RateCardCreate) SetNamespace(s string) *RateCardCreate {
	rcc.mutation.SetNamespace(s)
	return rcc
}

// SetMetadata sets the "metadata" field.
func (rcc *RateCardCreate) SetMetadata(m map[string]string) *RateCardCreate {
	rcc.mutation.SetMetadata(m)
	return rcc
}

// SetCreatedAt sets the "created_at" field.
func (rcc *RateCardCreate) SetCreatedAt(t time.Time) *RateCardCreate {
	rcc.mutation.SetCreatedAt(t)
	return rcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableCreatedAt(t *time.Time) *RateCardCreate {
	if t != nil {
		rcc.SetCreatedAt(*t)
	}
	return rcc
}

// SetUpdatedAt sets the "updated_at" field.
func (rcc *RateCardCreate) SetUpdatedAt(t time.Time) *RateCardCreate {
	rcc.mutation.SetUpdatedAt(t)
	return rcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableUpdatedAt(t *time.Time) *RateCardCreate {
	if t != nil {
		rcc.SetUpdatedAt(*t)
	}
	return rcc
}

// SetDeletedAt sets the "deleted_at" field.
func (rcc *RateCardCreate) SetDeletedAt(t time.Time) *RateCardCreate {
	rcc.mutation.SetDeletedAt(t)
	return rcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableDeletedAt(t *time.Time) *RateCardCreate {
	if t != nil {
		rcc.SetDeletedAt(*t)
	}
	return rcc
}

// SetName sets the "name" field.
func (rcc *RateCardCreate) SetName(s string) *RateCardCreate {
	rcc.mutation.SetName(s)
	return rcc
}

// SetDescription sets the "description" field.
func (rcc *RateCardCreate) SetDescription(s string) *RateCardCreate {
	rcc.mutation.SetDescription(s)
	return rcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableDescription(s *string) *RateCardCreate {
	if s != nil {
		rcc.SetDescription(*s)
	}
	return rcc
}

// SetKey sets the "key" field.
func (rcc *RateCardCreate) SetKey(s string) *RateCardCreate {
	rcc.mutation.SetKey(s)
	return rcc
}

// SetEntitlementTemplateEntitlementType sets the "entitlement_template_entitlement_type" field.
func (rcc *RateCardCreate) SetEntitlementTemplateEntitlementType(rtet ratecard.EntitlementTemplateEntitlementType) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateEntitlementType(rtet)
	return rcc
}

// SetEntitlementTemplateMetadata sets the "entitlement_template_metadata" field.
func (rcc *RateCardCreate) SetEntitlementTemplateMetadata(m map[string]string) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateMetadata(m)
	return rcc
}

// SetEntitlementTemplateIsSoftLimit sets the "entitlement_template_is_soft_limit" field.
func (rcc *RateCardCreate) SetEntitlementTemplateIsSoftLimit(b bool) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateIsSoftLimit(b)
	return rcc
}

// SetNillableEntitlementTemplateIsSoftLimit sets the "entitlement_template_is_soft_limit" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableEntitlementTemplateIsSoftLimit(b *bool) *RateCardCreate {
	if b != nil {
		rcc.SetEntitlementTemplateIsSoftLimit(*b)
	}
	return rcc
}

// SetEntitlementTemplateIssueAfterReset sets the "entitlement_template_issue_after_reset" field.
func (rcc *RateCardCreate) SetEntitlementTemplateIssueAfterReset(f float64) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateIssueAfterReset(f)
	return rcc
}

// SetNillableEntitlementTemplateIssueAfterReset sets the "entitlement_template_issue_after_reset" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableEntitlementTemplateIssueAfterReset(f *float64) *RateCardCreate {
	if f != nil {
		rcc.SetEntitlementTemplateIssueAfterReset(*f)
	}
	return rcc
}

// SetEntitlementTemplateIssueAfterResetPriority sets the "entitlement_template_issue_after_reset_priority" field.
func (rcc *RateCardCreate) SetEntitlementTemplateIssueAfterResetPriority(u uint8) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateIssueAfterResetPriority(u)
	return rcc
}

// SetNillableEntitlementTemplateIssueAfterResetPriority sets the "entitlement_template_issue_after_reset_priority" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableEntitlementTemplateIssueAfterResetPriority(u *uint8) *RateCardCreate {
	if u != nil {
		rcc.SetEntitlementTemplateIssueAfterResetPriority(*u)
	}
	return rcc
}

// SetEntitlementTemplatePreserveOverageAtReset sets the "entitlement_template_preserve_overage_at_reset" field.
func (rcc *RateCardCreate) SetEntitlementTemplatePreserveOverageAtReset(b bool) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplatePreserveOverageAtReset(b)
	return rcc
}

// SetNillableEntitlementTemplatePreserveOverageAtReset sets the "entitlement_template_preserve_overage_at_reset" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableEntitlementTemplatePreserveOverageAtReset(b *bool) *RateCardCreate {
	if b != nil {
		rcc.SetEntitlementTemplatePreserveOverageAtReset(*b)
	}
	return rcc
}

// SetEntitlementTemplateConfig sets the "entitlement_template_config" field.
func (rcc *RateCardCreate) SetEntitlementTemplateConfig(u []uint8) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateConfig(u)
	return rcc
}

// SetEntitlementTemplateUsagePeriod sets the "entitlement_template_usage_period" field.
func (rcc *RateCardCreate) SetEntitlementTemplateUsagePeriod(s string) *RateCardCreate {
	rcc.mutation.SetEntitlementTemplateUsagePeriod(s)
	return rcc
}

// SetNillableEntitlementTemplateUsagePeriod sets the "entitlement_template_usage_period" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableEntitlementTemplateUsagePeriod(s *string) *RateCardCreate {
	if s != nil {
		rcc.SetEntitlementTemplateUsagePeriod(*s)
	}
	return rcc
}

// SetType sets the "type" field.
func (rcc *RateCardCreate) SetType(pct productcatalog.RateCardType) *RateCardCreate {
	rcc.mutation.SetType(pct)
	return rcc
}

// SetFeatureKey sets the "feature_key" field.
func (rcc *RateCardCreate) SetFeatureKey(s string) *RateCardCreate {
	rcc.mutation.SetFeatureKey(s)
	return rcc
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableFeatureKey(s *string) *RateCardCreate {
	if s != nil {
		rcc.SetFeatureKey(*s)
	}
	return rcc
}

// SetFeatureID sets the "feature_id" field.
func (rcc *RateCardCreate) SetFeatureID(s string) *RateCardCreate {
	rcc.mutation.SetFeatureID(s)
	return rcc
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableFeatureID(s *string) *RateCardCreate {
	if s != nil {
		rcc.SetFeatureID(*s)
	}
	return rcc
}

// SetTaxConfig sets the "tax_config" field.
func (rcc *RateCardCreate) SetTaxConfig(pc *productcatalog.TaxConfig) *RateCardCreate {
	rcc.mutation.SetTaxConfig(pc)
	return rcc
}

// SetBillingCadence sets the "billing_cadence" field.
func (rcc *RateCardCreate) SetBillingCadence(i isodate.String) *RateCardCreate {
	rcc.mutation.SetBillingCadence(i)
	return rcc
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableBillingCadence(i *isodate.String) *RateCardCreate {
	if i != nil {
		rcc.SetBillingCadence(*i)
	}
	return rcc
}

// SetPrice sets the "price" field.
func (rcc *RateCardCreate) SetPrice(pr *productcatalog.Price) *RateCardCreate {
	rcc.mutation.SetPrice(pr)
	return rcc
}

// SetDiscounts sets the "discounts" field.
func (rcc *RateCardCreate) SetDiscounts(pr *productcatalog.Discounts) *RateCardCreate {
	rcc.mutation.SetDiscounts(pr)
	return rcc
}

// SetID sets the "id" field.
func (rcc *RateCardCreate) SetID(s string) *RateCardCreate {
	rcc.mutation.SetID(s)
	return rcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcc *RateCardCreate) SetNillableID(s *string) *RateCardCreate {
	if s != nil {
		rcc.SetID(*s)
	}
	return rcc
}

// SetAddonRatecardID sets the "addon_ratecard" edge to the AddonRateCard entity by ID.
func (rcc *RateCardCreate) SetAddonRatecardID(id string) *RateCardCreate {
	rcc.mutation.SetAddonRatecardID(id)
	return rcc
}

// SetNillableAddonRatecardID sets the "addon_ratecard" edge to the AddonRateCard entity by ID if the given value is not nil.
func (rcc *RateCardCreate) SetNillableAddonRatecardID(id *string) *RateCardCreate {
	if id != nil {
		rcc = rcc.SetAddonRatecardID(*id)
	}
	return rcc
}

// SetAddonRatecard sets the "addon_ratecard" edge to the AddonRateCard entity.
func (rcc *RateCardCreate) SetAddonRatecard(a *AddonRateCard) *RateCardCreate {
	return rcc.SetAddonRatecardID(a.ID)
}

// SetPlanRatecardID sets the "plan_ratecard" edge to the PlanRateCard entity by ID.
func (rcc *RateCardCreate) SetPlanRatecardID(id string) *RateCardCreate {
	rcc.mutation.SetPlanRatecardID(id)
	return rcc
}

// SetNillablePlanRatecardID sets the "plan_ratecard" edge to the PlanRateCard entity by ID if the given value is not nil.
func (rcc *RateCardCreate) SetNillablePlanRatecardID(id *string) *RateCardCreate {
	if id != nil {
		rcc = rcc.SetPlanRatecardID(*id)
	}
	return rcc
}

// SetPlanRatecard sets the "plan_ratecard" edge to the PlanRateCard entity.
func (rcc *RateCardCreate) SetPlanRatecard(p *PlanRateCard) *RateCardCreate {
	return rcc.SetPlanRatecardID(p.ID)
}

// SetSubscriptionItemID sets the "subscription_item" edge to the SubscriptionItem entity by ID.
func (rcc *RateCardCreate) SetSubscriptionItemID(id string) *RateCardCreate {
	rcc.mutation.SetSubscriptionItemID(id)
	return rcc
}

// SetNillableSubscriptionItemID sets the "subscription_item" edge to the SubscriptionItem entity by ID if the given value is not nil.
func (rcc *RateCardCreate) SetNillableSubscriptionItemID(id *string) *RateCardCreate {
	if id != nil {
		rcc = rcc.SetSubscriptionItemID(*id)
	}
	return rcc
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (rcc *RateCardCreate) SetSubscriptionItem(s *SubscriptionItem) *RateCardCreate {
	return rcc.SetSubscriptionItemID(s.ID)
}

// SetFeature sets the "feature" edge to the Feature entity.
func (rcc *RateCardCreate) SetFeature(f *Feature) *RateCardCreate {
	return rcc.SetFeatureID(f.ID)
}

// Mutation returns the RateCardMutation object of the builder.
func (rcc *RateCardCreate) Mutation() *RateCardMutation {
	return rcc.mutation
}

// Save creates the RateCard in the database.
func (rcc *RateCardCreate) Save(ctx context.Context) (*RateCard, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RateCardCreate) SaveX(ctx context.Context) *RateCard {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RateCardCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RateCardCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RateCardCreate) defaults() {
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		v := ratecard.DefaultCreatedAt()
		rcc.mutation.SetCreatedAt(v)
	}
	if _, ok := rcc.mutation.UpdatedAt(); !ok {
		v := ratecard.DefaultUpdatedAt()
		rcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rcc.mutation.ID(); !ok {
		v := ratecard.DefaultID()
		rcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RateCardCreate) check() error {
	if _, ok := rcc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "RateCard.namespace"`)}
	}
	if v, ok := rcc.mutation.Namespace(); ok {
		if err := ratecard.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "RateCard.namespace": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "RateCard.created_at"`)}
	}
	if _, ok := rcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "RateCard.updated_at"`)}
	}
	if _, ok := rcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "RateCard.name"`)}
	}
	if _, ok := rcc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "RateCard.key"`)}
	}
	if v, ok := rcc.mutation.Key(); ok {
		if err := ratecard.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "RateCard.key": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.EntitlementTemplateEntitlementType(); !ok {
		return &ValidationError{Name: "entitlement_template_entitlement_type", err: errors.New(`db: missing required field "RateCard.entitlement_template_entitlement_type"`)}
	}
	if v, ok := rcc.mutation.EntitlementTemplateEntitlementType(); ok {
		if err := ratecard.EntitlementTemplateEntitlementTypeValidator(v); err != nil {
			return &ValidationError{Name: "entitlement_template_entitlement_type", err: fmt.Errorf(`db: validator failed for field "RateCard.entitlement_template_entitlement_type": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "RateCard.type"`)}
	}
	if v, ok := rcc.mutation.GetType(); ok {
		if err := ratecard.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "RateCard.type": %w`, err)}
		}
	}
	if v, ok := rcc.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "RateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := rcc.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "RateCard.price": %w`, err)}
		}
	}
	if v, ok := rcc.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "RateCard.discounts": %w`, err)}
		}
	}
	return nil
}

func (rcc *RateCardCreate) sqlSave(ctx context.Context) (*RateCard, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := rcc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RateCard.ID type: %T", _spec.ID.Value)
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RateCardCreate) createSpec() (*RateCard, *sqlgraph.CreateSpec, error) {
	var (
		_node = &RateCard{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(ratecard.Table, sqlgraph.NewFieldSpec(ratecard.FieldID, field.TypeString))
	)
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rcc.mutation.Namespace(); ok {
		_spec.SetField(ratecard.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := rcc.mutation.Metadata(); ok {
		_spec.SetField(ratecard.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := rcc.mutation.CreatedAt(); ok {
		_spec.SetField(ratecard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rcc.mutation.UpdatedAt(); ok {
		_spec.SetField(ratecard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rcc.mutation.DeletedAt(); ok {
		_spec.SetField(ratecard.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rcc.mutation.Name(); ok {
		_spec.SetField(ratecard.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rcc.mutation.Description(); ok {
		_spec.SetField(ratecard.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := rcc.mutation.Key(); ok {
		_spec.SetField(ratecard.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := rcc.mutation.EntitlementTemplateEntitlementType(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateEntitlementType, field.TypeEnum, value)
		_node.EntitlementTemplateEntitlementType = value
	}
	if value, ok := rcc.mutation.EntitlementTemplateMetadata(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateMetadata, field.TypeJSON, value)
		_node.EntitlementTemplateMetadata = value
	}
	if value, ok := rcc.mutation.EntitlementTemplateIsSoftLimit(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateIsSoftLimit, field.TypeBool, value)
		_node.EntitlementTemplateIsSoftLimit = &value
	}
	if value, ok := rcc.mutation.EntitlementTemplateIssueAfterReset(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateIssueAfterReset, field.TypeFloat64, value)
		_node.EntitlementTemplateIssueAfterReset = &value
	}
	if value, ok := rcc.mutation.EntitlementTemplateIssueAfterResetPriority(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateIssueAfterResetPriority, field.TypeUint8, value)
		_node.EntitlementTemplateIssueAfterResetPriority = &value
	}
	if value, ok := rcc.mutation.EntitlementTemplatePreserveOverageAtReset(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplatePreserveOverageAtReset, field.TypeBool, value)
		_node.EntitlementTemplatePreserveOverageAtReset = &value
	}
	if value, ok := rcc.mutation.EntitlementTemplateConfig(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateConfig, field.TypeJSON, value)
		_node.EntitlementTemplateConfig = value
	}
	if value, ok := rcc.mutation.EntitlementTemplateUsagePeriod(); ok {
		_spec.SetField(ratecard.FieldEntitlementTemplateUsagePeriod, field.TypeString, value)
		_node.EntitlementTemplateUsagePeriod = &value
	}
	if value, ok := rcc.mutation.GetType(); ok {
		_spec.SetField(ratecard.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rcc.mutation.FeatureKey(); ok {
		_spec.SetField(ratecard.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = &value
	}
	if value, ok := rcc.mutation.TaxConfig(); ok {
		vv, err := ratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(ratecard.FieldTaxConfig, field.TypeString, vv)
		_node.TaxConfig = value
	}
	if value, ok := rcc.mutation.BillingCadence(); ok {
		_spec.SetField(ratecard.FieldBillingCadence, field.TypeString, value)
		_node.BillingCadence = &value
	}
	if value, ok := rcc.mutation.Price(); ok {
		vv, err := ratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(ratecard.FieldPrice, field.TypeString, vv)
		_node.Price = value
	}
	if value, ok := rcc.mutation.Discounts(); ok {
		vv, err := ratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(ratecard.FieldDiscounts, field.TypeString, vv)
		_node.Discounts = value
	}
	if nodes := rcc.mutation.AddonRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.AddonRatecardTable,
			Columns: []string{ratecard.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.PlanRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.PlanRatecardTable,
			Columns: []string{ratecard.PlanRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ratecard.SubscriptionItemTable,
			Columns: []string{ratecard.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ratecard.FeatureTable,
			Columns: []string{ratecard.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RateCard.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (rcc *RateCardCreate) OnConflict(opts ...sql.ConflictOption) *RateCardUpsertOne {
	rcc.conflict = opts
	return &RateCardUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *RateCardCreate) OnConflictColumns(columns ...string) *RateCardUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &RateCardUpsertOne{
		create: rcc,
	}
}

type (
	// RateCardUpsertOne is the builder for "upsert"-ing
	//  one RateCard node.
	RateCardUpsertOne struct {
		create *RateCardCreate
	}

	// RateCardUpsert is the "OnConflict" setter.
	RateCardUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *RateCardUpsert) SetMetadata(v map[string]string) *RateCardUpsert {
	u.Set(ratecard.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateMetadata() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *RateCardUpsert) ClearMetadata() *RateCardUpsert {
	u.SetNull(ratecard.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RateCardUpsert) SetUpdatedAt(v time.Time) *RateCardUpsert {
	u.Set(ratecard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateUpdatedAt() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RateCardUpsert) SetDeletedAt(v time.Time) *RateCardUpsert {
	u.Set(ratecard.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateDeletedAt() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RateCardUpsert) ClearDeletedAt() *RateCardUpsert {
	u.SetNull(ratecard.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *RateCardUpsert) SetName(v string) *RateCardUpsert {
	u.Set(ratecard.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateName() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *RateCardUpsert) SetDescription(v string) *RateCardUpsert {
	u.Set(ratecard.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateDescription() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *RateCardUpsert) ClearDescription() *RateCardUpsert {
	u.SetNull(ratecard.FieldDescription)
	return u
}

// SetEntitlementTemplateMetadata sets the "entitlement_template_metadata" field.
func (u *RateCardUpsert) SetEntitlementTemplateMetadata(v map[string]string) *RateCardUpsert {
	u.Set(ratecard.FieldEntitlementTemplateMetadata, v)
	return u
}

// UpdateEntitlementTemplateMetadata sets the "entitlement_template_metadata" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateEntitlementTemplateMetadata() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldEntitlementTemplateMetadata)
	return u
}

// ClearEntitlementTemplateMetadata clears the value of the "entitlement_template_metadata" field.
func (u *RateCardUpsert) ClearEntitlementTemplateMetadata() *RateCardUpsert {
	u.SetNull(ratecard.FieldEntitlementTemplateMetadata)
	return u
}

// SetEntitlementTemplateConfig sets the "entitlement_template_config" field.
func (u *RateCardUpsert) SetEntitlementTemplateConfig(v []uint8) *RateCardUpsert {
	u.Set(ratecard.FieldEntitlementTemplateConfig, v)
	return u
}

// UpdateEntitlementTemplateConfig sets the "entitlement_template_config" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateEntitlementTemplateConfig() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldEntitlementTemplateConfig)
	return u
}

// ClearEntitlementTemplateConfig clears the value of the "entitlement_template_config" field.
func (u *RateCardUpsert) ClearEntitlementTemplateConfig() *RateCardUpsert {
	u.SetNull(ratecard.FieldEntitlementTemplateConfig)
	return u
}

// SetFeatureKey sets the "feature_key" field.
func (u *RateCardUpsert) SetFeatureKey(v string) *RateCardUpsert {
	u.Set(ratecard.FieldFeatureKey, v)
	return u
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateFeatureKey() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldFeatureKey)
	return u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *RateCardUpsert) ClearFeatureKey() *RateCardUpsert {
	u.SetNull(ratecard.FieldFeatureKey)
	return u
}

// SetFeatureID sets the "feature_id" field.
func (u *RateCardUpsert) SetFeatureID(v string) *RateCardUpsert {
	u.Set(ratecard.FieldFeatureID, v)
	return u
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateFeatureID() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldFeatureID)
	return u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *RateCardUpsert) ClearFeatureID() *RateCardUpsert {
	u.SetNull(ratecard.FieldFeatureID)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *RateCardUpsert) SetTaxConfig(v *productcatalog.TaxConfig) *RateCardUpsert {
	u.Set(ratecard.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateTaxConfig() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *RateCardUpsert) ClearTaxConfig() *RateCardUpsert {
	u.SetNull(ratecard.FieldTaxConfig)
	return u
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *RateCardUpsert) SetBillingCadence(v isodate.String) *RateCardUpsert {
	u.Set(ratecard.FieldBillingCadence, v)
	return u
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateBillingCadence() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldBillingCadence)
	return u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *RateCardUpsert) ClearBillingCadence() *RateCardUpsert {
	u.SetNull(ratecard.FieldBillingCadence)
	return u
}

// SetPrice sets the "price" field.
func (u *RateCardUpsert) SetPrice(v *productcatalog.Price) *RateCardUpsert {
	u.Set(ratecard.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *RateCardUpsert) UpdatePrice() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *RateCardUpsert) ClearPrice() *RateCardUpsert {
	u.SetNull(ratecard.FieldPrice)
	return u
}

// SetDiscounts sets the "discounts" field.
func (u *RateCardUpsert) SetDiscounts(v *productcatalog.Discounts) *RateCardUpsert {
	u.Set(ratecard.FieldDiscounts, v)
	return u
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *RateCardUpsert) UpdateDiscounts() *RateCardUpsert {
	u.SetExcluded(ratecard.FieldDiscounts)
	return u
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *RateCardUpsert) ClearDiscounts() *RateCardUpsert {
	u.SetNull(ratecard.FieldDiscounts)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RateCardUpsertOne) UpdateNewValues() *RateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ratecard.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(ratecard.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ratecard.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(ratecard.FieldKey)
		}
		if _, exists := u.create.mutation.EntitlementTemplateEntitlementType(); exists {
			s.SetIgnore(ratecard.FieldEntitlementTemplateEntitlementType)
		}
		if _, exists := u.create.mutation.EntitlementTemplateIsSoftLimit(); exists {
			s.SetIgnore(ratecard.FieldEntitlementTemplateIsSoftLimit)
		}
		if _, exists := u.create.mutation.EntitlementTemplateIssueAfterReset(); exists {
			s.SetIgnore(ratecard.FieldEntitlementTemplateIssueAfterReset)
		}
		if _, exists := u.create.mutation.EntitlementTemplateIssueAfterResetPriority(); exists {
			s.SetIgnore(ratecard.FieldEntitlementTemplateIssueAfterResetPriority)
		}
		if _, exists := u.create.mutation.EntitlementTemplatePreserveOverageAtReset(); exists {
			s.SetIgnore(ratecard.FieldEntitlementTemplatePreserveOverageAtReset)
		}
		if _, exists := u.create.mutation.EntitlementTemplateUsagePeriod(); exists {
			s.SetIgnore(ratecard.FieldEntitlementTemplateUsagePeriod)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(ratecard.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RateCard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RateCardUpsertOne) Ignore() *RateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RateCardUpsertOne) DoNothing() *RateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RateCardCreate.OnConflict
// documentation for more info.
func (u *RateCardUpsertOne) Update(set func(*RateCardUpsert)) *RateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *RateCardUpsertOne) SetMetadata(v map[string]string) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateMetadata() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *RateCardUpsertOne) ClearMetadata() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RateCardUpsertOne) SetUpdatedAt(v time.Time) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateUpdatedAt() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RateCardUpsertOne) SetDeletedAt(v time.Time) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateDeletedAt() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RateCardUpsertOne) ClearDeletedAt() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *RateCardUpsertOne) SetName(v string) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateName() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *RateCardUpsertOne) SetDescription(v string) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateDescription() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RateCardUpsertOne) ClearDescription() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearDescription()
	})
}

// SetEntitlementTemplateMetadata sets the "entitlement_template_metadata" field.
func (u *RateCardUpsertOne) SetEntitlementTemplateMetadata(v map[string]string) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetEntitlementTemplateMetadata(v)
	})
}

// UpdateEntitlementTemplateMetadata sets the "entitlement_template_metadata" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateEntitlementTemplateMetadata() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateEntitlementTemplateMetadata()
	})
}

// ClearEntitlementTemplateMetadata clears the value of the "entitlement_template_metadata" field.
func (u *RateCardUpsertOne) ClearEntitlementTemplateMetadata() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearEntitlementTemplateMetadata()
	})
}

// SetEntitlementTemplateConfig sets the "entitlement_template_config" field.
func (u *RateCardUpsertOne) SetEntitlementTemplateConfig(v []uint8) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetEntitlementTemplateConfig(v)
	})
}

// UpdateEntitlementTemplateConfig sets the "entitlement_template_config" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateEntitlementTemplateConfig() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateEntitlementTemplateConfig()
	})
}

// ClearEntitlementTemplateConfig clears the value of the "entitlement_template_config" field.
func (u *RateCardUpsertOne) ClearEntitlementTemplateConfig() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearEntitlementTemplateConfig()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *RateCardUpsertOne) SetFeatureKey(v string) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateFeatureKey() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *RateCardUpsertOne) ClearFeatureKey() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearFeatureKey()
	})
}

// SetFeatureID sets the "feature_id" field.
func (u *RateCardUpsertOne) SetFeatureID(v string) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetFeatureID(v)
	})
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateFeatureID() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateFeatureID()
	})
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *RateCardUpsertOne) ClearFeatureID() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearFeatureID()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *RateCardUpsertOne) SetTaxConfig(v *productcatalog.TaxConfig) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateTaxConfig() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *RateCardUpsertOne) ClearTaxConfig() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *RateCardUpsertOne) SetBillingCadence(v isodate.String) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateBillingCadence() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *RateCardUpsertOne) ClearBillingCadence() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *RateCardUpsertOne) SetPrice(v *productcatalog.Price) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdatePrice() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *RateCardUpsertOne) ClearPrice() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *RateCardUpsertOne) SetDiscounts(v *productcatalog.Discounts) *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *RateCardUpsertOne) UpdateDiscounts() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *RateCardUpsertOne) ClearDiscounts() *RateCardUpsertOne {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearDiscounts()
	})
}

// Exec executes the query.
func (u *RateCardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for RateCardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RateCardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RateCardUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: RateCardUpsertOne.ID is not supported by MySQL driver. Use RateCardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RateCardUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RateCardCreateBulk is the builder for creating many RateCard entities in bulk.
type RateCardCreateBulk struct {
	config
	err      error
	builders []*RateCardCreate
	conflict []sql.ConflictOption
}

// Save creates the RateCard entities in the database.
func (rccb *RateCardCreateBulk) Save(ctx context.Context) ([]*RateCard, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RateCard, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RateCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RateCardCreateBulk) SaveX(ctx context.Context) []*RateCard {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RateCardCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RateCardCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RateCard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (rccb *RateCardCreateBulk) OnConflict(opts ...sql.ConflictOption) *RateCardUpsertBulk {
	rccb.conflict = opts
	return &RateCardUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *RateCardCreateBulk) OnConflictColumns(columns ...string) *RateCardUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &RateCardUpsertBulk{
		create: rccb,
	}
}

// RateCardUpsertBulk is the builder for "upsert"-ing
// a bulk of RateCard nodes.
type RateCardUpsertBulk struct {
	create *RateCardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RateCardUpsertBulk) UpdateNewValues() *RateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ratecard.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(ratecard.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ratecard.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(ratecard.FieldKey)
			}
			if _, exists := b.mutation.EntitlementTemplateEntitlementType(); exists {
				s.SetIgnore(ratecard.FieldEntitlementTemplateEntitlementType)
			}
			if _, exists := b.mutation.EntitlementTemplateIsSoftLimit(); exists {
				s.SetIgnore(ratecard.FieldEntitlementTemplateIsSoftLimit)
			}
			if _, exists := b.mutation.EntitlementTemplateIssueAfterReset(); exists {
				s.SetIgnore(ratecard.FieldEntitlementTemplateIssueAfterReset)
			}
			if _, exists := b.mutation.EntitlementTemplateIssueAfterResetPriority(); exists {
				s.SetIgnore(ratecard.FieldEntitlementTemplateIssueAfterResetPriority)
			}
			if _, exists := b.mutation.EntitlementTemplatePreserveOverageAtReset(); exists {
				s.SetIgnore(ratecard.FieldEntitlementTemplatePreserveOverageAtReset)
			}
			if _, exists := b.mutation.EntitlementTemplateUsagePeriod(); exists {
				s.SetIgnore(ratecard.FieldEntitlementTemplateUsagePeriod)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(ratecard.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RateCard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RateCardUpsertBulk) Ignore() *RateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RateCardUpsertBulk) DoNothing() *RateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RateCardCreateBulk.OnConflict
// documentation for more info.
func (u *RateCardUpsertBulk) Update(set func(*RateCardUpsert)) *RateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *RateCardUpsertBulk) SetMetadata(v map[string]string) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateMetadata() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *RateCardUpsertBulk) ClearMetadata() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RateCardUpsertBulk) SetUpdatedAt(v time.Time) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateUpdatedAt() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RateCardUpsertBulk) SetDeletedAt(v time.Time) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateDeletedAt() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RateCardUpsertBulk) ClearDeletedAt() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *RateCardUpsertBulk) SetName(v string) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateName() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *RateCardUpsertBulk) SetDescription(v string) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateDescription() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RateCardUpsertBulk) ClearDescription() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearDescription()
	})
}

// SetEntitlementTemplateMetadata sets the "entitlement_template_metadata" field.
func (u *RateCardUpsertBulk) SetEntitlementTemplateMetadata(v map[string]string) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetEntitlementTemplateMetadata(v)
	})
}

// UpdateEntitlementTemplateMetadata sets the "entitlement_template_metadata" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateEntitlementTemplateMetadata() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateEntitlementTemplateMetadata()
	})
}

// ClearEntitlementTemplateMetadata clears the value of the "entitlement_template_metadata" field.
func (u *RateCardUpsertBulk) ClearEntitlementTemplateMetadata() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearEntitlementTemplateMetadata()
	})
}

// SetEntitlementTemplateConfig sets the "entitlement_template_config" field.
func (u *RateCardUpsertBulk) SetEntitlementTemplateConfig(v []uint8) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetEntitlementTemplateConfig(v)
	})
}

// UpdateEntitlementTemplateConfig sets the "entitlement_template_config" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateEntitlementTemplateConfig() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateEntitlementTemplateConfig()
	})
}

// ClearEntitlementTemplateConfig clears the value of the "entitlement_template_config" field.
func (u *RateCardUpsertBulk) ClearEntitlementTemplateConfig() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearEntitlementTemplateConfig()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *RateCardUpsertBulk) SetFeatureKey(v string) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateFeatureKey() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *RateCardUpsertBulk) ClearFeatureKey() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearFeatureKey()
	})
}

// SetFeatureID sets the "feature_id" field.
func (u *RateCardUpsertBulk) SetFeatureID(v string) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetFeatureID(v)
	})
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateFeatureID() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateFeatureID()
	})
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *RateCardUpsertBulk) ClearFeatureID() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearFeatureID()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *RateCardUpsertBulk) SetTaxConfig(v *productcatalog.TaxConfig) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateTaxConfig() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *RateCardUpsertBulk) ClearTaxConfig() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *RateCardUpsertBulk) SetBillingCadence(v isodate.String) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateBillingCadence() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *RateCardUpsertBulk) ClearBillingCadence() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *RateCardUpsertBulk) SetPrice(v *productcatalog.Price) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdatePrice() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *RateCardUpsertBulk) ClearPrice() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *RateCardUpsertBulk) SetDiscounts(v *productcatalog.Discounts) *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *RateCardUpsertBulk) UpdateDiscounts() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *RateCardUpsertBulk) ClearDiscounts() *RateCardUpsertBulk {
	return u.Update(func(s *RateCardUpsert) {
		s.ClearDiscounts()
	})
}

// Exec executes the query.
func (u *RateCardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the RateCardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for RateCardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RateCardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

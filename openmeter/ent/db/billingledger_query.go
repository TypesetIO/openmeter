// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledger"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsubledgertransaction"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingLedgerQuery is the builder for querying BillingLedger entities.
type BillingLedgerQuery struct {
	config
	ctx              *QueryContext
	order            []billingledger.OrderOption
	inters           []Interceptor
	predicates       []predicate.BillingLedger
	withSubledgers   *BillingSubledgerQuery
	withTransactions *BillingSubledgerTransactionQuery
	withCustomer     *CustomerQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillingLedgerQuery builder.
func (blq *BillingLedgerQuery) Where(ps ...predicate.BillingLedger) *BillingLedgerQuery {
	blq.predicates = append(blq.predicates, ps...)
	return blq
}

// Limit the number of records to be returned by this query.
func (blq *BillingLedgerQuery) Limit(limit int) *BillingLedgerQuery {
	blq.ctx.Limit = &limit
	return blq
}

// Offset to start from.
func (blq *BillingLedgerQuery) Offset(offset int) *BillingLedgerQuery {
	blq.ctx.Offset = &offset
	return blq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (blq *BillingLedgerQuery) Unique(unique bool) *BillingLedgerQuery {
	blq.ctx.Unique = &unique
	return blq
}

// Order specifies how the records should be ordered.
func (blq *BillingLedgerQuery) Order(o ...billingledger.OrderOption) *BillingLedgerQuery {
	blq.order = append(blq.order, o...)
	return blq
}

// QuerySubledgers chains the current query on the "subledgers" edge.
func (blq *BillingLedgerQuery) QuerySubledgers() *BillingSubledgerQuery {
	query := (&BillingSubledgerClient{config: blq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingledger.Table, billingledger.FieldID, selector),
			sqlgraph.To(billingsubledger.Table, billingsubledger.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingledger.SubledgersTable, billingledger.SubledgersColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactions chains the current query on the "transactions" edge.
func (blq *BillingLedgerQuery) QueryTransactions() *BillingSubledgerTransactionQuery {
	query := (&BillingSubledgerTransactionClient{config: blq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingledger.Table, billingledger.FieldID, selector),
			sqlgraph.To(billingsubledgertransaction.Table, billingsubledgertransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingledger.TransactionsTable, billingledger.TransactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (blq *BillingLedgerQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: blq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingledger.Table, billingledger.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingledger.CustomerTable, billingledger.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BillingLedger entity from the query.
// Returns a *NotFoundError when no BillingLedger was found.
func (blq *BillingLedgerQuery) First(ctx context.Context) (*BillingLedger, error) {
	nodes, err := blq.Limit(1).All(setContextOp(ctx, blq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billingledger.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (blq *BillingLedgerQuery) FirstX(ctx context.Context) *BillingLedger {
	node, err := blq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillingLedger ID from the query.
// Returns a *NotFoundError when no BillingLedger ID was found.
func (blq *BillingLedgerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = blq.Limit(1).IDs(setContextOp(ctx, blq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billingledger.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (blq *BillingLedgerQuery) FirstIDX(ctx context.Context) string {
	id, err := blq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillingLedger entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillingLedger entity is found.
// Returns a *NotFoundError when no BillingLedger entities are found.
func (blq *BillingLedgerQuery) Only(ctx context.Context) (*BillingLedger, error) {
	nodes, err := blq.Limit(2).All(setContextOp(ctx, blq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billingledger.Label}
	default:
		return nil, &NotSingularError{billingledger.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (blq *BillingLedgerQuery) OnlyX(ctx context.Context) *BillingLedger {
	node, err := blq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillingLedger ID in the query.
// Returns a *NotSingularError when more than one BillingLedger ID is found.
// Returns a *NotFoundError when no entities are found.
func (blq *BillingLedgerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = blq.Limit(2).IDs(setContextOp(ctx, blq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billingledger.Label}
	default:
		err = &NotSingularError{billingledger.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (blq *BillingLedgerQuery) OnlyIDX(ctx context.Context) string {
	id, err := blq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillingLedgers.
func (blq *BillingLedgerQuery) All(ctx context.Context) ([]*BillingLedger, error) {
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryAll)
	if err := blq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillingLedger, *BillingLedgerQuery]()
	return withInterceptors[[]*BillingLedger](ctx, blq, qr, blq.inters)
}

// AllX is like All, but panics if an error occurs.
func (blq *BillingLedgerQuery) AllX(ctx context.Context) []*BillingLedger {
	nodes, err := blq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillingLedger IDs.
func (blq *BillingLedgerQuery) IDs(ctx context.Context) (ids []string, err error) {
	if blq.ctx.Unique == nil && blq.path != nil {
		blq.Unique(true)
	}
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryIDs)
	if err = blq.Select(billingledger.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (blq *BillingLedgerQuery) IDsX(ctx context.Context) []string {
	ids, err := blq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (blq *BillingLedgerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryCount)
	if err := blq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, blq, querierCount[*BillingLedgerQuery](), blq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (blq *BillingLedgerQuery) CountX(ctx context.Context) int {
	count, err := blq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (blq *BillingLedgerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryExist)
	switch _, err := blq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (blq *BillingLedgerQuery) ExistX(ctx context.Context) bool {
	exist, err := blq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillingLedgerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (blq *BillingLedgerQuery) Clone() *BillingLedgerQuery {
	if blq == nil {
		return nil
	}
	return &BillingLedgerQuery{
		config:           blq.config,
		ctx:              blq.ctx.Clone(),
		order:            append([]billingledger.OrderOption{}, blq.order...),
		inters:           append([]Interceptor{}, blq.inters...),
		predicates:       append([]predicate.BillingLedger{}, blq.predicates...),
		withSubledgers:   blq.withSubledgers.Clone(),
		withTransactions: blq.withTransactions.Clone(),
		withCustomer:     blq.withCustomer.Clone(),
		// clone intermediate query.
		sql:  blq.sql.Clone(),
		path: blq.path,
	}
}

// WithSubledgers tells the query-builder to eager-load the nodes that are connected to
// the "subledgers" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BillingLedgerQuery) WithSubledgers(opts ...func(*BillingSubledgerQuery)) *BillingLedgerQuery {
	query := (&BillingSubledgerClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	blq.withSubledgers = query
	return blq
}

// WithTransactions tells the query-builder to eager-load the nodes that are connected to
// the "transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BillingLedgerQuery) WithTransactions(opts ...func(*BillingSubledgerTransactionQuery)) *BillingLedgerQuery {
	query := (&BillingSubledgerTransactionClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	blq.withTransactions = query
	return blq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BillingLedgerQuery) WithCustomer(opts ...func(*CustomerQuery)) *BillingLedgerQuery {
	query := (&CustomerClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	blq.withCustomer = query
	return blq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillingLedger.Query().
//		GroupBy(billingledger.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (blq *BillingLedgerQuery) GroupBy(field string, fields ...string) *BillingLedgerGroupBy {
	blq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillingLedgerGroupBy{build: blq}
	grbuild.flds = &blq.ctx.Fields
	grbuild.label = billingledger.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.BillingLedger.Query().
//		Select(billingledger.FieldNamespace).
//		Scan(ctx, &v)
func (blq *BillingLedgerQuery) Select(fields ...string) *BillingLedgerSelect {
	blq.ctx.Fields = append(blq.ctx.Fields, fields...)
	sbuild := &BillingLedgerSelect{BillingLedgerQuery: blq}
	sbuild.label = billingledger.Label
	sbuild.flds, sbuild.scan = &blq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillingLedgerSelect configured with the given aggregations.
func (blq *BillingLedgerQuery) Aggregate(fns ...AggregateFunc) *BillingLedgerSelect {
	return blq.Select().Aggregate(fns...)
}

func (blq *BillingLedgerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range blq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, blq); err != nil {
				return err
			}
		}
	}
	for _, f := range blq.ctx.Fields {
		if !billingledger.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if blq.path != nil {
		prev, err := blq.path(ctx)
		if err != nil {
			return err
		}
		blq.sql = prev
	}
	return nil
}

func (blq *BillingLedgerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BillingLedger, error) {
	var (
		nodes       = []*BillingLedger{}
		_spec       = blq.querySpec()
		loadedTypes = [3]bool{
			blq.withSubledgers != nil,
			blq.withTransactions != nil,
			blq.withCustomer != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BillingLedger).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BillingLedger{config: blq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(blq.modifiers) > 0 {
		_spec.Modifiers = blq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, blq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := blq.withSubledgers; query != nil {
		if err := blq.loadSubledgers(ctx, query, nodes,
			func(n *BillingLedger) { n.Edges.Subledgers = []*BillingSubledger{} },
			func(n *BillingLedger, e *BillingSubledger) { n.Edges.Subledgers = append(n.Edges.Subledgers, e) }); err != nil {
			return nil, err
		}
	}
	if query := blq.withTransactions; query != nil {
		if err := blq.loadTransactions(ctx, query, nodes,
			func(n *BillingLedger) { n.Edges.Transactions = []*BillingSubledgerTransaction{} },
			func(n *BillingLedger, e *BillingSubledgerTransaction) {
				n.Edges.Transactions = append(n.Edges.Transactions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := blq.withCustomer; query != nil {
		if err := blq.loadCustomer(ctx, query, nodes, nil,
			func(n *BillingLedger, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (blq *BillingLedgerQuery) loadSubledgers(ctx context.Context, query *BillingSubledgerQuery, nodes []*BillingLedger, init func(*BillingLedger), assign func(*BillingLedger, *BillingSubledger)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*BillingLedger)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingsubledger.FieldLedgerID)
	}
	query.Where(predicate.BillingSubledger(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(billingledger.SubledgersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LedgerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ledger_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (blq *BillingLedgerQuery) loadTransactions(ctx context.Context, query *BillingSubledgerTransactionQuery, nodes []*BillingLedger, init func(*BillingLedger), assign func(*BillingLedger, *BillingSubledgerTransaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*BillingLedger)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingsubledgertransaction.FieldLedgerID)
	}
	query.Where(predicate.BillingSubledgerTransaction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(billingledger.TransactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LedgerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ledger_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (blq *BillingLedgerQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*BillingLedger, init func(*BillingLedger), assign func(*BillingLedger, *Customer)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingLedger)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (blq *BillingLedgerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := blq.querySpec()
	if len(blq.modifiers) > 0 {
		_spec.Modifiers = blq.modifiers
	}
	_spec.Node.Columns = blq.ctx.Fields
	if len(blq.ctx.Fields) > 0 {
		_spec.Unique = blq.ctx.Unique != nil && *blq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, blq.driver, _spec)
}

func (blq *BillingLedgerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(billingledger.Table, billingledger.Columns, sqlgraph.NewFieldSpec(billingledger.FieldID, field.TypeString))
	_spec.From = blq.sql
	if unique := blq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if blq.path != nil {
		_spec.Unique = true
	}
	if fields := blq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingledger.FieldID)
		for i := range fields {
			if fields[i] != billingledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if blq.withCustomer != nil {
			_spec.Node.AddColumnOnce(billingledger.FieldCustomerID)
		}
	}
	if ps := blq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := blq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := blq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := blq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (blq *BillingLedgerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(blq.driver.Dialect())
	t1 := builder.Table(billingledger.Table)
	columns := blq.ctx.Fields
	if len(columns) == 0 {
		columns = billingledger.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if blq.sql != nil {
		selector = blq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if blq.ctx.Unique != nil && *blq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range blq.modifiers {
		m(selector)
	}
	for _, p := range blq.predicates {
		p(selector)
	}
	for _, p := range blq.order {
		p(selector)
	}
	if offset := blq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := blq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (blq *BillingLedgerQuery) ForUpdate(opts ...sql.LockOption) *BillingLedgerQuery {
	if blq.driver.Dialect() == dialect.Postgres {
		blq.Unique(false)
	}
	blq.modifiers = append(blq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return blq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (blq *BillingLedgerQuery) ForShare(opts ...sql.LockOption) *BillingLedgerQuery {
	if blq.driver.Dialect() == dialect.Postgres {
		blq.Unique(false)
	}
	blq.modifiers = append(blq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return blq
}

// BillingLedgerGroupBy is the group-by builder for BillingLedger entities.
type BillingLedgerGroupBy struct {
	selector
	build *BillingLedgerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (blgb *BillingLedgerGroupBy) Aggregate(fns ...AggregateFunc) *BillingLedgerGroupBy {
	blgb.fns = append(blgb.fns, fns...)
	return blgb
}

// Scan applies the selector query and scans the result into the given value.
func (blgb *BillingLedgerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, blgb.build.ctx, ent.OpQueryGroupBy)
	if err := blgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingLedgerQuery, *BillingLedgerGroupBy](ctx, blgb.build, blgb, blgb.build.inters, v)
}

func (blgb *BillingLedgerGroupBy) sqlScan(ctx context.Context, root *BillingLedgerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(blgb.fns))
	for _, fn := range blgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*blgb.flds)+len(blgb.fns))
		for _, f := range *blgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*blgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := blgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillingLedgerSelect is the builder for selecting fields of BillingLedger entities.
type BillingLedgerSelect struct {
	*BillingLedgerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bls *BillingLedgerSelect) Aggregate(fns ...AggregateFunc) *BillingLedgerSelect {
	bls.fns = append(bls.fns, fns...)
	return bls
}

// Scan applies the selector query and scans the result into the given value.
func (bls *BillingLedgerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bls.ctx, ent.OpQuerySelect)
	if err := bls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingLedgerQuery, *BillingLedgerSelect](ctx, bls.BillingLedgerQuery, bls, bls.inters, v)
}

func (bls *BillingLedgerSelect) sqlScan(ctx context.Context, root *BillingLedgerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bls.fns))
	for _, fn := range bls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

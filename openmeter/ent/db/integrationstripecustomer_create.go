// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/integrationstripecustomer"
)

// IntegrationStripeCustomerCreate is the builder for creating a IntegrationStripeCustomer entity.
type IntegrationStripeCustomerCreate struct {
	config
	mutation *IntegrationStripeCustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (iscc *IntegrationStripeCustomerCreate) SetNamespace(s string) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetNamespace(s)
	return iscc
}

// SetCreatedAt sets the "created_at" field.
func (iscc *IntegrationStripeCustomerCreate) SetCreatedAt(t time.Time) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetCreatedAt(t)
	return iscc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iscc *IntegrationStripeCustomerCreate) SetNillableCreatedAt(t *time.Time) *IntegrationStripeCustomerCreate {
	if t != nil {
		iscc.SetCreatedAt(*t)
	}
	return iscc
}

// SetUpdatedAt sets the "updated_at" field.
func (iscc *IntegrationStripeCustomerCreate) SetUpdatedAt(t time.Time) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetUpdatedAt(t)
	return iscc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iscc *IntegrationStripeCustomerCreate) SetNillableUpdatedAt(t *time.Time) *IntegrationStripeCustomerCreate {
	if t != nil {
		iscc.SetUpdatedAt(*t)
	}
	return iscc
}

// SetDeletedAt sets the "deleted_at" field.
func (iscc *IntegrationStripeCustomerCreate) SetDeletedAt(t time.Time) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetDeletedAt(t)
	return iscc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iscc *IntegrationStripeCustomerCreate) SetNillableDeletedAt(t *time.Time) *IntegrationStripeCustomerCreate {
	if t != nil {
		iscc.SetDeletedAt(*t)
	}
	return iscc
}

// SetAppID sets the "app_id" field.
func (iscc *IntegrationStripeCustomerCreate) SetAppID(s string) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetAppID(s)
	return iscc
}

// SetCustomerID sets the "customer_id" field.
func (iscc *IntegrationStripeCustomerCreate) SetCustomerID(s string) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetCustomerID(s)
	return iscc
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (iscc *IntegrationStripeCustomerCreate) SetStripeCustomerID(s string) *IntegrationStripeCustomerCreate {
	iscc.mutation.SetStripeCustomerID(s)
	return iscc
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (iscc *IntegrationStripeCustomerCreate) SetNillableStripeCustomerID(s *string) *IntegrationStripeCustomerCreate {
	if s != nil {
		iscc.SetStripeCustomerID(*s)
	}
	return iscc
}

// Mutation returns the IntegrationStripeCustomerMutation object of the builder.
func (iscc *IntegrationStripeCustomerCreate) Mutation() *IntegrationStripeCustomerMutation {
	return iscc.mutation
}

// Save creates the IntegrationStripeCustomer in the database.
func (iscc *IntegrationStripeCustomerCreate) Save(ctx context.Context) (*IntegrationStripeCustomer, error) {
	iscc.defaults()
	return withHooks(ctx, iscc.sqlSave, iscc.mutation, iscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iscc *IntegrationStripeCustomerCreate) SaveX(ctx context.Context) *IntegrationStripeCustomer {
	v, err := iscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscc *IntegrationStripeCustomerCreate) Exec(ctx context.Context) error {
	_, err := iscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscc *IntegrationStripeCustomerCreate) ExecX(ctx context.Context) {
	if err := iscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscc *IntegrationStripeCustomerCreate) defaults() {
	if _, ok := iscc.mutation.CreatedAt(); !ok {
		v := integrationstripecustomer.DefaultCreatedAt()
		iscc.mutation.SetCreatedAt(v)
	}
	if _, ok := iscc.mutation.UpdatedAt(); !ok {
		v := integrationstripecustomer.DefaultUpdatedAt()
		iscc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscc *IntegrationStripeCustomerCreate) check() error {
	if _, ok := iscc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "IntegrationStripeCustomer.namespace"`)}
	}
	if v, ok := iscc.mutation.Namespace(); ok {
		if err := integrationstripecustomer.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "IntegrationStripeCustomer.namespace": %w`, err)}
		}
	}
	if _, ok := iscc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "IntegrationStripeCustomer.created_at"`)}
	}
	if _, ok := iscc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "IntegrationStripeCustomer.updated_at"`)}
	}
	if _, ok := iscc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`db: missing required field "IntegrationStripeCustomer.app_id"`)}
	}
	if _, ok := iscc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "IntegrationStripeCustomer.customer_id"`)}
	}
	return nil
}

func (iscc *IntegrationStripeCustomerCreate) sqlSave(ctx context.Context) (*IntegrationStripeCustomer, error) {
	if err := iscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iscc.mutation.id = &_node.ID
	iscc.mutation.done = true
	return _node, nil
}

func (iscc *IntegrationStripeCustomerCreate) createSpec() (*IntegrationStripeCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &IntegrationStripeCustomer{config: iscc.config}
		_spec = sqlgraph.NewCreateSpec(integrationstripecustomer.Table, sqlgraph.NewFieldSpec(integrationstripecustomer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = iscc.conflict
	if value, ok := iscc.mutation.Namespace(); ok {
		_spec.SetField(integrationstripecustomer.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := iscc.mutation.CreatedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iscc.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iscc.mutation.DeletedAt(); ok {
		_spec.SetField(integrationstripecustomer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := iscc.mutation.AppID(); ok {
		_spec.SetField(integrationstripecustomer.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := iscc.mutation.CustomerID(); ok {
		_spec.SetField(integrationstripecustomer.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := iscc.mutation.StripeCustomerID(); ok {
		_spec.SetField(integrationstripecustomer.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IntegrationStripeCustomer.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IntegrationStripeCustomerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (iscc *IntegrationStripeCustomerCreate) OnConflict(opts ...sql.ConflictOption) *IntegrationStripeCustomerUpsertOne {
	iscc.conflict = opts
	return &IntegrationStripeCustomerUpsertOne{
		create: iscc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IntegrationStripeCustomer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iscc *IntegrationStripeCustomerCreate) OnConflictColumns(columns ...string) *IntegrationStripeCustomerUpsertOne {
	iscc.conflict = append(iscc.conflict, sql.ConflictColumns(columns...))
	return &IntegrationStripeCustomerUpsertOne{
		create: iscc,
	}
}

type (
	// IntegrationStripeCustomerUpsertOne is the builder for "upsert"-ing
	//  one IntegrationStripeCustomer node.
	IntegrationStripeCustomerUpsertOne struct {
		create *IntegrationStripeCustomerCreate
	}

	// IntegrationStripeCustomerUpsert is the "OnConflict" setter.
	IntegrationStripeCustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IntegrationStripeCustomerUpsert) SetUpdatedAt(v time.Time) *IntegrationStripeCustomerUpsert {
	u.Set(integrationstripecustomer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsert) UpdateUpdatedAt() *IntegrationStripeCustomerUpsert {
	u.SetExcluded(integrationstripecustomer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IntegrationStripeCustomerUpsert) SetDeletedAt(v time.Time) *IntegrationStripeCustomerUpsert {
	u.Set(integrationstripecustomer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsert) UpdateDeletedAt() *IntegrationStripeCustomerUpsert {
	u.SetExcluded(integrationstripecustomer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IntegrationStripeCustomerUpsert) ClearDeletedAt() *IntegrationStripeCustomerUpsert {
	u.SetNull(integrationstripecustomer.FieldDeletedAt)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *IntegrationStripeCustomerUpsert) SetCustomerID(v string) *IntegrationStripeCustomerUpsert {
	u.Set(integrationstripecustomer.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsert) UpdateCustomerID() *IntegrationStripeCustomerUpsert {
	u.SetExcluded(integrationstripecustomer.FieldCustomerID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IntegrationStripeCustomer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IntegrationStripeCustomerUpsertOne) UpdateNewValues() *IntegrationStripeCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(integrationstripecustomer.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(integrationstripecustomer.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(integrationstripecustomer.FieldAppID)
		}
		if _, exists := u.create.mutation.StripeCustomerID(); exists {
			s.SetIgnore(integrationstripecustomer.FieldStripeCustomerID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IntegrationStripeCustomer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IntegrationStripeCustomerUpsertOne) Ignore() *IntegrationStripeCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IntegrationStripeCustomerUpsertOne) DoNothing() *IntegrationStripeCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IntegrationStripeCustomerCreate.OnConflict
// documentation for more info.
func (u *IntegrationStripeCustomerUpsertOne) Update(set func(*IntegrationStripeCustomerUpsert)) *IntegrationStripeCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IntegrationStripeCustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IntegrationStripeCustomerUpsertOne) SetUpdatedAt(v time.Time) *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsertOne) UpdateUpdatedAt() *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IntegrationStripeCustomerUpsertOne) SetDeletedAt(v time.Time) *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsertOne) UpdateDeletedAt() *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IntegrationStripeCustomerUpsertOne) ClearDeletedAt() *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *IntegrationStripeCustomerUpsertOne) SetCustomerID(v string) *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsertOne) UpdateCustomerID() *IntegrationStripeCustomerUpsertOne {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.UpdateCustomerID()
	})
}

// Exec executes the query.
func (u *IntegrationStripeCustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for IntegrationStripeCustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IntegrationStripeCustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IntegrationStripeCustomerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IntegrationStripeCustomerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IntegrationStripeCustomerCreateBulk is the builder for creating many IntegrationStripeCustomer entities in bulk.
type IntegrationStripeCustomerCreateBulk struct {
	config
	err      error
	builders []*IntegrationStripeCustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the IntegrationStripeCustomer entities in the database.
func (isccb *IntegrationStripeCustomerCreateBulk) Save(ctx context.Context) ([]*IntegrationStripeCustomer, error) {
	if isccb.err != nil {
		return nil, isccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(isccb.builders))
	nodes := make([]*IntegrationStripeCustomer, len(isccb.builders))
	mutators := make([]Mutator, len(isccb.builders))
	for i := range isccb.builders {
		func(i int, root context.Context) {
			builder := isccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IntegrationStripeCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, isccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = isccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, isccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, isccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (isccb *IntegrationStripeCustomerCreateBulk) SaveX(ctx context.Context) []*IntegrationStripeCustomer {
	v, err := isccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isccb *IntegrationStripeCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := isccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isccb *IntegrationStripeCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := isccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IntegrationStripeCustomer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IntegrationStripeCustomerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (isccb *IntegrationStripeCustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *IntegrationStripeCustomerUpsertBulk {
	isccb.conflict = opts
	return &IntegrationStripeCustomerUpsertBulk{
		create: isccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IntegrationStripeCustomer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (isccb *IntegrationStripeCustomerCreateBulk) OnConflictColumns(columns ...string) *IntegrationStripeCustomerUpsertBulk {
	isccb.conflict = append(isccb.conflict, sql.ConflictColumns(columns...))
	return &IntegrationStripeCustomerUpsertBulk{
		create: isccb,
	}
}

// IntegrationStripeCustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of IntegrationStripeCustomer nodes.
type IntegrationStripeCustomerUpsertBulk struct {
	create *IntegrationStripeCustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IntegrationStripeCustomer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IntegrationStripeCustomerUpsertBulk) UpdateNewValues() *IntegrationStripeCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(integrationstripecustomer.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(integrationstripecustomer.FieldCreatedAt)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(integrationstripecustomer.FieldAppID)
			}
			if _, exists := b.mutation.StripeCustomerID(); exists {
				s.SetIgnore(integrationstripecustomer.FieldStripeCustomerID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IntegrationStripeCustomer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IntegrationStripeCustomerUpsertBulk) Ignore() *IntegrationStripeCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IntegrationStripeCustomerUpsertBulk) DoNothing() *IntegrationStripeCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IntegrationStripeCustomerCreateBulk.OnConflict
// documentation for more info.
func (u *IntegrationStripeCustomerUpsertBulk) Update(set func(*IntegrationStripeCustomerUpsert)) *IntegrationStripeCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IntegrationStripeCustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IntegrationStripeCustomerUpsertBulk) SetUpdatedAt(v time.Time) *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsertBulk) UpdateUpdatedAt() *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IntegrationStripeCustomerUpsertBulk) SetDeletedAt(v time.Time) *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsertBulk) UpdateDeletedAt() *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IntegrationStripeCustomerUpsertBulk) ClearDeletedAt() *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *IntegrationStripeCustomerUpsertBulk) SetCustomerID(v string) *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *IntegrationStripeCustomerUpsertBulk) UpdateCustomerID() *IntegrationStripeCustomerUpsertBulk {
	return u.Update(func(s *IntegrationStripeCustomerUpsert) {
		s.UpdateCustomerID()
	})
}

// Exec executes the query.
func (u *IntegrationStripeCustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the IntegrationStripeCustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for IntegrationStripeCustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IntegrationStripeCustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

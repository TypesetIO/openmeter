// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/integrationstripe"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// IntegrationStripeUpdate is the builder for updating IntegrationStripe entities.
type IntegrationStripeUpdate struct {
	config
	hooks    []Hook
	mutation *IntegrationStripeMutation
}

// Where appends a list predicates to the IntegrationStripeUpdate builder.
func (isu *IntegrationStripeUpdate) Where(ps ...predicate.IntegrationStripe) *IntegrationStripeUpdate {
	isu.mutation.Where(ps...)
	return isu
}

// SetUpdatedAt sets the "updated_at" field.
func (isu *IntegrationStripeUpdate) SetUpdatedAt(t time.Time) *IntegrationStripeUpdate {
	isu.mutation.SetUpdatedAt(t)
	return isu
}

// SetDeletedAt sets the "deleted_at" field.
func (isu *IntegrationStripeUpdate) SetDeletedAt(t time.Time) *IntegrationStripeUpdate {
	isu.mutation.SetDeletedAt(t)
	return isu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (isu *IntegrationStripeUpdate) SetNillableDeletedAt(t *time.Time) *IntegrationStripeUpdate {
	if t != nil {
		isu.SetDeletedAt(*t)
	}
	return isu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (isu *IntegrationStripeUpdate) ClearDeletedAt() *IntegrationStripeUpdate {
	isu.mutation.ClearDeletedAt()
	return isu
}

// Mutation returns the IntegrationStripeMutation object of the builder.
func (isu *IntegrationStripeUpdate) Mutation() *IntegrationStripeMutation {
	return isu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isu *IntegrationStripeUpdate) Save(ctx context.Context) (int, error) {
	isu.defaults()
	return withHooks(ctx, isu.sqlSave, isu.mutation, isu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *IntegrationStripeUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *IntegrationStripeUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *IntegrationStripeUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isu *IntegrationStripeUpdate) defaults() {
	if _, ok := isu.mutation.UpdatedAt(); !ok {
		v := integrationstripe.UpdateDefaultUpdatedAt()
		isu.mutation.SetUpdatedAt(v)
	}
}

func (isu *IntegrationStripeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(integrationstripe.Table, integrationstripe.Columns, sqlgraph.NewFieldSpec(integrationstripe.FieldID, field.TypeInt))
	if ps := isu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isu.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationstripe.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := isu.mutation.DeletedAt(); ok {
		_spec.SetField(integrationstripe.FieldDeletedAt, field.TypeTime, value)
	}
	if isu.mutation.DeletedAtCleared() {
		_spec.ClearField(integrationstripe.FieldDeletedAt, field.TypeTime)
	}
	if isu.mutation.StripeAccountIDCleared() {
		_spec.ClearField(integrationstripe.FieldStripeAccountID, field.TypeString)
	}
	if isu.mutation.StripeLivemodeCleared() {
		_spec.ClearField(integrationstripe.FieldStripeLivemode, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrationstripe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	isu.mutation.done = true
	return n, nil
}

// IntegrationStripeUpdateOne is the builder for updating a single IntegrationStripe entity.
type IntegrationStripeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntegrationStripeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (isuo *IntegrationStripeUpdateOne) SetUpdatedAt(t time.Time) *IntegrationStripeUpdateOne {
	isuo.mutation.SetUpdatedAt(t)
	return isuo
}

// SetDeletedAt sets the "deleted_at" field.
func (isuo *IntegrationStripeUpdateOne) SetDeletedAt(t time.Time) *IntegrationStripeUpdateOne {
	isuo.mutation.SetDeletedAt(t)
	return isuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (isuo *IntegrationStripeUpdateOne) SetNillableDeletedAt(t *time.Time) *IntegrationStripeUpdateOne {
	if t != nil {
		isuo.SetDeletedAt(*t)
	}
	return isuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (isuo *IntegrationStripeUpdateOne) ClearDeletedAt() *IntegrationStripeUpdateOne {
	isuo.mutation.ClearDeletedAt()
	return isuo
}

// Mutation returns the IntegrationStripeMutation object of the builder.
func (isuo *IntegrationStripeUpdateOne) Mutation() *IntegrationStripeMutation {
	return isuo.mutation
}

// Where appends a list predicates to the IntegrationStripeUpdate builder.
func (isuo *IntegrationStripeUpdateOne) Where(ps ...predicate.IntegrationStripe) *IntegrationStripeUpdateOne {
	isuo.mutation.Where(ps...)
	return isuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isuo *IntegrationStripeUpdateOne) Select(field string, fields ...string) *IntegrationStripeUpdateOne {
	isuo.fields = append([]string{field}, fields...)
	return isuo
}

// Save executes the query and returns the updated IntegrationStripe entity.
func (isuo *IntegrationStripeUpdateOne) Save(ctx context.Context) (*IntegrationStripe, error) {
	isuo.defaults()
	return withHooks(ctx, isuo.sqlSave, isuo.mutation, isuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *IntegrationStripeUpdateOne) SaveX(ctx context.Context) *IntegrationStripe {
	node, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isuo *IntegrationStripeUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *IntegrationStripeUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isuo *IntegrationStripeUpdateOne) defaults() {
	if _, ok := isuo.mutation.UpdatedAt(); !ok {
		v := integrationstripe.UpdateDefaultUpdatedAt()
		isuo.mutation.SetUpdatedAt(v)
	}
}

func (isuo *IntegrationStripeUpdateOne) sqlSave(ctx context.Context) (_node *IntegrationStripe, err error) {
	_spec := sqlgraph.NewUpdateSpec(integrationstripe.Table, integrationstripe.Columns, sqlgraph.NewFieldSpec(integrationstripe.FieldID, field.TypeInt))
	id, ok := isuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "IntegrationStripe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := isuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, integrationstripe.FieldID)
		for _, f := range fields {
			if !integrationstripe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != integrationstripe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isuo.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationstripe.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := isuo.mutation.DeletedAt(); ok {
		_spec.SetField(integrationstripe.FieldDeletedAt, field.TypeTime, value)
	}
	if isuo.mutation.DeletedAtCleared() {
		_spec.ClearField(integrationstripe.FieldDeletedAt, field.TypeTime)
	}
	if isuo.mutation.StripeAccountIDCleared() {
		_spec.ClearField(integrationstripe.FieldStripeAccountID, field.TypeString)
	}
	if isuo.mutation.StripeLivemodeCleared() {
		_spec.ClearField(integrationstripe.FieldStripeLivemode, field.TypeBool)
	}
	_node = &IntegrationStripe{config: isuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrationstripe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	isuo.mutation.done = true
	return _node, nil
}

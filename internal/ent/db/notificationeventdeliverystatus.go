// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/internal/ent/db/notificationeventdeliverystatus"
	"github.com/openmeterio/openmeter/internal/notification"
)

// NotificationEventDeliveryStatus is the model entity for the NotificationEventDeliveryStatus schema.
type NotificationEventDeliveryStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID string `json:"channel_id,omitempty"`
	// State holds the value of the "state" field.
	State notification.EventDeliveryStatusState `json:"state,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationEventDeliveryStatusQuery when eager-loading is set.
	Edges        NotificationEventDeliveryStatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationEventDeliveryStatusEdges holds the relations/edges for other nodes in the graph.
type NotificationEventDeliveryStatusEdges struct {
	// Events holds the value of the events edge.
	Events []*NotificationEvent `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEventDeliveryStatusEdges) EventsOrErr() ([]*NotificationEvent, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationEventDeliveryStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationeventdeliverystatus.FieldID, notificationeventdeliverystatus.FieldNamespace, notificationeventdeliverystatus.FieldEventID, notificationeventdeliverystatus.FieldChannelID, notificationeventdeliverystatus.FieldState, notificationeventdeliverystatus.FieldReason:
			values[i] = new(sql.NullString)
		case notificationeventdeliverystatus.FieldCreatedAt, notificationeventdeliverystatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationEventDeliveryStatus fields.
func (neds *NotificationEventDeliveryStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationeventdeliverystatus.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				neds.ID = value.String
			}
		case notificationeventdeliverystatus.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				neds.Namespace = value.String
			}
		case notificationeventdeliverystatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				neds.CreatedAt = value.Time
			}
		case notificationeventdeliverystatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				neds.UpdatedAt = value.Time
			}
		case notificationeventdeliverystatus.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				neds.EventID = value.String
			}
		case notificationeventdeliverystatus.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				neds.ChannelID = value.String
			}
		case notificationeventdeliverystatus.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				neds.State = notification.EventDeliveryStatusState(value.String)
			}
		case notificationeventdeliverystatus.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				neds.Reason = value.String
			}
		default:
			neds.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationEventDeliveryStatus.
// This includes values selected through modifiers, order, etc.
func (neds *NotificationEventDeliveryStatus) Value(name string) (ent.Value, error) {
	return neds.selectValues.Get(name)
}

// QueryEvents queries the "events" edge of the NotificationEventDeliveryStatus entity.
func (neds *NotificationEventDeliveryStatus) QueryEvents() *NotificationEventQuery {
	return NewNotificationEventDeliveryStatusClient(neds.config).QueryEvents(neds)
}

// Update returns a builder for updating this NotificationEventDeliveryStatus.
// Note that you need to call NotificationEventDeliveryStatus.Unwrap() before calling this method if this NotificationEventDeliveryStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (neds *NotificationEventDeliveryStatus) Update() *NotificationEventDeliveryStatusUpdateOne {
	return NewNotificationEventDeliveryStatusClient(neds.config).UpdateOne(neds)
}

// Unwrap unwraps the NotificationEventDeliveryStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (neds *NotificationEventDeliveryStatus) Unwrap() *NotificationEventDeliveryStatus {
	_tx, ok := neds.config.driver.(*txDriver)
	if !ok {
		panic("db: NotificationEventDeliveryStatus is not a transactional entity")
	}
	neds.config.driver = _tx.drv
	return neds
}

// String implements the fmt.Stringer.
func (neds *NotificationEventDeliveryStatus) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationEventDeliveryStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", neds.ID))
	builder.WriteString("namespace=")
	builder.WriteString(neds.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(neds.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(neds.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(neds.EventID)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(neds.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", neds.State))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(neds.Reason)
	builder.WriteByte(')')
	return builder.String()
}

// NotificationEventDeliveryStatusSlice is a parsable slice of NotificationEventDeliveryStatus.
type NotificationEventDeliveryStatusSlice []*NotificationEventDeliveryStatus

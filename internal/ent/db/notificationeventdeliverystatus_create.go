// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/internal/ent/db/notificationeventdeliverystatus"
	"github.com/openmeterio/openmeter/internal/notification"
)

// NotificationEventDeliveryStatusCreate is the builder for creating a NotificationEventDeliveryStatus entity.
type NotificationEventDeliveryStatusCreate struct {
	config
	mutation *NotificationEventDeliveryStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetNamespace(s string) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetNamespace(s)
	return nedsc
}

// SetCreatedAt sets the "created_at" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetCreatedAt(t time.Time) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetCreatedAt(t)
	return nedsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nedsc *NotificationEventDeliveryStatusCreate) SetNillableCreatedAt(t *time.Time) *NotificationEventDeliveryStatusCreate {
	if t != nil {
		nedsc.SetCreatedAt(*t)
	}
	return nedsc
}

// SetUpdatedAt sets the "updated_at" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetUpdatedAt(t time.Time) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetUpdatedAt(t)
	return nedsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nedsc *NotificationEventDeliveryStatusCreate) SetNillableUpdatedAt(t *time.Time) *NotificationEventDeliveryStatusCreate {
	if t != nil {
		nedsc.SetUpdatedAt(*t)
	}
	return nedsc
}

// SetEventID sets the "event_id" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetEventID(s string) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetEventID(s)
	return nedsc
}

// SetChannelID sets the "channel_id" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetChannelID(s string) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetChannelID(s)
	return nedsc
}

// SetState sets the "state" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetState(ndss notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetState(ndss)
	return nedsc
}

// SetID sets the "id" field.
func (nedsc *NotificationEventDeliveryStatusCreate) SetID(s string) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.SetID(s)
	return nedsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nedsc *NotificationEventDeliveryStatusCreate) SetNillableID(s *string) *NotificationEventDeliveryStatusCreate {
	if s != nil {
		nedsc.SetID(*s)
	}
	return nedsc
}

// AddEventIDs adds the "events" edge to the NotificationEvent entity by IDs.
func (nedsc *NotificationEventDeliveryStatusCreate) AddEventIDs(ids ...string) *NotificationEventDeliveryStatusCreate {
	nedsc.mutation.AddEventIDs(ids...)
	return nedsc
}

// AddEvents adds the "events" edges to the NotificationEvent entity.
func (nedsc *NotificationEventDeliveryStatusCreate) AddEvents(n ...*NotificationEvent) *NotificationEventDeliveryStatusCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nedsc.AddEventIDs(ids...)
}

// Mutation returns the NotificationEventDeliveryStatusMutation object of the builder.
func (nedsc *NotificationEventDeliveryStatusCreate) Mutation() *NotificationEventDeliveryStatusMutation {
	return nedsc.mutation
}

// Save creates the NotificationEventDeliveryStatus in the database.
func (nedsc *NotificationEventDeliveryStatusCreate) Save(ctx context.Context) (*NotificationEventDeliveryStatus, error) {
	nedsc.defaults()
	return withHooks(ctx, nedsc.sqlSave, nedsc.mutation, nedsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nedsc *NotificationEventDeliveryStatusCreate) SaveX(ctx context.Context) *NotificationEventDeliveryStatus {
	v, err := nedsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nedsc *NotificationEventDeliveryStatusCreate) Exec(ctx context.Context) error {
	_, err := nedsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nedsc *NotificationEventDeliveryStatusCreate) ExecX(ctx context.Context) {
	if err := nedsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nedsc *NotificationEventDeliveryStatusCreate) defaults() {
	if _, ok := nedsc.mutation.CreatedAt(); !ok {
		v := notificationeventdeliverystatus.DefaultCreatedAt()
		nedsc.mutation.SetCreatedAt(v)
	}
	if _, ok := nedsc.mutation.UpdatedAt(); !ok {
		v := notificationeventdeliverystatus.DefaultUpdatedAt()
		nedsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nedsc.mutation.ID(); !ok {
		v := notificationeventdeliverystatus.DefaultID()
		nedsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nedsc *NotificationEventDeliveryStatusCreate) check() error {
	if _, ok := nedsc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "NotificationEventDeliveryStatus.namespace"`)}
	}
	if v, ok := nedsc.mutation.Namespace(); ok {
		if err := notificationeventdeliverystatus.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "NotificationEventDeliveryStatus.namespace": %w`, err)}
		}
	}
	if _, ok := nedsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "NotificationEventDeliveryStatus.created_at"`)}
	}
	if _, ok := nedsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "NotificationEventDeliveryStatus.updated_at"`)}
	}
	if _, ok := nedsc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`db: missing required field "NotificationEventDeliveryStatus.event_id"`)}
	}
	if v, ok := nedsc.mutation.EventID(); ok {
		if err := notificationeventdeliverystatus.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`db: validator failed for field "NotificationEventDeliveryStatus.event_id": %w`, err)}
		}
	}
	if _, ok := nedsc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`db: missing required field "NotificationEventDeliveryStatus.channel_id"`)}
	}
	if v, ok := nedsc.mutation.ChannelID(); ok {
		if err := notificationeventdeliverystatus.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`db: validator failed for field "NotificationEventDeliveryStatus.channel_id": %w`, err)}
		}
	}
	if _, ok := nedsc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`db: missing required field "NotificationEventDeliveryStatus.state"`)}
	}
	if v, ok := nedsc.mutation.State(); ok {
		if err := notificationeventdeliverystatus.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`db: validator failed for field "NotificationEventDeliveryStatus.state": %w`, err)}
		}
	}
	return nil
}

func (nedsc *NotificationEventDeliveryStatusCreate) sqlSave(ctx context.Context) (*NotificationEventDeliveryStatus, error) {
	if err := nedsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nedsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nedsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NotificationEventDeliveryStatus.ID type: %T", _spec.ID.Value)
		}
	}
	nedsc.mutation.id = &_node.ID
	nedsc.mutation.done = true
	return _node, nil
}

func (nedsc *NotificationEventDeliveryStatusCreate) createSpec() (*NotificationEventDeliveryStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationEventDeliveryStatus{config: nedsc.config}
		_spec = sqlgraph.NewCreateSpec(notificationeventdeliverystatus.Table, sqlgraph.NewFieldSpec(notificationeventdeliverystatus.FieldID, field.TypeString))
	)
	_spec.OnConflict = nedsc.conflict
	if id, ok := nedsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nedsc.mutation.Namespace(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := nedsc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nedsc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nedsc.mutation.EventID(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := nedsc.mutation.ChannelID(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := nedsc.mutation.State(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if nodes := nedsc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationEventDeliveryStatus.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationEventDeliveryStatusUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (nedsc *NotificationEventDeliveryStatusCreate) OnConflict(opts ...sql.ConflictOption) *NotificationEventDeliveryStatusUpsertOne {
	nedsc.conflict = opts
	return &NotificationEventDeliveryStatusUpsertOne{
		create: nedsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationEventDeliveryStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nedsc *NotificationEventDeliveryStatusCreate) OnConflictColumns(columns ...string) *NotificationEventDeliveryStatusUpsertOne {
	nedsc.conflict = append(nedsc.conflict, sql.ConflictColumns(columns...))
	return &NotificationEventDeliveryStatusUpsertOne{
		create: nedsc,
	}
}

type (
	// NotificationEventDeliveryStatusUpsertOne is the builder for "upsert"-ing
	//  one NotificationEventDeliveryStatus node.
	NotificationEventDeliveryStatusUpsertOne struct {
		create *NotificationEventDeliveryStatusCreate
	}

	// NotificationEventDeliveryStatusUpsert is the "OnConflict" setter.
	NotificationEventDeliveryStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationEventDeliveryStatusUpsert) SetUpdatedAt(v time.Time) *NotificationEventDeliveryStatusUpsert {
	u.Set(notificationeventdeliverystatus.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationEventDeliveryStatusUpsert) UpdateUpdatedAt() *NotificationEventDeliveryStatusUpsert {
	u.SetExcluded(notificationeventdeliverystatus.FieldUpdatedAt)
	return u
}

// SetState sets the "state" field.
func (u *NotificationEventDeliveryStatusUpsert) SetState(v notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpsert {
	u.Set(notificationeventdeliverystatus.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *NotificationEventDeliveryStatusUpsert) UpdateState() *NotificationEventDeliveryStatusUpsert {
	u.SetExcluded(notificationeventdeliverystatus.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationEventDeliveryStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationeventdeliverystatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationEventDeliveryStatusUpsertOne) UpdateNewValues() *NotificationEventDeliveryStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationeventdeliverystatus.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(notificationeventdeliverystatus.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationeventdeliverystatus.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.EventID(); exists {
			s.SetIgnore(notificationeventdeliverystatus.FieldEventID)
		}
		if _, exists := u.create.mutation.ChannelID(); exists {
			s.SetIgnore(notificationeventdeliverystatus.FieldChannelID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationEventDeliveryStatus.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationEventDeliveryStatusUpsertOne) Ignore() *NotificationEventDeliveryStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationEventDeliveryStatusUpsertOne) DoNothing() *NotificationEventDeliveryStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationEventDeliveryStatusCreate.OnConflict
// documentation for more info.
func (u *NotificationEventDeliveryStatusUpsertOne) Update(set func(*NotificationEventDeliveryStatusUpsert)) *NotificationEventDeliveryStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationEventDeliveryStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationEventDeliveryStatusUpsertOne) SetUpdatedAt(v time.Time) *NotificationEventDeliveryStatusUpsertOne {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationEventDeliveryStatusUpsertOne) UpdateUpdatedAt() *NotificationEventDeliveryStatusUpsertOne {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetState sets the "state" field.
func (u *NotificationEventDeliveryStatusUpsertOne) SetState(v notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpsertOne {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *NotificationEventDeliveryStatusUpsertOne) UpdateState() *NotificationEventDeliveryStatusUpsertOne {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *NotificationEventDeliveryStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationEventDeliveryStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationEventDeliveryStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationEventDeliveryStatusUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationEventDeliveryStatusUpsertOne.ID is not supported by MySQL driver. Use NotificationEventDeliveryStatusUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationEventDeliveryStatusUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationEventDeliveryStatusCreateBulk is the builder for creating many NotificationEventDeliveryStatus entities in bulk.
type NotificationEventDeliveryStatusCreateBulk struct {
	config
	err      error
	builders []*NotificationEventDeliveryStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationEventDeliveryStatus entities in the database.
func (nedscb *NotificationEventDeliveryStatusCreateBulk) Save(ctx context.Context) ([]*NotificationEventDeliveryStatus, error) {
	if nedscb.err != nil {
		return nil, nedscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nedscb.builders))
	nodes := make([]*NotificationEventDeliveryStatus, len(nedscb.builders))
	mutators := make([]Mutator, len(nedscb.builders))
	for i := range nedscb.builders {
		func(i int, root context.Context) {
			builder := nedscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationEventDeliveryStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nedscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nedscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nedscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nedscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nedscb *NotificationEventDeliveryStatusCreateBulk) SaveX(ctx context.Context) []*NotificationEventDeliveryStatus {
	v, err := nedscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nedscb *NotificationEventDeliveryStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := nedscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nedscb *NotificationEventDeliveryStatusCreateBulk) ExecX(ctx context.Context) {
	if err := nedscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationEventDeliveryStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationEventDeliveryStatusUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (nedscb *NotificationEventDeliveryStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationEventDeliveryStatusUpsertBulk {
	nedscb.conflict = opts
	return &NotificationEventDeliveryStatusUpsertBulk{
		create: nedscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationEventDeliveryStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nedscb *NotificationEventDeliveryStatusCreateBulk) OnConflictColumns(columns ...string) *NotificationEventDeliveryStatusUpsertBulk {
	nedscb.conflict = append(nedscb.conflict, sql.ConflictColumns(columns...))
	return &NotificationEventDeliveryStatusUpsertBulk{
		create: nedscb,
	}
}

// NotificationEventDeliveryStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationEventDeliveryStatus nodes.
type NotificationEventDeliveryStatusUpsertBulk struct {
	create *NotificationEventDeliveryStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationEventDeliveryStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationeventdeliverystatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationEventDeliveryStatusUpsertBulk) UpdateNewValues() *NotificationEventDeliveryStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationeventdeliverystatus.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(notificationeventdeliverystatus.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationeventdeliverystatus.FieldCreatedAt)
			}
			if _, exists := b.mutation.EventID(); exists {
				s.SetIgnore(notificationeventdeliverystatus.FieldEventID)
			}
			if _, exists := b.mutation.ChannelID(); exists {
				s.SetIgnore(notificationeventdeliverystatus.FieldChannelID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationEventDeliveryStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationEventDeliveryStatusUpsertBulk) Ignore() *NotificationEventDeliveryStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationEventDeliveryStatusUpsertBulk) DoNothing() *NotificationEventDeliveryStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationEventDeliveryStatusCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationEventDeliveryStatusUpsertBulk) Update(set func(*NotificationEventDeliveryStatusUpsert)) *NotificationEventDeliveryStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationEventDeliveryStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationEventDeliveryStatusUpsertBulk) SetUpdatedAt(v time.Time) *NotificationEventDeliveryStatusUpsertBulk {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationEventDeliveryStatusUpsertBulk) UpdateUpdatedAt() *NotificationEventDeliveryStatusUpsertBulk {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetState sets the "state" field.
func (u *NotificationEventDeliveryStatusUpsertBulk) SetState(v notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpsertBulk {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *NotificationEventDeliveryStatusUpsertBulk) UpdateState() *NotificationEventDeliveryStatusUpsertBulk {
	return u.Update(func(s *NotificationEventDeliveryStatusUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *NotificationEventDeliveryStatusUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationEventDeliveryStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationEventDeliveryStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationEventDeliveryStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
